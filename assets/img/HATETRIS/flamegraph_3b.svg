<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="886" onload="init(evt)" viewBox="0 0 1200 886" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="886" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="869.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="869.00"> </text><svg id="frames" x="10" width="1180"><g><title>[libcuda.so.460.91.03] (51 samples, 0.18%)</title><rect x="0.1976%" y="789" width="0.1800%" height="15" fill="rgb(227,0,7)"/><text x="0.4476%" y="799.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (30 samples, 0.11%)</title><rect x="0.5859%" y="789" width="0.1059%" height="15" fill="rgb(217,0,24)"/><text x="0.8359%" y="799.50"></text></g><g><title>&lt;mcts_policy::game_rules::Move as core::hash::Hash&gt;::hash (109 samples, 0.38%)</title><rect x="0.8294%" y="773" width="0.3847%" height="15" fill="rgb(221,193,54)"/><text x="1.0794%" y="783.50"></text></g><g><title>hashbrown::map::make_hash (162 samples, 0.57%)</title><rect x="0.6917%" y="789" width="0.5718%" height="15" fill="rgb(248,212,6)"/><text x="0.9417%" y="799.50"></text></g><g><title>[[heap]] (356 samples, 1.26%)</title><rect x="0.1059%" y="805" width="1.2564%" height="15" fill="rgb(208,68,35)"/><text x="0.3559%" y="815.50"></text></g><g><title>[libcuda.so.460.91.03] (50 samples, 0.18%)</title><rect x="1.4858%" y="789" width="0.1765%" height="15" fill="rgb(232,128,0)"/><text x="1.7358%" y="799.50"></text></g><g><title>hashbrown::map::make_hash (34 samples, 0.12%)</title><rect x="1.7858%" y="789" width="0.1200%" height="15" fill="rgb(207,160,47)"/><text x="2.0358%" y="799.50"></text></g><g><title>mcts_policy::game_rules::legal_moves (38 samples, 0.13%)</title><rect x="2.1388%" y="773" width="0.1341%" height="15" fill="rgb(228,23,34)"/><text x="2.3888%" y="783.50"></text></g><g><title>mcts_policy::game_rules::possible_moves (47 samples, 0.17%)</title><rect x="2.1176%" y="789" width="0.1659%" height="15" fill="rgb(218,30,26)"/><text x="2.3676%" y="799.50"></text></g><g><title>[[stack]] (301 samples, 1.06%)</title><rect x="1.3623%" y="805" width="1.0623%" height="15" fill="rgb(220,122,19)"/><text x="1.6123%" y="815.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (45 samples, 0.16%)</title><rect x="3.7340%" y="789" width="0.1588%" height="15" fill="rgb(250,228,42)"/><text x="3.9840%" y="799.50"></text></g><g><title>[libcuda.so.460.91.03] (58 samples, 0.20%)</title><rect x="3.8928%" y="789" width="0.2047%" height="15" fill="rgb(240,193,28)"/><text x="4.1428%" y="799.50"></text></g><g><title>[unknown] (111 samples, 0.39%)</title><rect x="4.1152%" y="789" width="0.3918%" height="15" fill="rgb(216,20,37)"/><text x="4.3652%" y="799.50"></text></g><g><title>[unknown] (111 samples, 0.39%)</title><rect x="4.1152%" y="773" width="0.3918%" height="15" fill="rgb(206,188,39)"/><text x="4.3652%" y="783.50"></text></g><g><title>[unknown] (109 samples, 0.38%)</title><rect x="4.1223%" y="757" width="0.3847%" height="15" fill="rgb(217,207,13)"/><text x="4.3723%" y="767.50"></text></g><g><title>[unknown] (106 samples, 0.37%)</title><rect x="4.1328%" y="741" width="0.3741%" height="15" fill="rgb(231,73,38)"/><text x="4.3828%" y="751.50"></text></g><g><title>[unknown] (106 samples, 0.37%)</title><rect x="4.1328%" y="725" width="0.3741%" height="15" fill="rgb(225,20,46)"/><text x="4.3828%" y="735.50"></text></g><g><title>[unknown] (106 samples, 0.37%)</title><rect x="4.1328%" y="709" width="0.3741%" height="15" fill="rgb(210,31,41)"/><text x="4.3828%" y="719.50"></text></g><g><title>[unknown] (102 samples, 0.36%)</title><rect x="4.1470%" y="693" width="0.3600%" height="15" fill="rgb(221,200,47)"/><text x="4.3970%" y="703.50"></text></g><g><title>[unknown] (101 samples, 0.36%)</title><rect x="4.1505%" y="677" width="0.3565%" height="15" fill="rgb(226,26,5)"/><text x="4.4005%" y="687.50"></text></g><g><title>[unknown] (97 samples, 0.34%)</title><rect x="4.1646%" y="661" width="0.3423%" height="15" fill="rgb(249,33,26)"/><text x="4.4146%" y="671.50"></text></g><g><title>[unknown] (97 samples, 0.34%)</title><rect x="4.1646%" y="645" width="0.3423%" height="15" fill="rgb(235,183,28)"/><text x="4.4146%" y="655.50"></text></g><g><title>[unknown] (96 samples, 0.34%)</title><rect x="4.1681%" y="629" width="0.3388%" height="15" fill="rgb(221,5,38)"/><text x="4.4181%" y="639.50"></text></g><g><title>[unknown] (96 samples, 0.34%)</title><rect x="4.1681%" y="613" width="0.3388%" height="15" fill="rgb(247,18,42)"/><text x="4.4181%" y="623.50"></text></g><g><title>[unknown] (70 samples, 0.25%)</title><rect x="4.2599%" y="597" width="0.2471%" height="15" fill="rgb(241,131,45)"/><text x="4.5099%" y="607.50"></text></g><g><title>[unknown] (58 samples, 0.20%)</title><rect x="4.3023%" y="581" width="0.2047%" height="15" fill="rgb(249,31,29)"/><text x="4.5523%" y="591.50"></text></g><g><title>[unknown] (47 samples, 0.17%)</title><rect x="4.3411%" y="565" width="0.1659%" height="15" fill="rgb(225,111,53)"/><text x="4.5911%" y="575.50"></text></g><g><title>[unknown] (34 samples, 0.12%)</title><rect x="4.3870%" y="549" width="0.1200%" height="15" fill="rgb(238,160,17)"/><text x="4.6370%" y="559.50"></text></g><g><title>_int_free (32 samples, 0.11%)</title><rect x="4.7187%" y="789" width="0.1129%" height="15" fill="rgb(214,148,48)"/><text x="4.9687%" y="799.50"></text></g><g><title>at::(anonymous namespace)::(anonymous namespace)::wrapper_empty_memory_format (64 samples, 0.23%)</title><rect x="5.0081%" y="789" width="0.2259%" height="15" fill="rgb(232,36,49)"/><text x="5.2581%" y="799.50"></text></g><g><title>at::native::empty_cuda (64 samples, 0.23%)</title><rect x="5.0081%" y="773" width="0.2259%" height="15" fill="rgb(209,103,24)"/><text x="5.2581%" y="783.50"></text></g><g><title>c10::cuda::CUDACachingAllocator::CudaCachingAllocator::allocate (64 samples, 0.23%)</title><rect x="5.0081%" y="757" width="0.2259%" height="15" fill="rgb(229,88,8)"/><text x="5.2581%" y="767.50"></text></g><g><title>c10::cuda::CUDACachingAllocator::THCCachingAllocator::malloc (64 samples, 0.23%)</title><rect x="5.0081%" y="741" width="0.2259%" height="15" fill="rgb(213,181,19)"/><text x="5.2581%" y="751.50"></text></g><g><title>c10::cuda::CUDACachingAllocator::DeviceCachingAllocator::malloc (64 samples, 0.23%)</title><rect x="5.0081%" y="725" width="0.2259%" height="15" fill="rgb(254,191,54)"/><text x="5.2581%" y="735.50"></text></g><g><title>c10::cuda::CUDACachingAllocator::DeviceCachingAllocator::alloc_block (64 samples, 0.23%)</title><rect x="5.0081%" y="709" width="0.2259%" height="15" fill="rgb(241,83,37)"/><text x="5.2581%" y="719.50"></text></g><g><title>cudaStreamIsCapturing (64 samples, 0.23%)</title><rect x="5.0081%" y="693" width="0.2259%" height="15" fill="rgb(233,36,39)"/><text x="5.2581%" y="703.50"></text></g><g><title>[libcudart-6d56b25a.so.11.0] (64 samples, 0.23%)</title><rect x="5.0081%" y="677" width="0.2259%" height="15" fill="rgb(226,3,54)"/><text x="5.2581%" y="687.50"></text></g><g><title>[libcudart-6d56b25a.so.11.0] (64 samples, 0.23%)</title><rect x="5.0081%" y="661" width="0.2259%" height="15" fill="rgb(245,192,40)"/><text x="5.2581%" y="671.50"></text></g><g><title>[libcudart-6d56b25a.so.11.0] (64 samples, 0.23%)</title><rect x="5.0081%" y="645" width="0.2259%" height="15" fill="rgb(238,167,29)"/><text x="5.2581%" y="655.50"></text></g><g><title>[libcudart-6d56b25a.so.11.0] (64 samples, 0.23%)</title><rect x="5.0081%" y="629" width="0.2259%" height="15" fill="rgb(232,182,51)"/><text x="5.2581%" y="639.50"></text></g><g><title>[libcudart-6d56b25a.so.11.0] (64 samples, 0.23%)</title><rect x="5.0081%" y="613" width="0.2259%" height="15" fill="rgb(231,60,39)"/><text x="5.2581%" y="623.50"></text></g><g><title>[libcudart-6d56b25a.so.11.0] (64 samples, 0.23%)</title><rect x="5.0081%" y="597" width="0.2259%" height="15" fill="rgb(208,69,12)"/><text x="5.2581%" y="607.50"></text></g><g><title>[libcuda.so.460.91.03] (64 samples, 0.23%)</title><rect x="5.0081%" y="581" width="0.2259%" height="15" fill="rgb(235,93,37)"/><text x="5.2581%" y="591.50"></text></g><g><title>[libcuda.so.460.91.03] (64 samples, 0.23%)</title><rect x="5.0081%" y="565" width="0.2259%" height="15" fill="rgb(213,116,39)"/><text x="5.2581%" y="575.50"></text></g><g><title>[libcuda.so.460.91.03] (64 samples, 0.23%)</title><rect x="5.0081%" y="549" width="0.2259%" height="15" fill="rgb(222,207,29)"/><text x="5.2581%" y="559.50"></text></g><g><title>[libcuda.so.460.91.03] (64 samples, 0.23%)</title><rect x="5.0081%" y="533" width="0.2259%" height="15" fill="rgb(206,96,30)"/><text x="5.2581%" y="543.50"></text></g><g><title>[libcuda.so.460.91.03] (64 samples, 0.23%)</title><rect x="5.0081%" y="517" width="0.2259%" height="15" fill="rgb(218,138,4)"/><text x="5.2581%" y="527.50"></text></g><g><title>[libcuda.so.460.91.03] (64 samples, 0.23%)</title><rect x="5.0081%" y="501" width="0.2259%" height="15" fill="rgb(250,191,14)"/><text x="5.2581%" y="511.50"></text></g><g><title>[libcuda.so.460.91.03] (64 samples, 0.23%)</title><rect x="5.0081%" y="485" width="0.2259%" height="15" fill="rgb(239,60,40)"/><text x="5.2581%" y="495.50"></text></g><g><title>[libcuda.so.460.91.03] (64 samples, 0.23%)</title><rect x="5.0081%" y="469" width="0.2259%" height="15" fill="rgb(206,27,48)"/><text x="5.2581%" y="479.50"></text></g><g><title>[libcuda.so.460.91.03] (64 samples, 0.23%)</title><rect x="5.0081%" y="453" width="0.2259%" height="15" fill="rgb(225,35,8)"/><text x="5.2581%" y="463.50"></text></g><g><title>[libcuda.so.460.91.03] (64 samples, 0.23%)</title><rect x="5.0081%" y="437" width="0.2259%" height="15" fill="rgb(250,213,24)"/><text x="5.2581%" y="447.50"></text></g><g><title>[libcuda.so.460.91.03] (64 samples, 0.23%)</title><rect x="5.0081%" y="421" width="0.2259%" height="15" fill="rgb(247,123,22)"/><text x="5.2581%" y="431.50"></text></g><g><title>[libcuda.so.460.91.03] (64 samples, 0.23%)</title><rect x="5.0081%" y="405" width="0.2259%" height="15" fill="rgb(231,138,38)"/><text x="5.2581%" y="415.50"></text></g><g><title>[libcuda.so.460.91.03] (64 samples, 0.23%)</title><rect x="5.0081%" y="389" width="0.2259%" height="15" fill="rgb(231,145,46)"/><text x="5.2581%" y="399.50"></text></g><g><title>[libcuda.so.460.91.03] (64 samples, 0.23%)</title><rect x="5.0081%" y="373" width="0.2259%" height="15" fill="rgb(251,118,11)"/><text x="5.2581%" y="383.50"></text></g><g><title>[libcuda.so.460.91.03] (62 samples, 0.22%)</title><rect x="5.0152%" y="357" width="0.2188%" height="15" fill="rgb(217,147,25)"/><text x="5.2652%" y="367.50"></text></g><g><title>[libcuda.so.460.91.03] (29 samples, 0.10%)</title><rect x="5.4281%" y="357" width="0.1024%" height="15" fill="rgb(247,81,37)"/><text x="5.6781%" y="367.50"></text></g><g><title>[libcuda.so.460.91.03] (33 samples, 0.12%)</title><rect x="5.4210%" y="373" width="0.1165%" height="15" fill="rgb(209,12,38)"/><text x="5.6710%" y="383.50"></text></g><g><title>[libcuda.so.460.91.03] (87 samples, 0.31%)</title><rect x="5.2340%" y="389" width="0.3071%" height="15" fill="rgb(227,1,9)"/><text x="5.4840%" y="399.50"></text></g><g><title>[libcuda.so.460.91.03] (89 samples, 0.31%)</title><rect x="5.2340%" y="437" width="0.3141%" height="15" fill="rgb(248,47,43)"/><text x="5.4840%" y="447.50"></text></g><g><title>[libcuda.so.460.91.03] (89 samples, 0.31%)</title><rect x="5.2340%" y="421" width="0.3141%" height="15" fill="rgb(221,10,30)"/><text x="5.4840%" y="431.50"></text></g><g><title>[libcuda.so.460.91.03] (89 samples, 0.31%)</title><rect x="5.2340%" y="405" width="0.3141%" height="15" fill="rgb(210,229,1)"/><text x="5.4840%" y="415.50"></text></g><g><title>at::empty (96 samples, 0.34%)</title><rect x="5.2340%" y="789" width="0.3388%" height="15" fill="rgb(222,148,37)"/><text x="5.4840%" y="799.50"></text></g><g><title>c10::impl::wrap_kernel_functor_unboxed_&lt;c10::impl::detail::WrapFunctionIntoFunctor_&lt;c10::CompileTimeFunctionPointer&lt;at::Tensor (c10::ArrayRef&lt;long&gt;, c10::optional&lt;c10::ScalarType&gt;, c10::optional&lt;c10::Layout&gt;, c10::optional&lt;c10::Device&gt;, c10::optional&lt;bool&gt;, c10::optional&lt;c10::MemoryFormat&gt;), &amp;at::(anonymous namespace)::empty_memory_format&gt;, at::Tensor, c10::guts::typelist::typelist&lt;c10::ArrayRef&lt;long&gt;, c10::optional&lt;c10::ScalarType&gt;, c10::optional&lt;c10::Layout&gt;, c10::optional&lt;c10::Device&gt;, c10::optional&lt;bool&gt;, c10::optional&lt;c10::MemoryFormat&gt; &gt; &gt;, at::Tensor (c10::ArrayRef&lt;long&gt;, c10::optional&lt;c10::ScalarType&gt;, c10::optional&lt;c10::Layout&gt;, c10::optional&lt;c10::Device&gt;, c10::optional&lt;bool&gt;, c10::optional&lt;c10::MemoryFormat&gt;)&gt;::call (96 samples, 0.34%)</title><rect x="5.2340%" y="773" width="0.3388%" height="15" fill="rgb(234,67,33)"/><text x="5.4840%" y="783.50"></text></g><g><title>c10::impl::wrap_kernel_functor_unboxed_&lt;c10::impl::detail::WrapFunctionIntoFunctor_&lt;c10::CompileTimeFunctionPointer&lt;at::Tensor (c10::ArrayRef&lt;long&gt;, c10::optional&lt;c10::ScalarType&gt;, c10::optional&lt;c10::Layout&gt;, c10::optional&lt;c10::Device&gt;, c10::optional&lt;bool&gt;, c10::optional&lt;c10::MemoryFormat&gt;), &amp;at::(anonymous namespace)::(anonymous namespace)::wrapper_empty_memory_format&gt;, at::Tensor, c10::guts::typelist::typelist&lt;c10::ArrayRef&lt;long&gt;, c10::optional&lt;c10::ScalarType&gt;, c10::optional&lt;c10::Layout&gt;, c10::optional&lt;c10::Device&gt;, c10::optional&lt;bool&gt;, c10::optional&lt;c10::MemoryFormat&gt; &gt; &gt;, at::Tensor (c10::ArrayRef&lt;long&gt;, c10::optional&lt;c10::ScalarType&gt;, c10::optional&lt;c10::Layout&gt;, c10::optional&lt;c10::Device&gt;, c10::optional&lt;bool&gt;, c10::optional&lt;c10::MemoryFormat&gt;)&gt;::call (96 samples, 0.34%)</title><rect x="5.2340%" y="757" width="0.3388%" height="15" fill="rgb(247,98,35)"/><text x="5.4840%" y="767.50"></text></g><g><title>at::(anonymous namespace)::(anonymous namespace)::wrapper_empty_memory_format (96 samples, 0.34%)</title><rect x="5.2340%" y="741" width="0.3388%" height="15" fill="rgb(247,138,52)"/><text x="5.4840%" y="751.50"></text></g><g><title>at::native::empty_cuda (96 samples, 0.34%)</title><rect x="5.2340%" y="725" width="0.3388%" height="15" fill="rgb(213,79,30)"/><text x="5.4840%" y="735.50"></text></g><g><title>c10::cuda::CUDACachingAllocator::CudaCachingAllocator::allocate (96 samples, 0.34%)</title><rect x="5.2340%" y="709" width="0.3388%" height="15" fill="rgb(246,177,23)"/><text x="5.4840%" y="719.50"></text></g><g><title>c10::cuda::CUDACachingAllocator::THCCachingAllocator::malloc (96 samples, 0.34%)</title><rect x="5.2340%" y="693" width="0.3388%" height="15" fill="rgb(230,62,27)"/><text x="5.4840%" y="703.50"></text></g><g><title>c10::cuda::CUDACachingAllocator::DeviceCachingAllocator::malloc (96 samples, 0.34%)</title><rect x="5.2340%" y="677" width="0.3388%" height="15" fill="rgb(216,154,8)"/><text x="5.4840%" y="687.50"></text></g><g><title>c10::cuda::CUDACachingAllocator::DeviceCachingAllocator::alloc_block (96 samples, 0.34%)</title><rect x="5.2340%" y="661" width="0.3388%" height="15" fill="rgb(244,35,45)"/><text x="5.4840%" y="671.50"></text></g><g><title>cudaStreamIsCapturing (96 samples, 0.34%)</title><rect x="5.2340%" y="645" width="0.3388%" height="15" fill="rgb(251,115,12)"/><text x="5.4840%" y="655.50"></text></g><g><title>[libcudart-6d56b25a.so.11.0] (96 samples, 0.34%)</title><rect x="5.2340%" y="629" width="0.3388%" height="15" fill="rgb(240,54,50)"/><text x="5.4840%" y="639.50"></text></g><g><title>[libcudart-6d56b25a.so.11.0] (96 samples, 0.34%)</title><rect x="5.2340%" y="613" width="0.3388%" height="15" fill="rgb(233,84,52)"/><text x="5.4840%" y="623.50"></text></g><g><title>[libcudart-6d56b25a.so.11.0] (96 samples, 0.34%)</title><rect x="5.2340%" y="597" width="0.3388%" height="15" fill="rgb(207,117,47)"/><text x="5.4840%" y="607.50"></text></g><g><title>[libcudart-6d56b25a.so.11.0] (96 samples, 0.34%)</title><rect x="5.2340%" y="581" width="0.3388%" height="15" fill="rgb(249,43,39)"/><text x="5.4840%" y="591.50"></text></g><g><title>[libcudart-6d56b25a.so.11.0] (96 samples, 0.34%)</title><rect x="5.2340%" y="565" width="0.3388%" height="15" fill="rgb(209,38,44)"/><text x="5.4840%" y="575.50"></text></g><g><title>[libcudart-6d56b25a.so.11.0] (96 samples, 0.34%)</title><rect x="5.2340%" y="549" width="0.3388%" height="15" fill="rgb(236,212,23)"/><text x="5.4840%" y="559.50"></text></g><g><title>[libcuda.so.460.91.03] (96 samples, 0.34%)</title><rect x="5.2340%" y="533" width="0.3388%" height="15" fill="rgb(242,79,21)"/><text x="5.4840%" y="543.50"></text></g><g><title>[libcuda.so.460.91.03] (96 samples, 0.34%)</title><rect x="5.2340%" y="517" width="0.3388%" height="15" fill="rgb(211,96,35)"/><text x="5.4840%" y="527.50"></text></g><g><title>[libcuda.so.460.91.03] (96 samples, 0.34%)</title><rect x="5.2340%" y="501" width="0.3388%" height="15" fill="rgb(253,215,40)"/><text x="5.4840%" y="511.50"></text></g><g><title>[libcuda.so.460.91.03] (96 samples, 0.34%)</title><rect x="5.2340%" y="485" width="0.3388%" height="15" fill="rgb(211,81,21)"/><text x="5.4840%" y="495.50"></text></g><g><title>[libcuda.so.460.91.03] (96 samples, 0.34%)</title><rect x="5.2340%" y="469" width="0.3388%" height="15" fill="rgb(208,190,38)"/><text x="5.4840%" y="479.50"></text></g><g><title>[libcuda.so.460.91.03] (96 samples, 0.34%)</title><rect x="5.2340%" y="453" width="0.3388%" height="15" fill="rgb(235,213,38)"/><text x="5.4840%" y="463.50"></text></g><g><title>c10::cuda::CUDACachingAllocator::DeviceCachingAllocator::alloc_block (46 samples, 0.16%)</title><rect x="5.8163%" y="789" width="0.1623%" height="15" fill="rgb(237,122,38)"/><text x="6.0663%" y="799.50"></text></g><g><title>cudaStreamIsCapturing (46 samples, 0.16%)</title><rect x="5.8163%" y="773" width="0.1623%" height="15" fill="rgb(244,218,35)"/><text x="6.0663%" y="783.50"></text></g><g><title>[libcudart-6d56b25a.so.11.0] (46 samples, 0.16%)</title><rect x="5.8163%" y="757" width="0.1623%" height="15" fill="rgb(240,68,47)"/><text x="6.0663%" y="767.50"></text></g><g><title>[libcudart-6d56b25a.so.11.0] (46 samples, 0.16%)</title><rect x="5.8163%" y="741" width="0.1623%" height="15" fill="rgb(210,16,53)"/><text x="6.0663%" y="751.50"></text></g><g><title>[libcudart-6d56b25a.so.11.0] (46 samples, 0.16%)</title><rect x="5.8163%" y="725" width="0.1623%" height="15" fill="rgb(235,124,12)"/><text x="6.0663%" y="735.50"></text></g><g><title>[libcudart-6d56b25a.so.11.0] (46 samples, 0.16%)</title><rect x="5.8163%" y="709" width="0.1623%" height="15" fill="rgb(224,169,11)"/><text x="6.0663%" y="719.50"></text></g><g><title>[libcudart-6d56b25a.so.11.0] (46 samples, 0.16%)</title><rect x="5.8163%" y="693" width="0.1623%" height="15" fill="rgb(250,166,2)"/><text x="6.0663%" y="703.50"></text></g><g><title>[libcudart-6d56b25a.so.11.0] (46 samples, 0.16%)</title><rect x="5.8163%" y="677" width="0.1623%" height="15" fill="rgb(242,216,29)"/><text x="6.0663%" y="687.50"></text></g><g><title>[libcuda.so.460.91.03] (46 samples, 0.16%)</title><rect x="5.8163%" y="661" width="0.1623%" height="15" fill="rgb(230,116,27)"/><text x="6.0663%" y="671.50"></text></g><g><title>[libcuda.so.460.91.03] (46 samples, 0.16%)</title><rect x="5.8163%" y="645" width="0.1623%" height="15" fill="rgb(228,99,48)"/><text x="6.0663%" y="655.50"></text></g><g><title>[libcuda.so.460.91.03] (46 samples, 0.16%)</title><rect x="5.8163%" y="629" width="0.1623%" height="15" fill="rgb(253,11,6)"/><text x="6.0663%" y="639.50"></text></g><g><title>[libcuda.so.460.91.03] (46 samples, 0.16%)</title><rect x="5.8163%" y="613" width="0.1623%" height="15" fill="rgb(247,143,39)"/><text x="6.0663%" y="623.50"></text></g><g><title>[libcuda.so.460.91.03] (46 samples, 0.16%)</title><rect x="5.8163%" y="597" width="0.1623%" height="15" fill="rgb(236,97,10)"/><text x="6.0663%" y="607.50"></text></g><g><title>[libcuda.so.460.91.03] (46 samples, 0.16%)</title><rect x="5.8163%" y="581" width="0.1623%" height="15" fill="rgb(233,208,19)"/><text x="6.0663%" y="591.50"></text></g><g><title>[libcuda.so.460.91.03] (46 samples, 0.16%)</title><rect x="5.8163%" y="565" width="0.1623%" height="15" fill="rgb(216,164,2)"/><text x="6.0663%" y="575.50"></text></g><g><title>[libcuda.so.460.91.03] (46 samples, 0.16%)</title><rect x="5.8163%" y="549" width="0.1623%" height="15" fill="rgb(220,129,5)"/><text x="6.0663%" y="559.50"></text></g><g><title>[libcuda.so.460.91.03] (46 samples, 0.16%)</title><rect x="5.8163%" y="533" width="0.1623%" height="15" fill="rgb(242,17,10)"/><text x="6.0663%" y="543.50"></text></g><g><title>[libcuda.so.460.91.03] (46 samples, 0.16%)</title><rect x="5.8163%" y="517" width="0.1623%" height="15" fill="rgb(242,107,0)"/><text x="6.0663%" y="527.50"></text></g><g><title>[libcuda.so.460.91.03] (46 samples, 0.16%)</title><rect x="5.8163%" y="501" width="0.1623%" height="15" fill="rgb(251,28,31)"/><text x="6.0663%" y="511.50"></text></g><g><title>[libcuda.so.460.91.03] (46 samples, 0.16%)</title><rect x="5.8163%" y="485" width="0.1623%" height="15" fill="rgb(233,223,10)"/><text x="6.0663%" y="495.50"></text></g><g><title>[libcuda.so.460.91.03] (46 samples, 0.16%)</title><rect x="5.8163%" y="469" width="0.1623%" height="15" fill="rgb(215,21,27)"/><text x="6.0663%" y="479.50"></text></g><g><title>[libcuda.so.460.91.03] (46 samples, 0.16%)</title><rect x="5.8163%" y="453" width="0.1623%" height="15" fill="rgb(232,23,21)"/><text x="6.0663%" y="463.50"></text></g><g><title>[libcuda.so.460.91.03] (46 samples, 0.16%)</title><rect x="5.8163%" y="437" width="0.1623%" height="15" fill="rgb(244,5,23)"/><text x="6.0663%" y="447.50"></text></g><g><title>[libcuda.so.460.91.03] (46 samples, 0.16%)</title><rect x="5.8163%" y="421" width="0.1623%" height="15" fill="rgb(226,81,46)"/><text x="6.0663%" y="431.50"></text></g><g><title>__ioctl (46 samples, 0.16%)</title><rect x="5.8163%" y="405" width="0.1623%" height="15" fill="rgb(247,70,30)"/><text x="6.0663%" y="415.50"></text></g><g><title>[unknown] (46 samples, 0.16%)</title><rect x="5.8163%" y="389" width="0.1623%" height="15" fill="rgb(212,68,19)"/><text x="6.0663%" y="399.50"></text></g><g><title>[unknown] (37 samples, 0.13%)</title><rect x="5.8481%" y="373" width="0.1306%" height="15" fill="rgb(240,187,13)"/><text x="6.0981%" y="383.50"></text></g><g><title>[unknown] (37 samples, 0.13%)</title><rect x="5.8481%" y="357" width="0.1306%" height="15" fill="rgb(223,113,26)"/><text x="6.0981%" y="367.50"></text></g><g><title>[unknown] (37 samples, 0.13%)</title><rect x="5.8481%" y="341" width="0.1306%" height="15" fill="rgb(206,192,2)"/><text x="6.0981%" y="351.50"></text></g><g><title>[unknown] (37 samples, 0.13%)</title><rect x="5.8481%" y="325" width="0.1306%" height="15" fill="rgb(241,108,4)"/><text x="6.0981%" y="335.50"></text></g><g><title>[unknown] (37 samples, 0.13%)</title><rect x="5.8481%" y="309" width="0.1306%" height="15" fill="rgb(247,173,49)"/><text x="6.0981%" y="319.50"></text></g><g><title>[unknown] (37 samples, 0.13%)</title><rect x="5.8481%" y="293" width="0.1306%" height="15" fill="rgb(224,114,35)"/><text x="6.0981%" y="303.50"></text></g><g><title>[unknown] (37 samples, 0.13%)</title><rect x="5.8481%" y="277" width="0.1306%" height="15" fill="rgb(245,159,27)"/><text x="6.0981%" y="287.50"></text></g><g><title>[unknown] (37 samples, 0.13%)</title><rect x="5.8481%" y="261" width="0.1306%" height="15" fill="rgb(245,172,44)"/><text x="6.0981%" y="271.50"></text></g><g><title>[unknown] (37 samples, 0.13%)</title><rect x="5.8481%" y="245" width="0.1306%" height="15" fill="rgb(236,23,11)"/><text x="6.0981%" y="255.50"></text></g><g><title>[unknown] (37 samples, 0.13%)</title><rect x="5.8481%" y="229" width="0.1306%" height="15" fill="rgb(205,117,38)"/><text x="6.0981%" y="239.50"></text></g><g><title>[libcuda.so.460.91.03] (38 samples, 0.13%)</title><rect x="6.0528%" y="357" width="0.1341%" height="15" fill="rgb(237,72,25)"/><text x="6.3028%" y="367.50"></text></g><g><title>[libcuda.so.460.91.03] (38 samples, 0.13%)</title><rect x="6.0528%" y="341" width="0.1341%" height="15" fill="rgb(244,70,9)"/><text x="6.3028%" y="351.50"></text></g><g><title>[libcuda.so.460.91.03] (38 samples, 0.13%)</title><rect x="6.0528%" y="325" width="0.1341%" height="15" fill="rgb(217,125,39)"/><text x="6.3028%" y="335.50"></text></g><g><title>[libcuda.so.460.91.03] (40 samples, 0.14%)</title><rect x="6.0528%" y="389" width="0.1412%" height="15" fill="rgb(235,36,10)"/><text x="6.3028%" y="399.50"></text></g><g><title>[libcuda.so.460.91.03] (40 samples, 0.14%)</title><rect x="6.0528%" y="373" width="0.1412%" height="15" fill="rgb(251,123,47)"/><text x="6.3028%" y="383.50"></text></g><g><title>c10::impl::wrap_kernel_functor_unboxed_&lt;c10::impl::detail::WrapFunctionIntoFunctor_&lt;c10::CompileTimeFunctionPointer&lt;at::Tensor (c10::ArrayRef&lt;long&gt;, c10::optional&lt;c10::ScalarType&gt;, c10::optional&lt;c10::Layout&gt;, c10::optional&lt;c10::Device&gt;, c10::optional&lt;bool&gt;), &amp;at::(anonymous namespace)::zeros&gt;, at::Tensor, c10::guts::typelist::typelist&lt;c10::ArrayRef&lt;long&gt;, c10::optional&lt;c10::ScalarType&gt;, c10::optional&lt;c10::Layout&gt;, c10::optional&lt;c10::Device&gt;, c10::optional&lt;bool&gt; &gt; &gt;, at::Tensor (c10::ArrayRef&lt;long&gt;, c10::optional&lt;c10::ScalarType&gt;, c10::optional&lt;c10::Layout&gt;, c10::optional&lt;c10::Device&gt;, c10::optional&lt;bool&gt;)&gt;::call (41 samples, 0.14%)</title><rect x="6.0528%" y="789" width="0.1447%" height="15" fill="rgb(221,13,13)"/><text x="6.3028%" y="799.50"></text></g><g><title>c10::Dispatcher::redispatch&lt;at::Tensor, c10::ArrayRef&lt;long&gt;, c10::optional&lt;c10::ScalarType&gt;, c10::optional&lt;c10::Layout&gt;, c10::optional&lt;c10::Device&gt;, c10::optional&lt;bool&gt; &gt; (41 samples, 0.14%)</title><rect x="6.0528%" y="773" width="0.1447%" height="15" fill="rgb(238,131,9)"/><text x="6.3028%" y="783.50"></text></g><g><title>c10::impl::wrap_kernel_functor_unboxed_&lt;c10::impl::detail::WrapFunctionIntoFunctor_&lt;c10::CompileTimeFunctionPointer&lt;at::Tensor (c10::ArrayRef&lt;long&gt;, c10::optional&lt;c10::ScalarType&gt;, c10::optional&lt;c10::Layout&gt;, c10::optional&lt;c10::Device&gt;, c10::optional&lt;bool&gt;), &amp;at::(anonymous namespace)::(anonymous namespace)::wrapper_zeros&gt;, at::Tensor, c10::guts::typelist::typelist&lt;c10::ArrayRef&lt;long&gt;, c10::optional&lt;c10::ScalarType&gt;, c10::optional&lt;c10::Layout&gt;, c10::optional&lt;c10::Device&gt;, c10::optional&lt;bool&gt; &gt; &gt;, at::Tensor (c10::ArrayRef&lt;long&gt;, c10::optional&lt;c10::ScalarType&gt;, c10::optional&lt;c10::Layout&gt;, c10::optional&lt;c10::Device&gt;, c10::optional&lt;bool&gt;)&gt;::call (41 samples, 0.14%)</title><rect x="6.0528%" y="757" width="0.1447%" height="15" fill="rgb(211,50,8)"/><text x="6.3028%" y="767.50"></text></g><g><title>at::native::zeros (41 samples, 0.14%)</title><rect x="6.0528%" y="741" width="0.1447%" height="15" fill="rgb(245,182,24)"/><text x="6.3028%" y="751.50"></text></g><g><title>at::empty (41 samples, 0.14%)</title><rect x="6.0528%" y="725" width="0.1447%" height="15" fill="rgb(242,14,37)"/><text x="6.3028%" y="735.50"></text></g><g><title>c10::impl::wrap_kernel_functor_unboxed_&lt;c10::impl::detail::WrapFunctionIntoFunctor_&lt;c10::CompileTimeFunctionPointer&lt;at::Tensor (c10::ArrayRef&lt;long&gt;, c10::optional&lt;c10::ScalarType&gt;, c10::optional&lt;c10::Layout&gt;, c10::optional&lt;c10::Device&gt;, c10::optional&lt;bool&gt;, c10::optional&lt;c10::MemoryFormat&gt;), &amp;at::(anonymous namespace)::empty_memory_format&gt;, at::Tensor, c10::guts::typelist::typelist&lt;c10::ArrayRef&lt;long&gt;, c10::optional&lt;c10::ScalarType&gt;, c10::optional&lt;c10::Layout&gt;, c10::optional&lt;c10::Device&gt;, c10::optional&lt;bool&gt;, c10::optional&lt;c10::MemoryFormat&gt; &gt; &gt;, at::Tensor (c10::ArrayRef&lt;long&gt;, c10::optional&lt;c10::ScalarType&gt;, c10::optional&lt;c10::Layout&gt;, c10::optional&lt;c10::Device&gt;, c10::optional&lt;bool&gt;, c10::optional&lt;c10::MemoryFormat&gt;)&gt;::call (41 samples, 0.14%)</title><rect x="6.0528%" y="709" width="0.1447%" height="15" fill="rgb(246,228,12)"/><text x="6.3028%" y="719.50"></text></g><g><title>c10::impl::wrap_kernel_functor_unboxed_&lt;c10::impl::detail::WrapFunctionIntoFunctor_&lt;c10::CompileTimeFunctionPointer&lt;at::Tensor (c10::ArrayRef&lt;long&gt;, c10::optional&lt;c10::ScalarType&gt;, c10::optional&lt;c10::Layout&gt;, c10::optional&lt;c10::Device&gt;, c10::optional&lt;bool&gt;, c10::optional&lt;c10::MemoryFormat&gt;), &amp;at::(anonymous namespace)::(anonymous namespace)::wrapper_empty_memory_format&gt;, at::Tensor, c10::guts::typelist::typelist&lt;c10::ArrayRef&lt;long&gt;, c10::optional&lt;c10::ScalarType&gt;, c10::optional&lt;c10::Layout&gt;, c10::optional&lt;c10::Device&gt;, c10::optional&lt;bool&gt;, c10::optional&lt;c10::MemoryFormat&gt; &gt; &gt;, at::Tensor (c10::ArrayRef&lt;long&gt;, c10::optional&lt;c10::ScalarType&gt;, c10::optional&lt;c10::Layout&gt;, c10::optional&lt;c10::Device&gt;, c10::optional&lt;bool&gt;, c10::optional&lt;c10::MemoryFormat&gt;)&gt;::call (41 samples, 0.14%)</title><rect x="6.0528%" y="693" width="0.1447%" height="15" fill="rgb(213,55,15)"/><text x="6.3028%" y="703.50"></text></g><g><title>at::(anonymous namespace)::(anonymous namespace)::wrapper_empty_memory_format (41 samples, 0.14%)</title><rect x="6.0528%" y="677" width="0.1447%" height="15" fill="rgb(209,9,3)"/><text x="6.3028%" y="687.50"></text></g><g><title>at::native::empty_cuda (41 samples, 0.14%)</title><rect x="6.0528%" y="661" width="0.1447%" height="15" fill="rgb(230,59,30)"/><text x="6.3028%" y="671.50"></text></g><g><title>c10::cuda::CUDACachingAllocator::CudaCachingAllocator::allocate (41 samples, 0.14%)</title><rect x="6.0528%" y="645" width="0.1447%" height="15" fill="rgb(209,121,21)"/><text x="6.3028%" y="655.50"></text></g><g><title>c10::cuda::CUDACachingAllocator::THCCachingAllocator::malloc (41 samples, 0.14%)</title><rect x="6.0528%" y="629" width="0.1447%" height="15" fill="rgb(220,109,13)"/><text x="6.3028%" y="639.50"></text></g><g><title>c10::cuda::CUDACachingAllocator::DeviceCachingAllocator::malloc (41 samples, 0.14%)</title><rect x="6.0528%" y="613" width="0.1447%" height="15" fill="rgb(232,18,1)"/><text x="6.3028%" y="623.50"></text></g><g><title>c10::cuda::CUDACachingAllocator::DeviceCachingAllocator::alloc_block (41 samples, 0.14%)</title><rect x="6.0528%" y="597" width="0.1447%" height="15" fill="rgb(215,41,42)"/><text x="6.3028%" y="607.50"></text></g><g><title>cudaStreamIsCapturing (41 samples, 0.14%)</title><rect x="6.0528%" y="581" width="0.1447%" height="15" fill="rgb(224,123,36)"/><text x="6.3028%" y="591.50"></text></g><g><title>[libcudart-6d56b25a.so.11.0] (41 samples, 0.14%)</title><rect x="6.0528%" y="565" width="0.1447%" height="15" fill="rgb(240,125,3)"/><text x="6.3028%" y="575.50"></text></g><g><title>[libcudart-6d56b25a.so.11.0] (41 samples, 0.14%)</title><rect x="6.0528%" y="549" width="0.1447%" height="15" fill="rgb(205,98,50)"/><text x="6.3028%" y="559.50"></text></g><g><title>[libcudart-6d56b25a.so.11.0] (41 samples, 0.14%)</title><rect x="6.0528%" y="533" width="0.1447%" height="15" fill="rgb(205,185,37)"/><text x="6.3028%" y="543.50"></text></g><g><title>[libcudart-6d56b25a.so.11.0] (41 samples, 0.14%)</title><rect x="6.0528%" y="517" width="0.1447%" height="15" fill="rgb(238,207,15)"/><text x="6.3028%" y="527.50"></text></g><g><title>[libcudart-6d56b25a.so.11.0] (41 samples, 0.14%)</title><rect x="6.0528%" y="501" width="0.1447%" height="15" fill="rgb(213,199,42)"/><text x="6.3028%" y="511.50"></text></g><g><title>[libcudart-6d56b25a.so.11.0] (41 samples, 0.14%)</title><rect x="6.0528%" y="485" width="0.1447%" height="15" fill="rgb(235,201,11)"/><text x="6.3028%" y="495.50"></text></g><g><title>[libcuda.so.460.91.03] (41 samples, 0.14%)</title><rect x="6.0528%" y="469" width="0.1447%" height="15" fill="rgb(207,46,11)"/><text x="6.3028%" y="479.50"></text></g><g><title>[libcuda.so.460.91.03] (41 samples, 0.14%)</title><rect x="6.0528%" y="453" width="0.1447%" height="15" fill="rgb(241,35,35)"/><text x="6.3028%" y="463.50"></text></g><g><title>[libcuda.so.460.91.03] (41 samples, 0.14%)</title><rect x="6.0528%" y="437" width="0.1447%" height="15" fill="rgb(243,32,47)"/><text x="6.3028%" y="447.50"></text></g><g><title>[libcuda.so.460.91.03] (41 samples, 0.14%)</title><rect x="6.0528%" y="421" width="0.1447%" height="15" fill="rgb(247,202,23)"/><text x="6.3028%" y="431.50"></text></g><g><title>[libcuda.so.460.91.03] (41 samples, 0.14%)</title><rect x="6.0528%" y="405" width="0.1447%" height="15" fill="rgb(219,102,11)"/><text x="6.3028%" y="415.50"></text></g><g><title>c10::impl::wrap_kernel_functor_unboxed_&lt;c10::impl::detail::WrapFunctionIntoFunctor_&lt;c10::CompileTimeFunctionPointer&lt;at::Tensor (c10::ArrayRef&lt;long&gt;, c10::optional&lt;c10::ScalarType&gt;, c10::optional&lt;c10::Layout&gt;, c10::optional&lt;c10::Device&gt;, c10::optional&lt;bool&gt;, c10::optional&lt;c10::MemoryFormat&gt;), &amp;at::(anonymous namespace)::empty_memory_format&gt;, at::Tensor, c10::guts::typelist::typelist&lt;c10::ArrayRef&lt;long&gt;, c10::optional&lt;c10::ScalarType&gt;, c10::optional&lt;c10::Layout&gt;, c10::optional&lt;c10::Device&gt;, c10::optional&lt;bool&gt;, c10::optional&lt;c10::MemoryFormat&gt; &gt; &gt;, at::Tensor (c10::ArrayRef&lt;long&gt;, c10::optional&lt;c10::ScalarType&gt;, c10::optional&lt;c10::Layout&gt;, c10::optional&lt;c10::Device&gt;, c10::optional&lt;bool&gt;, c10::optional&lt;c10::MemoryFormat&gt;)&gt;::call (52 samples, 0.18%)</title><rect x="6.1975%" y="789" width="0.1835%" height="15" fill="rgb(243,110,44)"/><text x="6.4475%" y="799.50"></text></g><g><title>c10::impl::wrap_kernel_functor_unboxed_&lt;c10::impl::detail::WrapFunctionIntoFunctor_&lt;c10::CompileTimeFunctionPointer&lt;at::Tensor (c10::ArrayRef&lt;long&gt;, c10::optional&lt;c10::ScalarType&gt;, c10::optional&lt;c10::Layout&gt;, c10::optional&lt;c10::Device&gt;, c10::optional&lt;bool&gt;, c10::optional&lt;c10::MemoryFormat&gt;), &amp;at::(anonymous namespace)::(anonymous namespace)::wrapper_empty_memory_format&gt;, at::Tensor, c10::guts::typelist::typelist&lt;c10::ArrayRef&lt;long&gt;, c10::optional&lt;c10::ScalarType&gt;, c10::optional&lt;c10::Layout&gt;, c10::optional&lt;c10::Device&gt;, c10::optional&lt;bool&gt;, c10::optional&lt;c10::MemoryFormat&gt; &gt; &gt;, at::Tensor (c10::ArrayRef&lt;long&gt;, c10::optional&lt;c10::ScalarType&gt;, c10::optional&lt;c10::Layout&gt;, c10::optional&lt;c10::Device&gt;, c10::optional&lt;bool&gt;, c10::optional&lt;c10::MemoryFormat&gt;)&gt;::call (52 samples, 0.18%)</title><rect x="6.1975%" y="773" width="0.1835%" height="15" fill="rgb(222,74,54)"/><text x="6.4475%" y="783.50"></text></g><g><title>at::(anonymous namespace)::(anonymous namespace)::wrapper_empty_memory_format (52 samples, 0.18%)</title><rect x="6.1975%" y="757" width="0.1835%" height="15" fill="rgb(216,99,12)"/><text x="6.4475%" y="767.50"></text></g><g><title>at::native::empty_cuda (52 samples, 0.18%)</title><rect x="6.1975%" y="741" width="0.1835%" height="15" fill="rgb(226,22,26)"/><text x="6.4475%" y="751.50"></text></g><g><title>c10::cuda::CUDACachingAllocator::CudaCachingAllocator::allocate (52 samples, 0.18%)</title><rect x="6.1975%" y="725" width="0.1835%" height="15" fill="rgb(217,163,10)"/><text x="6.4475%" y="735.50"></text></g><g><title>c10::cuda::CUDACachingAllocator::THCCachingAllocator::malloc (52 samples, 0.18%)</title><rect x="6.1975%" y="709" width="0.1835%" height="15" fill="rgb(213,25,53)"/><text x="6.4475%" y="719.50"></text></g><g><title>c10::cuda::CUDACachingAllocator::DeviceCachingAllocator::malloc (52 samples, 0.18%)</title><rect x="6.1975%" y="693" width="0.1835%" height="15" fill="rgb(252,105,26)"/><text x="6.4475%" y="703.50"></text></g><g><title>c10::cuda::CUDACachingAllocator::DeviceCachingAllocator::alloc_block (52 samples, 0.18%)</title><rect x="6.1975%" y="677" width="0.1835%" height="15" fill="rgb(220,39,43)"/><text x="6.4475%" y="687.50"></text></g><g><title>cudaStreamIsCapturing (52 samples, 0.18%)</title><rect x="6.1975%" y="661" width="0.1835%" height="15" fill="rgb(229,68,48)"/><text x="6.4475%" y="671.50"></text></g><g><title>[libcudart-6d56b25a.so.11.0] (52 samples, 0.18%)</title><rect x="6.1975%" y="645" width="0.1835%" height="15" fill="rgb(252,8,32)"/><text x="6.4475%" y="655.50"></text></g><g><title>[libcudart-6d56b25a.so.11.0] (52 samples, 0.18%)</title><rect x="6.1975%" y="629" width="0.1835%" height="15" fill="rgb(223,20,43)"/><text x="6.4475%" y="639.50"></text></g><g><title>[libcudart-6d56b25a.so.11.0] (52 samples, 0.18%)</title><rect x="6.1975%" y="613" width="0.1835%" height="15" fill="rgb(229,81,49)"/><text x="6.4475%" y="623.50"></text></g><g><title>[libcudart-6d56b25a.so.11.0] (52 samples, 0.18%)</title><rect x="6.1975%" y="597" width="0.1835%" height="15" fill="rgb(236,28,36)"/><text x="6.4475%" y="607.50"></text></g><g><title>[libcudart-6d56b25a.so.11.0] (52 samples, 0.18%)</title><rect x="6.1975%" y="581" width="0.1835%" height="15" fill="rgb(249,185,26)"/><text x="6.4475%" y="591.50"></text></g><g><title>[libcudart-6d56b25a.so.11.0] (52 samples, 0.18%)</title><rect x="6.1975%" y="565" width="0.1835%" height="15" fill="rgb(249,174,33)"/><text x="6.4475%" y="575.50"></text></g><g><title>[libcuda.so.460.91.03] (52 samples, 0.18%)</title><rect x="6.1975%" y="549" width="0.1835%" height="15" fill="rgb(233,201,37)"/><text x="6.4475%" y="559.50"></text></g><g><title>[libcuda.so.460.91.03] (52 samples, 0.18%)</title><rect x="6.1975%" y="533" width="0.1835%" height="15" fill="rgb(221,78,26)"/><text x="6.4475%" y="543.50"></text></g><g><title>[libcuda.so.460.91.03] (52 samples, 0.18%)</title><rect x="6.1975%" y="517" width="0.1835%" height="15" fill="rgb(250,127,30)"/><text x="6.4475%" y="527.50"></text></g><g><title>[libcuda.so.460.91.03] (52 samples, 0.18%)</title><rect x="6.1975%" y="501" width="0.1835%" height="15" fill="rgb(230,49,44)"/><text x="6.4475%" y="511.50"></text></g><g><title>[libcuda.so.460.91.03] (52 samples, 0.18%)</title><rect x="6.1975%" y="485" width="0.1835%" height="15" fill="rgb(229,67,23)"/><text x="6.4475%" y="495.50"></text></g><g><title>[libcuda.so.460.91.03] (52 samples, 0.18%)</title><rect x="6.1975%" y="469" width="0.1835%" height="15" fill="rgb(249,83,47)"/><text x="6.4475%" y="479.50"></text></g><g><title>[libcuda.so.460.91.03] (52 samples, 0.18%)</title><rect x="6.1975%" y="453" width="0.1835%" height="15" fill="rgb(215,43,3)"/><text x="6.4475%" y="463.50"></text></g><g><title>[libcuda.so.460.91.03] (52 samples, 0.18%)</title><rect x="6.1975%" y="437" width="0.1835%" height="15" fill="rgb(238,154,13)"/><text x="6.4475%" y="447.50"></text></g><g><title>[libcuda.so.460.91.03] (52 samples, 0.18%)</title><rect x="6.1975%" y="421" width="0.1835%" height="15" fill="rgb(219,56,2)"/><text x="6.4475%" y="431.50"></text></g><g><title>[libcuda.so.460.91.03] (52 samples, 0.18%)</title><rect x="6.1975%" y="405" width="0.1835%" height="15" fill="rgb(233,0,4)"/><text x="6.4475%" y="415.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for usize&gt;::hash (388 samples, 1.37%)</title><rect x="6.3916%" y="789" width="1.3694%" height="15" fill="rgb(235,30,7)"/><text x="6.6416%" y="799.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (356 samples, 1.26%)</title><rect x="7.7610%" y="789" width="1.2564%" height="15" fill="rgb(250,79,13)"/><text x="8.0110%" y="799.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (122 samples, 0.43%)</title><rect x="8.5869%" y="773" width="0.4306%" height="15" fill="rgb(211,146,34)"/><text x="8.8369%" y="783.50"></text></g><g><title>hashbrown::map::make_hash (122 samples, 0.43%)</title><rect x="8.5869%" y="757" width="0.4306%" height="15" fill="rgb(228,22,38)"/><text x="8.8369%" y="767.50"></text></g><g><title>&lt;mcts_policy::game_rules::Move as core::hash::Hash&gt;::hash (122 samples, 0.43%)</title><rect x="8.5869%" y="741" width="0.4306%" height="15" fill="rgb(235,168,5)"/><text x="8.8369%" y="751.50"></text></g><g><title>&lt;mcts_policy::game_rules::Move as core::hash::Hash&gt;::hash (45 samples, 0.16%)</title><rect x="9.4657%" y="757" width="0.1588%" height="15" fill="rgb(221,155,16)"/><text x="9.7157%" y="767.50"></text></g><g><title>hashbrown::map::make_insert_hash (49 samples, 0.17%)</title><rect x="9.4657%" y="773" width="0.1729%" height="15" fill="rgb(215,215,53)"/><text x="9.7157%" y="783.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (178 samples, 0.63%)</title><rect x="9.0174%" y="789" width="0.6282%" height="15" fill="rgb(223,4,10)"/><text x="9.2674%" y="799.50"></text></g><g><title>hashbrown::map::make_hash (31 samples, 0.11%)</title><rect x="9.6457%" y="789" width="0.1094%" height="15" fill="rgb(234,103,6)"/><text x="9.8957%" y="799.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (61 samples, 0.22%)</title><rect x="9.7551%" y="789" width="0.2153%" height="15" fill="rgb(227,97,0)"/><text x="10.0051%" y="799.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (34 samples, 0.12%)</title><rect x="9.9704%" y="789" width="0.1200%" height="15" fill="rgb(234,150,53)"/><text x="10.2204%" y="799.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::vec_deque::VecDeque&lt;([u16: 20],alloc::vec::Vec&lt;usize&gt;,alloc::vec::Vec&lt;f64&gt;)&gt;&gt; (48 samples, 0.17%)</title><rect x="10.2033%" y="773" width="0.1694%" height="15" fill="rgb(228,201,54)"/><text x="10.4533%" y="783.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;([u16: 20],alloc::vec::Vec&lt;usize&gt;,alloc::vec::Vec&lt;f64&gt;)&gt;&gt; (48 samples, 0.17%)</title><rect x="10.2033%" y="757" width="0.1694%" height="15" fill="rgb(222,22,37)"/><text x="10.4533%" y="767.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (48 samples, 0.17%)</title><rect x="10.2033%" y="741" width="0.1694%" height="15" fill="rgb(237,53,32)"/><text x="10.4533%" y="751.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (48 samples, 0.17%)</title><rect x="10.2033%" y="725" width="0.1694%" height="15" fill="rgb(233,25,53)"/><text x="10.4533%" y="735.50"></text></g><g><title>alloc::alloc::dealloc (48 samples, 0.17%)</title><rect x="10.2033%" y="709" width="0.1694%" height="15" fill="rgb(210,40,34)"/><text x="10.4533%" y="719.50"></text></g><g><title>_int_free (48 samples, 0.17%)</title><rect x="10.2033%" y="693" width="0.1694%" height="15" fill="rgb(241,220,44)"/><text x="10.4533%" y="703.50"></text></g><g><title>systrim (48 samples, 0.17%)</title><rect x="10.2033%" y="677" width="0.1694%" height="15" fill="rgb(235,28,35)"/><text x="10.4533%" y="687.50"></text></g><g><title>__GI___default_morecore (48 samples, 0.17%)</title><rect x="10.2033%" y="661" width="0.1694%" height="15" fill="rgb(210,56,17)"/><text x="10.4533%" y="671.50"></text></g><g><title>__GI___sbrk (48 samples, 0.17%)</title><rect x="10.2033%" y="645" width="0.1694%" height="15" fill="rgb(224,130,29)"/><text x="10.4533%" y="655.50"></text></g><g><title>__GI___sbrk (48 samples, 0.17%)</title><rect x="10.2033%" y="629" width="0.1694%" height="15" fill="rgb(235,212,8)"/><text x="10.4533%" y="639.50"></text></g><g><title>__brk (48 samples, 0.17%)</title><rect x="10.2033%" y="613" width="0.1694%" height="15" fill="rgb(223,33,50)"/><text x="10.4533%" y="623.50"></text></g><g><title>[unknown] (48 samples, 0.17%)</title><rect x="10.2033%" y="597" width="0.1694%" height="15" fill="rgb(219,149,13)"/><text x="10.4533%" y="607.50"></text></g><g><title>[unknown] (48 samples, 0.17%)</title><rect x="10.2033%" y="581" width="0.1694%" height="15" fill="rgb(250,156,29)"/><text x="10.4533%" y="591.50"></text></g><g><title>[unknown] (48 samples, 0.17%)</title><rect x="10.2033%" y="565" width="0.1694%" height="15" fill="rgb(216,193,19)"/><text x="10.4533%" y="575.50"></text></g><g><title>[unknown] (48 samples, 0.17%)</title><rect x="10.2033%" y="549" width="0.1694%" height="15" fill="rgb(216,135,14)"/><text x="10.4533%" y="559.50"></text></g><g><title>[unknown] (48 samples, 0.17%)</title><rect x="10.2033%" y="533" width="0.1694%" height="15" fill="rgb(241,47,5)"/><text x="10.4533%" y="543.50"></text></g><g><title>[unknown] (48 samples, 0.17%)</title><rect x="10.2033%" y="517" width="0.1694%" height="15" fill="rgb(233,42,35)"/><text x="10.4533%" y="527.50"></text></g><g><title>[unknown] (48 samples, 0.17%)</title><rect x="10.2033%" y="501" width="0.1694%" height="15" fill="rgb(231,13,6)"/><text x="10.4533%" y="511.50"></text></g><g><title>[unknown] (48 samples, 0.17%)</title><rect x="10.2033%" y="485" width="0.1694%" height="15" fill="rgb(207,181,40)"/><text x="10.4533%" y="495.50"></text></g><g><title>[unknown] (48 samples, 0.17%)</title><rect x="10.2033%" y="469" width="0.1694%" height="15" fill="rgb(254,173,49)"/><text x="10.4533%" y="479.50"></text></g><g><title>[unknown] (37 samples, 0.13%)</title><rect x="10.2421%" y="453" width="0.1306%" height="15" fill="rgb(221,1,38)"/><text x="10.4921%" y="463.50"></text></g><g><title>[unknown] (31 samples, 0.11%)</title><rect x="10.2633%" y="437" width="0.1094%" height="15" fill="rgb(206,124,46)"/><text x="10.5133%" y="447.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (31 samples, 0.11%)</title><rect x="10.4786%" y="693" width="0.1094%" height="15" fill="rgb(249,21,11)"/><text x="10.7286%" y="703.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::drop_elements (31 samples, 0.11%)</title><rect x="10.4786%" y="677" width="0.1094%" height="15" fill="rgb(222,201,40)"/><text x="10.7286%" y="687.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::drop (31 samples, 0.11%)</title><rect x="10.4786%" y="661" width="0.1094%" height="15" fill="rgb(235,61,29)"/><text x="10.7286%" y="671.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::drop_in_place (31 samples, 0.11%)</title><rect x="10.4786%" y="645" width="0.1094%" height="15" fill="rgb(219,207,3)"/><text x="10.7286%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;(([u16: 20],usize),mcts_policy::state::State)&gt; (31 samples, 0.11%)</title><rect x="10.4786%" y="629" width="0.1094%" height="15" fill="rgb(222,56,46)"/><text x="10.7286%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;mcts_policy::state::State&gt; (31 samples, 0.11%)</title><rect x="10.4786%" y="613" width="0.1094%" height="15" fill="rgb(239,76,54)"/><text x="10.7286%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::collections::hash::map::HashMap&lt;([u16: 20],usize),mcts_policy::state::State&gt;&gt; (33 samples, 0.12%)</title><rect x="10.4786%" y="741" width="0.1165%" height="15" fill="rgb(231,124,27)"/><text x="10.7286%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;([u16: 20],usize),mcts_policy::state::State,std::collections::hash::map::RandomState&gt;&gt; (33 samples, 0.12%)</title><rect x="10.4786%" y="725" width="0.1165%" height="15" fill="rgb(249,195,6)"/><text x="10.7286%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;(([u16: 20],usize),mcts_policy::state::State)&gt;&gt; (33 samples, 0.12%)</title><rect x="10.4786%" y="709" width="0.1165%" height="15" fill="rgb(237,174,47)"/><text x="10.7286%" y="719.50"></text></g><g><title>_int_malloc (181 samples, 0.64%)</title><rect x="11.0221%" y="485" width="0.6388%" height="15" fill="rgb(206,201,31)"/><text x="11.2721%" y="495.50"></text></g><g><title>unlink_chunk (31 samples, 0.11%)</title><rect x="11.5515%" y="469" width="0.1094%" height="15" fill="rgb(231,57,52)"/><text x="11.8015%" y="479.50"></text></g><g><title>__GI___libc_malloc (256 samples, 0.90%)</title><rect x="10.8350%" y="501" width="0.9035%" height="15" fill="rgb(248,177,22)"/><text x="11.0850%" y="511.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (268 samples, 0.95%)</title><rect x="10.8174%" y="549" width="0.9459%" height="15" fill="rgb(215,211,37)"/><text x="11.0674%" y="559.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (268 samples, 0.95%)</title><rect x="10.8174%" y="533" width="0.9459%" height="15" fill="rgb(241,128,51)"/><text x="11.0674%" y="543.50"></text></g><g><title>alloc::alloc::alloc (263 samples, 0.93%)</title><rect x="10.8350%" y="517" width="0.9282%" height="15" fill="rgb(227,165,31)"/><text x="11.0850%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (272 samples, 0.96%)</title><rect x="10.8174%" y="597" width="0.9600%" height="15" fill="rgb(228,167,24)"/><text x="11.0674%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (272 samples, 0.96%)</title><rect x="10.8174%" y="581" width="0.9600%" height="15" fill="rgb(228,143,12)"/><text x="11.0674%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (272 samples, 0.96%)</title><rect x="10.8174%" y="565" width="0.9600%" height="15" fill="rgb(249,149,8)"/><text x="11.0674%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (460 samples, 1.62%)</title><rect x="10.7962%" y="661" width="1.6235%" height="15" fill="rgb(243,35,44)"/><text x="11.0462%" y="671.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (454 samples, 1.60%)</title><rect x="10.8174%" y="645" width="1.6023%" height="15" fill="rgb(246,89,9)"/><text x="11.0674%" y="655.50"></text></g><g><title>alloc::slice::hack::to_vec (454 samples, 1.60%)</title><rect x="10.8174%" y="629" width="1.6023%" height="15" fill="rgb(233,213,13)"/><text x="11.0674%" y="639.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (454 samples, 1.60%)</title><rect x="10.8174%" y="613" width="1.6023%" height="15" fill="rgb(233,141,41)"/><text x="11.0674%" y="623.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (182 samples, 0.64%)</title><rect x="11.7774%" y="597" width="0.6423%" height="15" fill="rgb(239,167,4)"/><text x="12.0274%" y="607.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (182 samples, 0.64%)</title><rect x="11.7774%" y="581" width="0.6423%" height="15" fill="rgb(209,217,16)"/><text x="12.0274%" y="591.50"></text></g><g><title>__memmove_avx_unaligned_erms (181 samples, 0.64%)</title><rect x="11.7809%" y="565" width="0.6388%" height="15" fill="rgb(219,88,35)"/><text x="12.0309%" y="575.50"></text></g><g><title>&lt;mcts_policy::state::State as core::clone::Clone&gt;::clone (478 samples, 1.69%)</title><rect x="10.7715%" y="677" width="1.6870%" height="15" fill="rgb(220,193,23)"/><text x="11.0215%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;(([u16: 20],usize),f64,usize)&gt;&gt; (57 samples, 0.20%)</title><rect x="12.5079%" y="677" width="0.2012%" height="15" fill="rgb(230,90,52)"/><text x="12.7579%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;(([u16: 20],usize),f64,usize)&gt;&gt; (57 samples, 0.20%)</title><rect x="12.5079%" y="661" width="0.2012%" height="15" fill="rgb(252,106,19)"/><text x="12.7579%" y="671.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (57 samples, 0.20%)</title><rect x="12.5079%" y="645" width="0.2012%" height="15" fill="rgb(206,74,20)"/><text x="12.7579%" y="655.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (57 samples, 0.20%)</title><rect x="12.5079%" y="629" width="0.2012%" height="15" fill="rgb(230,138,44)"/><text x="12.7579%" y="639.50"></text></g><g><title>alloc::alloc::dealloc (57 samples, 0.20%)</title><rect x="12.5079%" y="613" width="0.2012%" height="15" fill="rgb(235,182,43)"/><text x="12.7579%" y="623.50"></text></g><g><title>_int_free (51 samples, 0.18%)</title><rect x="12.5291%" y="597" width="0.1800%" height="15" fill="rgb(242,16,51)"/><text x="12.7791%" y="607.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (80 samples, 0.28%)</title><rect x="12.7832%" y="597" width="0.2823%" height="15" fill="rgb(248,9,4)"/><text x="13.0332%" y="607.50"></text></g><g><title>alloc::alloc::dealloc (80 samples, 0.28%)</title><rect x="12.7832%" y="581" width="0.2823%" height="15" fill="rgb(210,31,22)"/><text x="13.0332%" y="591.50"></text></g><g><title>_int_free (70 samples, 0.25%)</title><rect x="12.8185%" y="565" width="0.2471%" height="15" fill="rgb(239,54,39)"/><text x="13.0685%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;(([u16: 20],usize),f64,usize)&gt;&gt; (83 samples, 0.29%)</title><rect x="12.7832%" y="645" width="0.2929%" height="15" fill="rgb(230,99,41)"/><text x="13.0332%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;(([u16: 20],usize),f64,usize)&gt;&gt; (83 samples, 0.29%)</title><rect x="12.7832%" y="629" width="0.2929%" height="15" fill="rgb(253,106,12)"/><text x="13.0332%" y="639.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (83 samples, 0.29%)</title><rect x="12.7832%" y="613" width="0.2929%" height="15" fill="rgb(213,46,41)"/><text x="13.0332%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;mcts_policy::state::State&gt;&gt; (103 samples, 0.36%)</title><rect x="12.7762%" y="677" width="0.3635%" height="15" fill="rgb(215,133,35)"/><text x="13.0262%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;mcts_policy::state::State&gt; (101 samples, 0.36%)</title><rect x="12.7832%" y="661" width="0.3565%" height="15" fill="rgb(213,28,5)"/><text x="13.0332%" y="671.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u16&gt;::hash_slice (49 samples, 0.17%)</title><rect x="13.2667%" y="565" width="0.1729%" height="15" fill="rgb(215,77,49)"/><text x="13.5167%" y="575.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (49 samples, 0.17%)</title><rect x="13.2667%" y="549" width="0.1729%" height="15" fill="rgb(248,100,22)"/><text x="13.5167%" y="559.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (49 samples, 0.17%)</title><rect x="13.2667%" y="533" width="0.1729%" height="15" fill="rgb(208,67,9)"/><text x="13.5167%" y="543.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (49 samples, 0.17%)</title><rect x="13.2667%" y="517" width="0.1729%" height="15" fill="rgb(219,133,21)"/><text x="13.5167%" y="527.50"></text></g><g><title>core::array::&lt;impl core::hash::Hash for [T: N]&gt;::hash (67 samples, 0.24%)</title><rect x="13.2667%" y="597" width="0.2365%" height="15" fill="rgb(246,46,29)"/><text x="13.5167%" y="607.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (67 samples, 0.24%)</title><rect x="13.2667%" y="581" width="0.2365%" height="15" fill="rgb(246,185,52)"/><text x="13.5167%" y="591.50"></text></g><g><title>hashbrown::map::make_hash (122 samples, 0.43%)</title><rect x="13.1467%" y="629" width="0.4306%" height="15" fill="rgb(252,136,11)"/><text x="13.3967%" y="639.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for (A,B)&gt;::hash (88 samples, 0.31%)</title><rect x="13.2667%" y="613" width="0.3106%" height="15" fill="rgb(219,138,53)"/><text x="13.5167%" y="623.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (29 samples, 0.10%)</title><rect x="13.6797%" y="597" width="0.1024%" height="15" fill="rgb(211,51,23)"/><text x="13.9297%" y="607.50"></text></g><g><title>core::tuple::&lt;impl core::cmp::PartialEq for (A,B)&gt;::eq (29 samples, 0.10%)</title><rect x="13.6797%" y="581" width="0.1024%" height="15" fill="rgb(247,221,28)"/><text x="13.9297%" y="591.50"></text></g><g><title>core::array::&lt;impl core::cmp::PartialEq&lt;[B: N]&gt; for [A: N]&gt;::eq (29 samples, 0.10%)</title><rect x="13.6797%" y="565" width="0.1024%" height="15" fill="rgb(251,222,45)"/><text x="13.9297%" y="575.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (29 samples, 0.10%)</title><rect x="13.6797%" y="549" width="0.1024%" height="15" fill="rgb(217,162,53)"/><text x="13.9297%" y="559.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (29 samples, 0.10%)</title><rect x="13.6797%" y="533" width="0.1024%" height="15" fill="rgb(229,93,14)"/><text x="13.9297%" y="543.50"></text></g><g><title>__memcmp_avx2_movbe (29 samples, 0.10%)</title><rect x="13.6797%" y="517" width="0.1024%" height="15" fill="rgb(209,67,49)"/><text x="13.9297%" y="527.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::contains_key (188 samples, 0.66%)</title><rect x="13.1467%" y="677" width="0.6635%" height="15" fill="rgb(213,87,29)"/><text x="13.3967%" y="687.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (188 samples, 0.66%)</title><rect x="13.1467%" y="661" width="0.6635%" height="15" fill="rgb(205,151,52)"/><text x="13.3967%" y="671.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (188 samples, 0.66%)</title><rect x="13.1467%" y="645" width="0.6635%" height="15" fill="rgb(253,215,39)"/><text x="13.3967%" y="655.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (66 samples, 0.23%)</title><rect x="13.5773%" y="629" width="0.2329%" height="15" fill="rgb(221,220,41)"/><text x="13.8273%" y="639.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (66 samples, 0.23%)</title><rect x="13.5773%" y="613" width="0.2329%" height="15" fill="rgb(218,133,21)"/><text x="13.8273%" y="623.50"></text></g><g><title>hashbrown::map::make_hash (42 samples, 0.15%)</title><rect x="13.8103%" y="629" width="0.1482%" height="15" fill="rgb(221,193,43)"/><text x="14.0603%" y="639.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (52 samples, 0.18%)</title><rect x="13.9973%" y="597" width="0.1835%" height="15" fill="rgb(240,128,52)"/><text x="14.2473%" y="607.50"></text></g><g><title>core::tuple::&lt;impl core::cmp::PartialEq for (A,B)&gt;::eq (52 samples, 0.18%)</title><rect x="13.9973%" y="581" width="0.1835%" height="15" fill="rgb(253,114,12)"/><text x="14.2473%" y="591.50"></text></g><g><title>core::array::&lt;impl core::cmp::PartialEq&lt;[B: N]&gt; for [A: N]&gt;::eq (52 samples, 0.18%)</title><rect x="13.9973%" y="565" width="0.1835%" height="15" fill="rgb(215,223,47)"/><text x="14.2473%" y="575.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (52 samples, 0.18%)</title><rect x="13.9973%" y="549" width="0.1835%" height="15" fill="rgb(248,225,23)"/><text x="14.2473%" y="559.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (52 samples, 0.18%)</title><rect x="13.9973%" y="533" width="0.1835%" height="15" fill="rgb(250,108,0)"/><text x="14.2473%" y="543.50"></text></g><g><title>__memcmp_avx2_movbe (52 samples, 0.18%)</title><rect x="13.9973%" y="517" width="0.1835%" height="15" fill="rgb(228,208,7)"/><text x="14.2473%" y="527.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (128 samples, 0.45%)</title><rect x="13.8103%" y="677" width="0.4518%" height="15" fill="rgb(244,45,10)"/><text x="14.0603%" y="687.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (128 samples, 0.45%)</title><rect x="13.8103%" y="661" width="0.4518%" height="15" fill="rgb(207,125,25)"/><text x="14.0603%" y="671.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (128 samples, 0.45%)</title><rect x="13.8103%" y="645" width="0.4518%" height="15" fill="rgb(210,195,18)"/><text x="14.0603%" y="655.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (86 samples, 0.30%)</title><rect x="13.9585%" y="629" width="0.3035%" height="15" fill="rgb(249,80,12)"/><text x="14.2085%" y="639.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (86 samples, 0.30%)</title><rect x="13.9585%" y="613" width="0.3035%" height="15" fill="rgb(221,65,9)"/><text x="14.2085%" y="623.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (36 samples, 0.13%)</title><rect x="14.3538%" y="629" width="0.1271%" height="15" fill="rgb(235,49,36)"/><text x="14.6038%" y="639.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (36 samples, 0.13%)</title><rect x="14.3538%" y="613" width="0.1271%" height="15" fill="rgb(225,32,20)"/><text x="14.6038%" y="623.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (36 samples, 0.13%)</title><rect x="14.3538%" y="597" width="0.1271%" height="15" fill="rgb(215,141,46)"/><text x="14.6038%" y="607.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (33 samples, 0.12%)</title><rect x="14.5902%" y="517" width="0.1165%" height="15" fill="rgb(250,160,47)"/><text x="14.8402%" y="527.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u16&gt;::hash_slice (57 samples, 0.20%)</title><rect x="14.5302%" y="581" width="0.2012%" height="15" fill="rgb(216,222,40)"/><text x="14.7802%" y="591.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (55 samples, 0.19%)</title><rect x="14.5373%" y="565" width="0.1941%" height="15" fill="rgb(234,217,39)"/><text x="14.7873%" y="575.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (55 samples, 0.19%)</title><rect x="14.5373%" y="549" width="0.1941%" height="15" fill="rgb(207,178,40)"/><text x="14.7873%" y="559.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (55 samples, 0.19%)</title><rect x="14.5373%" y="533" width="0.1941%" height="15" fill="rgb(221,136,13)"/><text x="14.7873%" y="543.50"></text></g><g><title>core::array::&lt;impl core::hash::Hash for [T: N]&gt;::hash (87 samples, 0.31%)</title><rect x="14.5302%" y="613" width="0.3071%" height="15" fill="rgb(249,199,10)"/><text x="14.7802%" y="623.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (87 samples, 0.31%)</title><rect x="14.5302%" y="597" width="0.3071%" height="15" fill="rgb(249,222,13)"/><text x="14.7802%" y="607.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for usize&gt;::hash (30 samples, 0.11%)</title><rect x="14.7314%" y="581" width="0.1059%" height="15" fill="rgb(244,185,38)"/><text x="14.9814%" y="591.50"></text></g><g><title>core::hash::Hasher::write_usize (30 samples, 0.11%)</title><rect x="14.7314%" y="565" width="0.1059%" height="15" fill="rgb(236,202,9)"/><text x="14.9814%" y="575.50"></text></g><g><title>hashbrown::map::make_insert_hash (157 samples, 0.55%)</title><rect x="14.3538%" y="645" width="0.5541%" height="15" fill="rgb(250,229,37)"/><text x="14.6038%" y="655.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for (A,B)&gt;::hash (108 samples, 0.38%)</title><rect x="14.5267%" y="629" width="0.3812%" height="15" fill="rgb(206,174,23)"/><text x="14.7767%" y="639.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get_mut (46 samples, 0.16%)</title><rect x="14.9079%" y="645" width="0.1623%" height="15" fill="rgb(211,33,43)"/><text x="15.1579%" y="655.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (46 samples, 0.16%)</title><rect x="14.9079%" y="629" width="0.1623%" height="15" fill="rgb(245,58,50)"/><text x="15.1579%" y="639.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u16&gt;::hash_slice (36 samples, 0.13%)</title><rect x="15.1761%" y="501" width="0.1271%" height="15" fill="rgb(244,68,36)"/><text x="15.4261%" y="511.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (36 samples, 0.13%)</title><rect x="15.1761%" y="485" width="0.1271%" height="15" fill="rgb(232,229,15)"/><text x="15.4261%" y="495.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (36 samples, 0.13%)</title><rect x="15.1761%" y="469" width="0.1271%" height="15" fill="rgb(254,30,23)"/><text x="15.4261%" y="479.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (36 samples, 0.13%)</title><rect x="15.1761%" y="453" width="0.1271%" height="15" fill="rgb(235,160,14)"/><text x="15.4261%" y="463.50"></text></g><g><title>core::array::&lt;impl core::hash::Hash for [T: N]&gt;::hash (48 samples, 0.17%)</title><rect x="15.1761%" y="533" width="0.1694%" height="15" fill="rgb(212,155,44)"/><text x="15.4261%" y="543.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (48 samples, 0.17%)</title><rect x="15.1761%" y="517" width="0.1694%" height="15" fill="rgb(226,2,50)"/><text x="15.4261%" y="527.50"></text></g><g><title>hashbrown::map::make_hasher::{{closure}} (80 samples, 0.28%)</title><rect x="15.1091%" y="581" width="0.2823%" height="15" fill="rgb(234,177,6)"/><text x="15.3591%" y="591.50"></text></g><g><title>hashbrown::map::make_hash (80 samples, 0.28%)</title><rect x="15.1091%" y="565" width="0.2823%" height="15" fill="rgb(217,24,9)"/><text x="15.3591%" y="575.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for (A,B)&gt;::hash (61 samples, 0.22%)</title><rect x="15.1761%" y="549" width="0.2153%" height="15" fill="rgb(220,13,46)"/><text x="15.4261%" y="559.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::resize (125 samples, 0.44%)</title><rect x="15.0914%" y="597" width="0.4412%" height="15" fill="rgb(239,221,27)"/><text x="15.3414%" y="607.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (126 samples, 0.44%)</title><rect x="15.0914%" y="629" width="0.4447%" height="15" fill="rgb(222,198,25)"/><text x="15.3414%" y="639.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (126 samples, 0.44%)</title><rect x="15.0914%" y="613" width="0.4447%" height="15" fill="rgb(211,99,13)"/><text x="15.3414%" y="623.50"></text></g><g><title>mcts_policy::game_graph::all_parents_propagate (1,366 samples, 4.82%)</title><rect x="10.7362%" y="693" width="4.8211%" height="15" fill="rgb(232,111,31)"/><text x="10.9862%" y="703.50">mcts_p..</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::insert (367 samples, 1.30%)</title><rect x="14.2620%" y="677" width="1.2953%" height="15" fill="rgb(245,82,37)"/><text x="14.5120%" y="687.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (356 samples, 1.26%)</title><rect x="14.3008%" y="661" width="1.2564%" height="15" fill="rgb(227,149,46)"/><text x="14.5508%" y="671.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (138 samples, 0.49%)</title><rect x="15.0702%" y="645" width="0.4870%" height="15" fill="rgb(218,36,50)"/><text x="15.3202%" y="655.50"></text></g><g><title>mcts_policy::game_graph::backpropagate (1,392 samples, 4.91%)</title><rect x="10.7362%" y="709" width="4.9128%" height="15" fill="rgb(226,80,48)"/><text x="10.9862%" y="719.50">mcts_p..</text></g><g><title>&lt;[T] as rand::seq::SliceRandom&gt;::shuffle (43 samples, 0.15%)</title><rect x="15.7161%" y="693" width="0.1518%" height="15" fill="rgb(238,224,15)"/><text x="15.9661%" y="703.50"></text></g><g><title>malloc_consolidate (48 samples, 0.17%)</title><rect x="16.2420%" y="485" width="0.1694%" height="15" fill="rgb(241,136,10)"/><text x="16.4920%" y="495.50"></text></g><g><title>_int_malloc (130 samples, 0.46%)</title><rect x="15.9667%" y="501" width="0.4588%" height="15" fill="rgb(208,32,45)"/><text x="16.2167%" y="511.50"></text></g><g><title>__GI___libc_malloc (153 samples, 0.54%)</title><rect x="15.9032%" y="517" width="0.5400%" height="15" fill="rgb(207,135,9)"/><text x="16.1532%" y="527.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (155 samples, 0.55%)</title><rect x="15.9032%" y="565" width="0.5470%" height="15" fill="rgb(206,86,44)"/><text x="16.1532%" y="575.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (155 samples, 0.55%)</title><rect x="15.9032%" y="549" width="0.5470%" height="15" fill="rgb(245,177,15)"/><text x="16.1532%" y="559.50"></text></g><g><title>alloc::alloc::alloc (155 samples, 0.55%)</title><rect x="15.9032%" y="533" width="0.5470%" height="15" fill="rgb(206,64,50)"/><text x="16.1532%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (159 samples, 0.56%)</title><rect x="15.9032%" y="613" width="0.5612%" height="15" fill="rgb(234,36,40)"/><text x="16.1532%" y="623.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (159 samples, 0.56%)</title><rect x="15.9032%" y="597" width="0.5612%" height="15" fill="rgb(213,64,8)"/><text x="16.1532%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (159 samples, 0.56%)</title><rect x="15.9032%" y="581" width="0.5612%" height="15" fill="rgb(210,75,36)"/><text x="16.1532%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (207 samples, 0.73%)</title><rect x="15.8890%" y="677" width="0.7306%" height="15" fill="rgb(229,88,21)"/><text x="16.1390%" y="687.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (204 samples, 0.72%)</title><rect x="15.8996%" y="661" width="0.7200%" height="15" fill="rgb(252,204,47)"/><text x="16.1496%" y="671.50"></text></g><g><title>alloc::slice::hack::to_vec (204 samples, 0.72%)</title><rect x="15.8996%" y="645" width="0.7200%" height="15" fill="rgb(208,77,27)"/><text x="16.1496%" y="655.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (204 samples, 0.72%)</title><rect x="15.8996%" y="629" width="0.7200%" height="15" fill="rgb(221,76,26)"/><text x="16.1496%" y="639.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (44 samples, 0.16%)</title><rect x="16.4643%" y="613" width="0.1553%" height="15" fill="rgb(225,139,18)"/><text x="16.7143%" y="623.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (44 samples, 0.16%)</title><rect x="16.4643%" y="597" width="0.1553%" height="15" fill="rgb(230,137,11)"/><text x="16.7143%" y="607.50"></text></g><g><title>__memmove_avx_unaligned_erms (43 samples, 0.15%)</title><rect x="16.4678%" y="581" width="0.1518%" height="15" fill="rgb(212,28,1)"/><text x="16.7178%" y="591.50"></text></g><g><title>&lt;mcts_policy::state::State as core::clone::Clone&gt;::clone (211 samples, 0.74%)</title><rect x="15.8784%" y="693" width="0.7447%" height="15" fill="rgb(248,164,17)"/><text x="16.1284%" y="703.50"></text></g><g><title>alloc::alloc::exchange_malloc (43 samples, 0.15%)</title><rect x="16.6231%" y="693" width="0.1518%" height="15" fill="rgb(222,171,42)"/><text x="16.8731%" y="703.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (43 samples, 0.15%)</title><rect x="16.6231%" y="677" width="0.1518%" height="15" fill="rgb(243,84,45)"/><text x="16.8731%" y="687.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (43 samples, 0.15%)</title><rect x="16.6231%" y="661" width="0.1518%" height="15" fill="rgb(252,49,23)"/><text x="16.8731%" y="671.50"></text></g><g><title>alloc::alloc::alloc (43 samples, 0.15%)</title><rect x="16.6231%" y="645" width="0.1518%" height="15" fill="rgb(215,19,7)"/><text x="16.8731%" y="655.50"></text></g><g><title>__GI___libc_malloc (43 samples, 0.15%)</title><rect x="16.6231%" y="629" width="0.1518%" height="15" fill="rgb(238,81,41)"/><text x="16.8731%" y="639.50"></text></g><g><title>_int_malloc (50 samples, 0.18%)</title><rect x="16.9231%" y="341" width="0.1765%" height="15" fill="rgb(210,199,37)"/><text x="17.1731%" y="351.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (78 samples, 0.28%)</title><rect x="16.8314%" y="405" width="0.2753%" height="15" fill="rgb(244,192,49)"/><text x="17.0814%" y="415.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (78 samples, 0.28%)</title><rect x="16.8314%" y="389" width="0.2753%" height="15" fill="rgb(226,211,11)"/><text x="17.0814%" y="399.50"></text></g><g><title>alloc::alloc::alloc (76 samples, 0.27%)</title><rect x="16.8384%" y="373" width="0.2682%" height="15" fill="rgb(236,162,54)"/><text x="17.0884%" y="383.50"></text></g><g><title>__GI___libc_malloc (76 samples, 0.27%)</title><rect x="16.8384%" y="357" width="0.2682%" height="15" fill="rgb(220,229,9)"/><text x="17.0884%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (80 samples, 0.28%)</title><rect x="16.8314%" y="453" width="0.2823%" height="15" fill="rgb(250,87,22)"/><text x="17.0814%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (80 samples, 0.28%)</title><rect x="16.8314%" y="437" width="0.2823%" height="15" fill="rgb(239,43,17)"/><text x="17.0814%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (80 samples, 0.28%)</title><rect x="16.8314%" y="421" width="0.2823%" height="15" fill="rgb(231,177,25)"/><text x="17.0814%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (192 samples, 0.68%)</title><rect x="16.8278%" y="517" width="0.6776%" height="15" fill="rgb(219,179,1)"/><text x="17.0778%" y="527.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (192 samples, 0.68%)</title><rect x="16.8278%" y="501" width="0.6776%" height="15" fill="rgb(238,219,53)"/><text x="17.0778%" y="511.50"></text></g><g><title>alloc::slice::hack::to_vec (192 samples, 0.68%)</title><rect x="16.8278%" y="485" width="0.6776%" height="15" fill="rgb(232,167,36)"/><text x="17.0778%" y="495.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (192 samples, 0.68%)</title><rect x="16.8278%" y="469" width="0.6776%" height="15" fill="rgb(244,19,51)"/><text x="17.0778%" y="479.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (111 samples, 0.39%)</title><rect x="17.1137%" y="453" width="0.3918%" height="15" fill="rgb(224,6,22)"/><text x="17.3637%" y="463.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (111 samples, 0.39%)</title><rect x="17.1137%" y="437" width="0.3918%" height="15" fill="rgb(224,145,5)"/><text x="17.3637%" y="447.50"></text></g><g><title>__memmove_avx_unaligned_erms (109 samples, 0.38%)</title><rect x="17.1208%" y="421" width="0.3847%" height="15" fill="rgb(234,130,49)"/><text x="17.3708%" y="431.50"></text></g><g><title>&lt;mcts_policy::state::State as core::clone::Clone&gt;::clone (224 samples, 0.79%)</title><rect x="16.8208%" y="533" width="0.7906%" height="15" fill="rgb(254,6,2)"/><text x="17.0708%" y="543.50"></text></g><g><title>core::clone::Clone::clone (30 samples, 0.11%)</title><rect x="17.5055%" y="517" width="0.1059%" height="15" fill="rgb(208,96,46)"/><text x="17.7555%" y="527.50"></text></g><g><title>hashbrown::map::make_hash (36 samples, 0.13%)</title><rect x="17.6255%" y="485" width="0.1271%" height="15" fill="rgb(239,3,39)"/><text x="17.8755%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (296 samples, 1.04%)</title><rect x="16.7820%" y="629" width="1.0447%" height="15" fill="rgb(233,210,1)"/><text x="17.0320%" y="639.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (296 samples, 1.04%)</title><rect x="16.7820%" y="613" width="1.0447%" height="15" fill="rgb(244,137,37)"/><text x="17.0320%" y="623.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (295 samples, 1.04%)</title><rect x="16.7855%" y="597" width="1.0412%" height="15" fill="rgb(240,136,2)"/><text x="17.0355%" y="607.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (295 samples, 1.04%)</title><rect x="16.7855%" y="581" width="1.0412%" height="15" fill="rgb(239,18,37)"/><text x="17.0355%" y="591.50"></text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (293 samples, 1.03%)</title><rect x="16.7925%" y="565" width="1.0341%" height="15" fill="rgb(218,185,22)"/><text x="17.0425%" y="575.50"></text></g><g><title>mcts_policy::game_graph::find_best_child::{{closure}} (285 samples, 1.01%)</title><rect x="16.8208%" y="549" width="1.0059%" height="15" fill="rgb(225,218,4)"/><text x="17.0708%" y="559.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (58 samples, 0.20%)</title><rect x="17.6219%" y="533" width="0.2047%" height="15" fill="rgb(230,182,32)"/><text x="17.8719%" y="543.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (58 samples, 0.20%)</title><rect x="17.6219%" y="517" width="0.2047%" height="15" fill="rgb(242,56,43)"/><text x="17.8719%" y="527.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (58 samples, 0.20%)</title><rect x="17.6219%" y="501" width="0.2047%" height="15" fill="rgb(233,99,24)"/><text x="17.8719%" y="511.50"></text></g><g><title>__GI___libc_malloc (29 samples, 0.10%)</title><rect x="17.8266%" y="517" width="0.1024%" height="15" fill="rgb(234,209,42)"/><text x="18.0766%" y="527.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (327 samples, 1.15%)</title><rect x="16.7784%" y="693" width="1.1541%" height="15" fill="rgb(227,7,12)"/><text x="17.0284%" y="703.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (327 samples, 1.15%)</title><rect x="16.7784%" y="677" width="1.1541%" height="15" fill="rgb(245,203,43)"/><text x="17.0284%" y="687.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (327 samples, 1.15%)</title><rect x="16.7784%" y="661" width="1.1541%" height="15" fill="rgb(238,205,33)"/><text x="17.0284%" y="671.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (326 samples, 1.15%)</title><rect x="16.7820%" y="645" width="1.1506%" height="15" fill="rgb(231,56,7)"/><text x="17.0320%" y="655.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (30 samples, 0.11%)</title><rect x="17.8266%" y="629" width="0.1059%" height="15" fill="rgb(244,186,29)"/><text x="18.0766%" y="639.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (30 samples, 0.11%)</title><rect x="17.8266%" y="613" width="0.1059%" height="15" fill="rgb(234,111,31)"/><text x="18.0766%" y="623.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (30 samples, 0.11%)</title><rect x="17.8266%" y="597" width="0.1059%" height="15" fill="rgb(241,149,10)"/><text x="18.0766%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (30 samples, 0.11%)</title><rect x="17.8266%" y="581" width="0.1059%" height="15" fill="rgb(249,206,44)"/><text x="18.0766%" y="591.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (30 samples, 0.11%)</title><rect x="17.8266%" y="565" width="0.1059%" height="15" fill="rgb(251,153,30)"/><text x="18.0766%" y="575.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (30 samples, 0.11%)</title><rect x="17.8266%" y="549" width="0.1059%" height="15" fill="rgb(239,152,38)"/><text x="18.0766%" y="559.50"></text></g><g><title>alloc::alloc::alloc (30 samples, 0.11%)</title><rect x="17.8266%" y="533" width="0.1059%" height="15" fill="rgb(249,139,47)"/><text x="18.0766%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;mcts_policy::state::State&gt; (41 samples, 0.14%)</title><rect x="18.1549%" y="693" width="0.1447%" height="15" fill="rgb(244,64,35)"/><text x="18.4049%" y="703.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (296 samples, 1.04%)</title><rect x="18.3949%" y="597" width="1.0447%" height="15" fill="rgb(216,46,15)"/><text x="18.6449%" y="607.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (296 samples, 1.04%)</title><rect x="18.3949%" y="581" width="1.0447%" height="15" fill="rgb(250,74,19)"/><text x="18.6449%" y="591.50"></text></g><g><title>__memcmp_avx2_movbe (295 samples, 1.04%)</title><rect x="18.3984%" y="565" width="1.0412%" height="15" fill="rgb(249,42,33)"/><text x="18.6484%" y="575.50"></text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::next (330 samples, 1.16%)</title><rect x="18.3631%" y="661" width="1.1647%" height="15" fill="rgb(242,149,17)"/><text x="18.6131%" y="671.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::find (330 samples, 1.16%)</title><rect x="18.3631%" y="645" width="1.1647%" height="15" fill="rgb(244,29,21)"/><text x="18.6131%" y="655.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (321 samples, 1.13%)</title><rect x="18.3949%" y="629" width="1.1329%" height="15" fill="rgb(220,130,37)"/><text x="18.6449%" y="639.50"></text></g><g><title>mcts_policy::game_graph::calculate_qu::{{closure}} (321 samples, 1.13%)</title><rect x="18.3949%" y="613" width="1.1329%" height="15" fill="rgb(211,67,2)"/><text x="18.6449%" y="623.50"></text></g><g><title>mcts_policy::game_graph::is_better (353 samples, 1.25%)</title><rect x="18.2996%" y="693" width="1.2459%" height="15" fill="rgb(235,68,52)"/><text x="18.5496%" y="703.50"></text></g><g><title>mcts_policy::game_graph::calculate_qu (353 samples, 1.25%)</title><rect x="18.2996%" y="677" width="1.2459%" height="15" fill="rgb(246,142,3)"/><text x="18.5496%" y="687.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (34 samples, 0.12%)</title><rect x="19.5807%" y="677" width="0.1200%" height="15" fill="rgb(241,25,7)"/><text x="19.8307%" y="687.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (31 samples, 0.11%)</title><rect x="19.5913%" y="661" width="0.1094%" height="15" fill="rgb(242,119,39)"/><text x="19.8413%" y="671.50"></text></g><g><title>alloc::slice::hack::to_vec (31 samples, 0.11%)</title><rect x="19.5913%" y="645" width="0.1094%" height="15" fill="rgb(241,98,45)"/><text x="19.8413%" y="655.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (31 samples, 0.11%)</title><rect x="19.5913%" y="629" width="0.1094%" height="15" fill="rgb(254,28,30)"/><text x="19.8413%" y="639.50"></text></g><g><title>__GI___libc_malloc (43 samples, 0.15%)</title><rect x="19.7501%" y="501" width="0.1518%" height="15" fill="rgb(241,142,54)"/><text x="20.0001%" y="511.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (46 samples, 0.16%)</title><rect x="19.7466%" y="549" width="0.1623%" height="15" fill="rgb(222,85,15)"/><text x="19.9966%" y="559.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (46 samples, 0.16%)</title><rect x="19.7466%" y="533" width="0.1623%" height="15" fill="rgb(210,85,47)"/><text x="19.9966%" y="543.50"></text></g><g><title>alloc::alloc::alloc (46 samples, 0.16%)</title><rect x="19.7466%" y="517" width="0.1623%" height="15" fill="rgb(224,206,25)"/><text x="19.9966%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (52 samples, 0.18%)</title><rect x="19.7360%" y="597" width="0.1835%" height="15" fill="rgb(243,201,19)"/><text x="19.9860%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (51 samples, 0.18%)</title><rect x="19.7395%" y="581" width="0.1800%" height="15" fill="rgb(236,59,4)"/><text x="19.9895%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (51 samples, 0.18%)</title><rect x="19.7395%" y="565" width="0.1800%" height="15" fill="rgb(254,179,45)"/><text x="19.9895%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (65 samples, 0.23%)</title><rect x="19.7325%" y="661" width="0.2294%" height="15" fill="rgb(226,14,10)"/><text x="19.9825%" y="671.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (64 samples, 0.23%)</title><rect x="19.7360%" y="645" width="0.2259%" height="15" fill="rgb(244,27,41)"/><text x="19.9860%" y="655.50"></text></g><g><title>alloc::slice::hack::to_vec (64 samples, 0.23%)</title><rect x="19.7360%" y="629" width="0.2259%" height="15" fill="rgb(235,35,32)"/><text x="19.9860%" y="639.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (64 samples, 0.23%)</title><rect x="19.7360%" y="613" width="0.2259%" height="15" fill="rgb(218,68,31)"/><text x="19.9860%" y="623.50"></text></g><g><title>&lt;mcts_policy::state::State as core::clone::Clone&gt;::clone (74 samples, 0.26%)</title><rect x="19.7042%" y="677" width="0.2612%" height="15" fill="rgb(207,120,37)"/><text x="19.9542%" y="687.50"></text></g><g><title>_int_free (70 samples, 0.25%)</title><rect x="20.0042%" y="677" width="0.2471%" height="15" fill="rgb(227,98,0)"/><text x="20.2542%" y="687.50"></text></g><g><title>_int_realloc (59 samples, 0.21%)</title><rect x="20.3325%" y="517" width="0.2082%" height="15" fill="rgb(207,7,3)"/><text x="20.5825%" y="527.50"></text></g><g><title>_int_malloc (38 samples, 0.13%)</title><rect x="20.4066%" y="501" width="0.1341%" height="15" fill="rgb(206,98,19)"/><text x="20.6566%" y="511.50"></text></g><g><title>__GI___libc_realloc (80 samples, 0.28%)</title><rect x="20.2654%" y="533" width="0.2823%" height="15" fill="rgb(217,5,26)"/><text x="20.5154%" y="543.50"></text></g><g><title>alloc::raw_vec::finish_grow (82 samples, 0.29%)</title><rect x="20.2619%" y="597" width="0.2894%" height="15" fill="rgb(235,190,38)"/><text x="20.5119%" y="607.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (81 samples, 0.29%)</title><rect x="20.2654%" y="581" width="0.2859%" height="15" fill="rgb(247,86,24)"/><text x="20.5154%" y="591.50"></text></g><g><title>alloc::alloc::Global::grow_impl (81 samples, 0.29%)</title><rect x="20.2654%" y="565" width="0.2859%" height="15" fill="rgb(205,101,16)"/><text x="20.5154%" y="575.50"></text></g><g><title>alloc::alloc::realloc (81 samples, 0.29%)</title><rect x="20.2654%" y="549" width="0.2859%" height="15" fill="rgb(246,168,33)"/><text x="20.5154%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (86 samples, 0.30%)</title><rect x="20.2513%" y="661" width="0.3035%" height="15" fill="rgb(231,114,1)"/><text x="20.5013%" y="671.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (86 samples, 0.30%)</title><rect x="20.2513%" y="645" width="0.3035%" height="15" fill="rgb(207,184,53)"/><text x="20.5013%" y="655.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (86 samples, 0.30%)</title><rect x="20.2513%" y="629" width="0.3035%" height="15" fill="rgb(224,95,51)"/><text x="20.5013%" y="639.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (86 samples, 0.30%)</title><rect x="20.2513%" y="613" width="0.3035%" height="15" fill="rgb(212,188,45)"/><text x="20.5013%" y="623.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (87 samples, 0.31%)</title><rect x="20.2513%" y="677" width="0.3071%" height="15" fill="rgb(223,154,38)"/><text x="20.5013%" y="687.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u16&gt;::hash_slice (37 samples, 0.13%)</title><rect x="20.8054%" y="437" width="0.1306%" height="15" fill="rgb(251,22,52)"/><text x="21.0554%" y="447.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (37 samples, 0.13%)</title><rect x="20.8054%" y="421" width="0.1306%" height="15" fill="rgb(229,209,22)"/><text x="21.0554%" y="431.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (37 samples, 0.13%)</title><rect x="20.8054%" y="405" width="0.1306%" height="15" fill="rgb(234,138,34)"/><text x="21.0554%" y="415.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (37 samples, 0.13%)</title><rect x="20.8054%" y="389" width="0.1306%" height="15" fill="rgb(212,95,11)"/><text x="21.0554%" y="399.50"></text></g><g><title>core::array::&lt;impl core::hash::Hash for [T: N]&gt;::hash (46 samples, 0.16%)</title><rect x="20.8054%" y="469" width="0.1623%" height="15" fill="rgb(240,179,47)"/><text x="21.0554%" y="479.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (46 samples, 0.16%)</title><rect x="20.8054%" y="453" width="0.1623%" height="15" fill="rgb(240,163,11)"/><text x="21.0554%" y="463.50"></text></g><g><title>hashbrown::map::make_insert_hash (88 samples, 0.31%)</title><rect x="20.7136%" y="517" width="0.3106%" height="15" fill="rgb(236,37,12)"/><text x="20.9636%" y="527.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (63 samples, 0.22%)</title><rect x="20.8019%" y="501" width="0.2223%" height="15" fill="rgb(232,164,16)"/><text x="21.0519%" y="511.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for (A,B)&gt;::hash (63 samples, 0.22%)</title><rect x="20.8019%" y="485" width="0.2223%" height="15" fill="rgb(244,205,15)"/><text x="21.0519%" y="495.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry (144 samples, 0.51%)</title><rect x="20.6113%" y="549" width="0.5082%" height="15" fill="rgb(223,117,47)"/><text x="20.8613%" y="559.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (144 samples, 0.51%)</title><rect x="20.6113%" y="533" width="0.5082%" height="15" fill="rgb(244,107,35)"/><text x="20.8613%" y="543.50"></text></g><g><title>&lt;itertools::unique_impl::Unique&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (166 samples, 0.59%)</title><rect x="20.5936%" y="565" width="0.5859%" height="15" fill="rgb(205,140,8)"/><text x="20.8436%" y="575.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (31 samples, 0.11%)</title><rect x="21.5042%" y="437" width="0.1094%" height="15" fill="rgb(228,84,46)"/><text x="21.7542%" y="447.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (110 samples, 0.39%)</title><rect x="21.2889%" y="501" width="0.3882%" height="15" fill="rgb(254,188,9)"/><text x="21.5389%" y="511.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (110 samples, 0.39%)</title><rect x="21.2889%" y="485" width="0.3882%" height="15" fill="rgb(206,112,54)"/><text x="21.5389%" y="495.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (110 samples, 0.39%)</title><rect x="21.2889%" y="469" width="0.3882%" height="15" fill="rgb(216,84,49)"/><text x="21.5389%" y="479.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (72 samples, 0.25%)</title><rect x="21.4230%" y="453" width="0.2541%" height="15" fill="rgb(214,194,35)"/><text x="21.6730%" y="463.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (47 samples, 0.17%)</title><rect x="21.9665%" y="373" width="0.1659%" height="15" fill="rgb(249,28,3)"/><text x="22.2165%" y="383.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (116 samples, 0.41%)</title><rect x="21.8501%" y="389" width="0.4094%" height="15" fill="rgb(222,56,52)"/><text x="22.1001%" y="399.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (36 samples, 0.13%)</title><rect x="22.1324%" y="373" width="0.1271%" height="15" fill="rgb(245,217,50)"/><text x="22.3824%" y="383.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u16&gt;::hash_slice (173 samples, 0.61%)</title><rect x="21.7265%" y="453" width="0.6106%" height="15" fill="rgb(213,201,24)"/><text x="21.9765%" y="463.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (173 samples, 0.61%)</title><rect x="21.7265%" y="437" width="0.6106%" height="15" fill="rgb(248,116,28)"/><text x="21.9765%" y="447.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (173 samples, 0.61%)</title><rect x="21.7265%" y="421" width="0.6106%" height="15" fill="rgb(219,72,43)"/><text x="21.9765%" y="431.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (173 samples, 0.61%)</title><rect x="21.7265%" y="405" width="0.6106%" height="15" fill="rgb(209,138,14)"/><text x="21.9765%" y="415.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (30 samples, 0.11%)</title><rect x="22.4077%" y="373" width="0.1059%" height="15" fill="rgb(222,18,33)"/><text x="22.6577%" y="383.50"></text></g><g><title>core::array::&lt;impl core::hash::Hash for [T: N]&gt;::hash (246 samples, 0.87%)</title><rect x="21.7265%" y="485" width="0.8682%" height="15" fill="rgb(213,199,7)"/><text x="21.9765%" y="495.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (246 samples, 0.87%)</title><rect x="21.7265%" y="469" width="0.8682%" height="15" fill="rgb(250,110,10)"/><text x="21.9765%" y="479.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for usize&gt;::hash (73 samples, 0.26%)</title><rect x="22.3371%" y="453" width="0.2576%" height="15" fill="rgb(248,123,6)"/><text x="22.5871%" y="463.50"></text></g><g><title>core::hash::Hasher::write_usize (73 samples, 0.26%)</title><rect x="22.3371%" y="437" width="0.2576%" height="15" fill="rgb(206,91,31)"/><text x="22.5871%" y="447.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (71 samples, 0.25%)</title><rect x="22.3442%" y="421" width="0.2506%" height="15" fill="rgb(211,154,13)"/><text x="22.5942%" y="431.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (71 samples, 0.25%)</title><rect x="22.3442%" y="405" width="0.2506%" height="15" fill="rgb(225,148,7)"/><text x="22.5942%" y="415.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (71 samples, 0.25%)</title><rect x="22.3442%" y="389" width="0.2506%" height="15" fill="rgb(220,160,43)"/><text x="22.5942%" y="399.50"></text></g><g><title>hashbrown::map::make_insert_hash (421 samples, 1.49%)</title><rect x="21.2889%" y="517" width="1.4858%" height="15" fill="rgb(213,52,39)"/><text x="21.5389%" y="527.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for (A,B)&gt;::hash (297 samples, 1.05%)</title><rect x="21.7265%" y="501" width="1.0482%" height="15" fill="rgb(243,137,7)"/><text x="21.9765%" y="511.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for usize&gt;::hash (51 samples, 0.18%)</title><rect x="22.5948%" y="485" width="0.1800%" height="15" fill="rgb(230,79,13)"/><text x="22.8448%" y="495.50"></text></g><g><title>core::hash::Hasher::write_usize (51 samples, 0.18%)</title><rect x="22.5948%" y="469" width="0.1800%" height="15" fill="rgb(247,105,23)"/><text x="22.8448%" y="479.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (48 samples, 0.17%)</title><rect x="22.6054%" y="453" width="0.1694%" height="15" fill="rgb(223,179,41)"/><text x="22.8554%" y="463.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (48 samples, 0.17%)</title><rect x="22.6054%" y="437" width="0.1694%" height="15" fill="rgb(218,9,34)"/><text x="22.8554%" y="447.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (48 samples, 0.17%)</title><rect x="22.6054%" y="421" width="0.1694%" height="15" fill="rgb(222,106,8)"/><text x="22.8554%" y="431.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get_mut (86 samples, 0.30%)</title><rect x="22.7748%" y="517" width="0.3035%" height="15" fill="rgb(211,220,0)"/><text x="23.0248%" y="527.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (86 samples, 0.30%)</title><rect x="22.7748%" y="501" width="0.3035%" height="15" fill="rgb(229,52,16)"/><text x="23.0248%" y="511.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::iter_hash (43 samples, 0.15%)</title><rect x="22.9265%" y="485" width="0.1518%" height="15" fill="rgb(212,155,18)"/><text x="23.1765%" y="495.50"></text></g><g><title>hashbrown::raw::RawIterHash&lt;T,A&gt;::new (43 samples, 0.15%)</title><rect x="22.9265%" y="469" width="0.1518%" height="15" fill="rgb(242,21,14)"/><text x="23.1765%" y="479.50"></text></g><g><title>hashbrown::raw::RawIterHashInner&lt;A&gt;::new (43 samples, 0.15%)</title><rect x="22.9265%" y="453" width="0.1518%" height="15" fill="rgb(222,19,48)"/><text x="23.1765%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::scopeguard::ScopeGuard&lt;hashbrown::raw::RawTableInner&lt;alloc::alloc::Global&gt;,hashbrown::raw::RawTableInner&lt;alloc::alloc::Global&gt;::prepare_resize::{{closure}}&gt;&gt; (33 samples, 0.12%)</title><rect x="23.2724%" y="453" width="0.1165%" height="15" fill="rgb(232,45,27)"/><text x="23.5224%" y="463.50"></text></g><g><title>&lt;hashbrown::scopeguard::ScopeGuard&lt;T,F&gt; as core::ops::drop::Drop&gt;::drop (33 samples, 0.12%)</title><rect x="23.2724%" y="437" width="0.1165%" height="15" fill="rgb(249,103,42)"/><text x="23.5224%" y="447.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::prepare_resize::{{closure}} (33 samples, 0.12%)</title><rect x="23.2724%" y="421" width="0.1165%" height="15" fill="rgb(246,81,33)"/><text x="23.5224%" y="431.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::free_buckets (33 samples, 0.12%)</title><rect x="23.2724%" y="405" width="0.1165%" height="15" fill="rgb(252,33,42)"/><text x="23.5224%" y="415.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (33 samples, 0.12%)</title><rect x="23.2724%" y="389" width="0.1165%" height="15" fill="rgb(209,212,41)"/><text x="23.5224%" y="399.50"></text></g><g><title>alloc::alloc::dealloc (32 samples, 0.11%)</title><rect x="23.2759%" y="373" width="0.1129%" height="15" fill="rgb(207,154,6)"/><text x="23.5259%" y="383.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (37 samples, 0.13%)</title><rect x="23.5265%" y="357" width="0.1306%" height="15" fill="rgb(223,64,47)"/><text x="23.7765%" y="367.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (90 samples, 0.32%)</title><rect x="23.4100%" y="421" width="0.3176%" height="15" fill="rgb(211,161,38)"/><text x="23.6600%" y="431.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (90 samples, 0.32%)</title><rect x="23.4100%" y="405" width="0.3176%" height="15" fill="rgb(219,138,40)"/><text x="23.6600%" y="415.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (90 samples, 0.32%)</title><rect x="23.4100%" y="389" width="0.3176%" height="15" fill="rgb(241,228,46)"/><text x="23.6600%" y="399.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (61 samples, 0.22%)</title><rect x="23.5124%" y="373" width="0.2153%" height="15" fill="rgb(223,209,38)"/><text x="23.7624%" y="383.50"></text></g><g><title>&lt;std::collections::hash::map::RandomState as core::hash::BuildHasher&gt;::build_hasher (30 samples, 0.11%)</title><rect x="23.7277%" y="421" width="0.1059%" height="15" fill="rgb(236,164,45)"/><text x="23.9777%" y="431.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (53 samples, 0.19%)</title><rect x="24.1300%" y="293" width="0.1871%" height="15" fill="rgb(231,15,5)"/><text x="24.3800%" y="303.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (108 samples, 0.38%)</title><rect x="24.0418%" y="309" width="0.3812%" height="15" fill="rgb(252,35,15)"/><text x="24.2918%" y="319.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (30 samples, 0.11%)</title><rect x="24.3171%" y="293" width="0.1059%" height="15" fill="rgb(248,181,18)"/><text x="24.5671%" y="303.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u16&gt;::hash_slice (198 samples, 0.70%)</title><rect x="23.8406%" y="373" width="0.6988%" height="15" fill="rgb(233,39,42)"/><text x="24.0906%" y="383.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (198 samples, 0.70%)</title><rect x="23.8406%" y="357" width="0.6988%" height="15" fill="rgb(238,110,33)"/><text x="24.0906%" y="367.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (198 samples, 0.70%)</title><rect x="23.8406%" y="341" width="0.6988%" height="15" fill="rgb(233,195,10)"/><text x="24.0906%" y="351.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (198 samples, 0.70%)</title><rect x="23.8406%" y="325" width="0.6988%" height="15" fill="rgb(254,105,3)"/><text x="24.0906%" y="335.50"></text></g><g><title>core::array::&lt;impl core::hash::Hash for [T: N]&gt;::hash (274 samples, 0.97%)</title><rect x="23.8406%" y="405" width="0.9670%" height="15" fill="rgb(221,225,9)"/><text x="24.0906%" y="415.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (274 samples, 0.97%)</title><rect x="23.8406%" y="389" width="0.9670%" height="15" fill="rgb(224,227,45)"/><text x="24.0906%" y="399.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for usize&gt;::hash (76 samples, 0.27%)</title><rect x="24.5394%" y="373" width="0.2682%" height="15" fill="rgb(229,198,43)"/><text x="24.7894%" y="383.50"></text></g><g><title>core::hash::Hasher::write_usize (76 samples, 0.27%)</title><rect x="24.5394%" y="357" width="0.2682%" height="15" fill="rgb(206,209,35)"/><text x="24.7894%" y="367.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (67 samples, 0.24%)</title><rect x="24.5712%" y="341" width="0.2365%" height="15" fill="rgb(245,195,53)"/><text x="24.8212%" y="351.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (67 samples, 0.24%)</title><rect x="24.5712%" y="325" width="0.2365%" height="15" fill="rgb(240,92,26)"/><text x="24.8212%" y="335.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (67 samples, 0.24%)</title><rect x="24.5712%" y="309" width="0.2365%" height="15" fill="rgb(207,40,23)"/><text x="24.8212%" y="319.50"></text></g><g><title>hashbrown::map::make_hasher::{{closure}} (482 samples, 1.70%)</title><rect x="23.3889%" y="453" width="1.7011%" height="15" fill="rgb(223,111,35)"/><text x="23.6389%" y="463.50"></text></g><g><title>hashbrown::map::make_hash (482 samples, 1.70%)</title><rect x="23.3889%" y="437" width="1.7011%" height="15" fill="rgb(229,147,28)"/><text x="23.6389%" y="447.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for (A,B)&gt;::hash (356 samples, 1.26%)</title><rect x="23.8336%" y="421" width="1.2564%" height="15" fill="rgb(211,29,28)"/><text x="24.0836%" y="431.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for usize&gt;::hash (80 samples, 0.28%)</title><rect x="24.8077%" y="405" width="0.2823%" height="15" fill="rgb(228,72,33)"/><text x="25.0577%" y="415.50"></text></g><g><title>core::hash::Hasher::write_usize (80 samples, 0.28%)</title><rect x="24.8077%" y="389" width="0.2823%" height="15" fill="rgb(205,214,31)"/><text x="25.0577%" y="399.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (76 samples, 0.27%)</title><rect x="24.8218%" y="373" width="0.2682%" height="15" fill="rgb(224,111,15)"/><text x="25.0718%" y="383.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (76 samples, 0.27%)</title><rect x="24.8218%" y="357" width="0.2682%" height="15" fill="rgb(253,21,26)"/><text x="25.0718%" y="367.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (76 samples, 0.27%)</title><rect x="24.8218%" y="341" width="0.2682%" height="15" fill="rgb(245,139,43)"/><text x="25.0718%" y="351.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_insert_slot (81 samples, 0.29%)</title><rect x="25.2135%" y="437" width="0.2859%" height="15" fill="rgb(252,170,7)"/><text x="25.4635%" y="447.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::prepare_insert_slot (102 samples, 0.36%)</title><rect x="25.2135%" y="453" width="0.3600%" height="15" fill="rgb(231,118,14)"/><text x="25.4635%" y="463.50"></text></g><g><title>__GI___libc_malloc (56 samples, 0.20%)</title><rect x="25.6053%" y="341" width="0.1976%" height="15" fill="rgb(238,83,0)"/><text x="25.8553%" y="351.50"></text></g><g><title>hashbrown::raw::alloc::inner::do_alloc (60 samples, 0.21%)</title><rect x="25.6053%" y="405" width="0.2118%" height="15" fill="rgb(221,39,39)"/><text x="25.8553%" y="415.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (60 samples, 0.21%)</title><rect x="25.6053%" y="389" width="0.2118%" height="15" fill="rgb(222,119,46)"/><text x="25.8553%" y="399.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (60 samples, 0.21%)</title><rect x="25.6053%" y="373" width="0.2118%" height="15" fill="rgb(222,165,49)"/><text x="25.8553%" y="383.50"></text></g><g><title>alloc::alloc::alloc (60 samples, 0.21%)</title><rect x="25.6053%" y="357" width="0.2118%" height="15" fill="rgb(219,113,52)"/><text x="25.8553%" y="367.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::new_uninitialized (65 samples, 0.23%)</title><rect x="25.5947%" y="421" width="0.2294%" height="15" fill="rgb(214,7,15)"/><text x="25.8447%" y="431.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::resize (754 samples, 2.66%)</title><rect x="23.1912%" y="469" width="2.6611%" height="15" fill="rgb(235,32,4)"/><text x="23.4412%" y="479.50">ha..</text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::prepare_resize (79 samples, 0.28%)</title><rect x="25.5735%" y="453" width="0.2788%" height="15" fill="rgb(238,90,54)"/><text x="25.8235%" y="463.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::fallible_with_capacity (78 samples, 0.28%)</title><rect x="25.5770%" y="437" width="0.2753%" height="15" fill="rgb(213,208,19)"/><text x="25.8270%" y="447.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (758 samples, 2.68%)</title><rect x="23.1806%" y="501" width="2.6752%" height="15" fill="rgb(233,156,4)"/><text x="23.4306%" y="511.50">ha..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (758 samples, 2.68%)</title><rect x="23.1806%" y="485" width="2.6752%" height="15" fill="rgb(207,194,5)"/><text x="23.4306%" y="495.50">ha..</text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_insert_slot (63 samples, 0.22%)</title><rect x="25.8559%" y="501" width="0.2223%" height="15" fill="rgb(206,111,30)"/><text x="26.1059%" y="511.50"></text></g><g><title>&lt;itertools::unique_impl::UniqueBy&lt;I,V,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,426 samples, 5.03%)</title><rect x="21.1795%" y="565" width="5.0328%" height="15" fill="rgb(243,70,54)"/><text x="21.4295%" y="575.50">&lt;itert..</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::insert (1,418 samples, 5.00%)</title><rect x="21.2077%" y="549" width="5.0046%" height="15" fill="rgb(242,28,8)"/><text x="21.4577%" y="559.50">std::c..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1,405 samples, 4.96%)</title><rect x="21.2536%" y="533" width="4.9587%" height="15" fill="rgb(219,106,18)"/><text x="21.5036%" y="543.50">hashbr..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (888 samples, 3.13%)</title><rect x="23.0783%" y="517" width="3.1340%" height="15" fill="rgb(244,222,10)"/><text x="23.3283%" y="527.50">has..</text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::record_item_insert_at (38 samples, 0.13%)</title><rect x="26.0782%" y="501" width="0.1341%" height="15" fill="rgb(236,179,52)"/><text x="26.3282%" y="511.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,602 samples, 5.65%)</title><rect x="20.5936%" y="581" width="5.6540%" height="15" fill="rgb(213,23,39)"/><text x="20.8436%" y="591.50">&lt;core::..</text></g><g><title>__memmove_avx_unaligned_erms (29 samples, 0.10%)</title><rect x="26.6570%" y="421" width="0.1024%" height="15" fill="rgb(238,48,10)"/><text x="26.9070%" y="431.50"></text></g><g><title>_int_free (49 samples, 0.17%)</title><rect x="26.7594%" y="421" width="0.1729%" height="15" fill="rgb(251,196,23)"/><text x="27.0094%" y="431.50"></text></g><g><title>_int_malloc (156 samples, 0.55%)</title><rect x="26.9323%" y="421" width="0.5506%" height="15" fill="rgb(250,152,24)"/><text x="27.1823%" y="431.50"></text></g><g><title>_int_realloc (248 samples, 0.88%)</title><rect x="26.6147%" y="437" width="0.8753%" height="15" fill="rgb(209,150,17)"/><text x="26.8647%" y="447.50"></text></g><g><title>__GI___libc_realloc (339 samples, 1.20%)</title><rect x="26.3006%" y="453" width="1.1964%" height="15" fill="rgb(234,202,34)"/><text x="26.5506%" y="463.50"></text></g><g><title>alloc::raw_vec::finish_grow (347 samples, 1.22%)</title><rect x="26.2935%" y="517" width="1.2247%" height="15" fill="rgb(253,148,53)"/><text x="26.5435%" y="527.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (346 samples, 1.22%)</title><rect x="26.2970%" y="501" width="1.2211%" height="15" fill="rgb(218,129,16)"/><text x="26.5470%" y="511.50"></text></g><g><title>alloc::alloc::Global::grow_impl (346 samples, 1.22%)</title><rect x="26.2970%" y="485" width="1.2211%" height="15" fill="rgb(216,85,19)"/><text x="26.5470%" y="495.50"></text></g><g><title>alloc::alloc::realloc (346 samples, 1.22%)</title><rect x="26.2970%" y="469" width="1.2211%" height="15" fill="rgb(235,228,7)"/><text x="26.5470%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (362 samples, 1.28%)</title><rect x="26.2547%" y="581" width="1.2776%" height="15" fill="rgb(245,175,0)"/><text x="26.5047%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (362 samples, 1.28%)</title><rect x="26.2547%" y="565" width="1.2776%" height="15" fill="rgb(208,168,36)"/><text x="26.5047%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (361 samples, 1.27%)</title><rect x="26.2582%" y="549" width="1.2741%" height="15" fill="rgb(246,171,24)"/><text x="26.5082%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (361 samples, 1.27%)</title><rect x="26.2582%" y="533" width="1.2741%" height="15" fill="rgb(215,142,24)"/><text x="26.5082%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (2,018 samples, 7.12%)</title><rect x="20.5866%" y="613" width="7.1222%" height="15" fill="rgb(250,187,7)"/><text x="20.8366%" y="623.50">&lt;alloc::ve..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_desugared (2,016 samples, 7.12%)</title><rect x="20.5936%" y="597" width="7.1151%" height="15" fill="rgb(228,66,33)"/><text x="20.8436%" y="607.50">alloc::vec..</text></g><g><title>hashbrown::map::make_insert_hash (45 samples, 0.16%)</title><rect x="27.8076%" y="549" width="0.1588%" height="15" fill="rgb(234,215,21)"/><text x="28.0576%" y="559.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (31 samples, 0.11%)</title><rect x="27.8570%" y="533" width="0.1094%" height="15" fill="rgb(222,191,20)"/><text x="28.1070%" y="543.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for (A,B)&gt;::hash (31 samples, 0.11%)</title><rect x="27.8570%" y="517" width="0.1094%" height="15" fill="rgb(245,79,54)"/><text x="28.1070%" y="527.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (77 samples, 0.27%)</title><rect x="27.7123%" y="565" width="0.2718%" height="15" fill="rgb(240,10,37)"/><text x="27.9623%" y="575.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry (79 samples, 0.28%)</title><rect x="27.7123%" y="581" width="0.2788%" height="15" fill="rgb(214,192,32)"/><text x="27.9623%" y="591.50"></text></g><g><title>&lt;itertools::unique_impl::Unique&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (89 samples, 0.31%)</title><rect x="27.7088%" y="597" width="0.3141%" height="15" fill="rgb(209,36,54)"/><text x="27.9588%" y="607.50"></text></g><g><title>hashbrown::map::make_insert_hash (32 samples, 0.11%)</title><rect x="28.0582%" y="549" width="0.1129%" height="15" fill="rgb(220,10,11)"/><text x="28.3082%" y="559.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for (A,B)&gt;::hash (29 samples, 0.10%)</title><rect x="28.0688%" y="533" width="0.1024%" height="15" fill="rgb(221,106,17)"/><text x="28.3188%" y="543.50"></text></g><g><title>&lt;itertools::unique_impl::UniqueBy&lt;I,V,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (83 samples, 0.29%)</title><rect x="28.0229%" y="597" width="0.2929%" height="15" fill="rgb(251,142,44)"/><text x="28.2729%" y="607.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::insert (81 samples, 0.29%)</title><rect x="28.0299%" y="581" width="0.2859%" height="15" fill="rgb(238,13,15)"/><text x="28.2799%" y="591.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (77 samples, 0.27%)</title><rect x="28.0440%" y="565" width="0.2718%" height="15" fill="rgb(208,107,27)"/><text x="28.2940%" y="575.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (37 samples, 0.13%)</title><rect x="28.1852%" y="549" width="0.1306%" height="15" fill="rgb(205,136,37)"/><text x="28.4352%" y="559.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (174 samples, 0.61%)</title><rect x="27.7088%" y="613" width="0.6141%" height="15" fill="rgb(250,205,27)"/><text x="27.9588%" y="623.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (2,225 samples, 7.85%)</title><rect x="20.5583%" y="677" width="7.8528%" height="15" fill="rgb(210,80,43)"/><text x="20.8083%" y="687.50">core::iter:..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (2,225 samples, 7.85%)</title><rect x="20.5583%" y="661" width="7.8528%" height="15" fill="rgb(247,160,36)"/><text x="20.8083%" y="671.50">&lt;alloc::vec..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2,224 samples, 7.85%)</title><rect x="20.5619%" y="645" width="7.8492%" height="15" fill="rgb(234,13,49)"/><text x="20.8119%" y="655.50">&lt;alloc::vec..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (2,217 samples, 7.82%)</title><rect x="20.5866%" y="629" width="7.8245%" height="15" fill="rgb(234,122,0)"/><text x="20.8366%" y="639.50">&lt;alloc::vec..</text></g><g><title>hashbrown::map::make_insert_hash (38 samples, 0.13%)</title><rect x="28.6299%" y="661" width="0.1341%" height="15" fill="rgb(207,146,38)"/><text x="28.8799%" y="671.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for (A,B)&gt;::hash (30 samples, 0.11%)</title><rect x="28.6581%" y="645" width="0.1059%" height="15" fill="rgb(207,177,25)"/><text x="28.9081%" y="655.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (81 samples, 0.29%)</title><rect x="28.6229%" y="677" width="0.2859%" height="15" fill="rgb(211,178,42)"/><text x="28.8729%" y="687.50"></text></g><g><title>hashbrown::map::make_hash (40 samples, 0.14%)</title><rect x="28.9370%" y="629" width="0.1412%" height="15" fill="rgb(230,69,54)"/><text x="29.1870%" y="639.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::contains_key (56 samples, 0.20%)</title><rect x="28.9370%" y="677" width="0.1976%" height="15" fill="rgb(214,135,41)"/><text x="29.1870%" y="687.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (56 samples, 0.20%)</title><rect x="28.9370%" y="661" width="0.1976%" height="15" fill="rgb(237,67,25)"/><text x="29.1870%" y="671.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (56 samples, 0.20%)</title><rect x="28.9370%" y="645" width="0.1976%" height="15" fill="rgb(222,189,50)"/><text x="29.1870%" y="655.50"></text></g><g><title>hashbrown::map::make_hash (33 samples, 0.12%)</title><rect x="29.1346%" y="629" width="0.1165%" height="15" fill="rgb(245,148,34)"/><text x="29.3846%" y="639.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (45 samples, 0.16%)</title><rect x="29.1346%" y="677" width="0.1588%" height="15" fill="rgb(222,29,6)"/><text x="29.3846%" y="687.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (45 samples, 0.16%)</title><rect x="29.1346%" y="661" width="0.1588%" height="15" fill="rgb(221,189,43)"/><text x="29.3846%" y="671.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (45 samples, 0.16%)</title><rect x="29.1346%" y="645" width="0.1588%" height="15" fill="rgb(207,36,27)"/><text x="29.3846%" y="655.50"></text></g><g><title>mcts_policy::game_graph::reconcile_node (2,771 samples, 9.78%)</title><rect x="19.5454%" y="693" width="9.7798%" height="15" fill="rgb(217,90,24)"/><text x="19.7954%" y="703.50">mcts_policy::g..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (29 samples, 0.10%)</title><rect x="29.4699%" y="677" width="0.1024%" height="15" fill="rgb(224,66,35)"/><text x="29.7199%" y="687.50"></text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (279 samples, 0.98%)</title><rect x="29.5970%" y="549" width="0.9847%" height="15" fill="rgb(221,13,50)"/><text x="29.8470%" y="559.50"></text></g><g><title>mcts_policy::game_rules::possible_moves::{{closure}} (260 samples, 0.92%)</title><rect x="29.6640%" y="533" width="0.9176%" height="15" fill="rgb(236,68,49)"/><text x="29.9140%" y="543.50"></text></g><g><title>std::f64::&lt;impl f64&gt;::exp (211 samples, 0.74%)</title><rect x="29.8369%" y="517" width="0.7447%" height="15" fill="rgb(229,146,28)"/><text x="30.0869%" y="527.50"></text></g><g><title>__GI___exp (197 samples, 0.70%)</title><rect x="29.8864%" y="501" width="0.6953%" height="15" fill="rgb(225,31,38)"/><text x="30.1364%" y="511.50"></text></g><g><title>__ieee754_exp_fma (115 samples, 0.41%)</title><rect x="30.1758%" y="485" width="0.4059%" height="15" fill="rgb(250,208,3)"/><text x="30.4258%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (284 samples, 1.00%)</title><rect x="29.5828%" y="613" width="1.0023%" height="15" fill="rgb(246,54,23)"/><text x="29.8328%" y="623.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (284 samples, 1.00%)</title><rect x="29.5828%" y="597" width="1.0023%" height="15" fill="rgb(243,76,11)"/><text x="29.8328%" y="607.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (284 samples, 1.00%)</title><rect x="29.5828%" y="581" width="1.0023%" height="15" fill="rgb(245,21,50)"/><text x="29.8328%" y="591.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (284 samples, 1.00%)</title><rect x="29.5828%" y="565" width="1.0023%" height="15" fill="rgb(228,9,43)"/><text x="29.8328%" y="575.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (287 samples, 1.01%)</title><rect x="29.5828%" y="677" width="1.0129%" height="15" fill="rgb(208,100,47)"/><text x="29.8328%" y="687.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (287 samples, 1.01%)</title><rect x="29.5828%" y="661" width="1.0129%" height="15" fill="rgb(232,26,8)"/><text x="29.8328%" y="671.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (287 samples, 1.01%)</title><rect x="29.5828%" y="645" width="1.0129%" height="15" fill="rgb(216,166,38)"/><text x="29.8328%" y="655.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (287 samples, 1.01%)</title><rect x="29.5828%" y="629" width="1.0129%" height="15" fill="rgb(251,202,51)"/><text x="29.8328%" y="639.50"></text></g><g><title>&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (37 samples, 0.13%)</title><rect x="31.5734%" y="501" width="0.1306%" height="15" fill="rgb(254,216,34)"/><text x="31.8234%" y="511.50"></text></g><g><title>&lt;hashbrown::raw::RawIterRange&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (33 samples, 0.12%)</title><rect x="31.5875%" y="485" width="0.1165%" height="15" fill="rgb(251,32,27)"/><text x="31.8375%" y="495.50"></text></g><g><title>&lt;std::collections::hash::map::Keys&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (51 samples, 0.18%)</title><rect x="31.5593%" y="549" width="0.1800%" height="15" fill="rgb(208,127,28)"/><text x="31.8093%" y="559.50"></text></g><g><title>&lt;std::collections::hash::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (51 samples, 0.18%)</title><rect x="31.5593%" y="533" width="0.1800%" height="15" fill="rgb(224,137,22)"/><text x="31.8093%" y="543.50"></text></g><g><title>&lt;hashbrown::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (47 samples, 0.17%)</title><rect x="31.5734%" y="517" width="0.1659%" height="15" fill="rgb(254,70,32)"/><text x="31.8234%" y="527.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (83 samples, 0.29%)</title><rect x="31.5593%" y="565" width="0.2929%" height="15" fill="rgb(229,75,37)"/><text x="31.8093%" y="575.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (32 samples, 0.11%)</title><rect x="31.7393%" y="549" width="0.1129%" height="15" fill="rgb(252,64,23)"/><text x="31.9893%" y="559.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (32 samples, 0.11%)</title><rect x="31.7393%" y="533" width="0.1129%" height="15" fill="rgb(232,162,48)"/><text x="31.9893%" y="543.50"></text></g><g><title>mcts_policy::game_rules::legal_moves::{{closure}} (32 samples, 0.11%)</title><rect x="31.7393%" y="517" width="0.1129%" height="15" fill="rgb(246,160,12)"/><text x="31.9893%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_desugared (125 samples, 0.44%)</title><rect x="31.5416%" y="581" width="0.4412%" height="15" fill="rgb(247,166,0)"/><text x="31.7916%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (134 samples, 0.47%)</title><rect x="31.5416%" y="597" width="0.4729%" height="15" fill="rgb(249,219,21)"/><text x="31.7916%" y="607.50"></text></g><g><title>_int_malloc (100 samples, 0.35%)</title><rect x="32.1345%" y="469" width="0.3529%" height="15" fill="rgb(205,209,3)"/><text x="32.3845%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (145 samples, 0.51%)</title><rect x="32.0675%" y="597" width="0.5118%" height="15" fill="rgb(243,44,1)"/><text x="32.3175%" y="607.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (145 samples, 0.51%)</title><rect x="32.0675%" y="581" width="0.5118%" height="15" fill="rgb(206,159,16)"/><text x="32.3175%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (145 samples, 0.51%)</title><rect x="32.0675%" y="565" width="0.5118%" height="15" fill="rgb(244,77,30)"/><text x="32.3175%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (145 samples, 0.51%)</title><rect x="32.0675%" y="549" width="0.5118%" height="15" fill="rgb(218,69,12)"/><text x="32.3175%" y="559.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (145 samples, 0.51%)</title><rect x="32.0675%" y="533" width="0.5118%" height="15" fill="rgb(212,87,7)"/><text x="32.3175%" y="543.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (145 samples, 0.51%)</title><rect x="32.0675%" y="517" width="0.5118%" height="15" fill="rgb(245,114,25)"/><text x="32.3175%" y="527.50"></text></g><g><title>alloc::alloc::alloc (145 samples, 0.51%)</title><rect x="32.0675%" y="501" width="0.5118%" height="15" fill="rgb(210,61,42)"/><text x="32.3175%" y="511.50"></text></g><g><title>__GI___libc_malloc (145 samples, 0.51%)</title><rect x="32.0675%" y="485" width="0.5118%" height="15" fill="rgb(211,52,33)"/><text x="32.3175%" y="495.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (305 samples, 1.08%)</title><rect x="31.5134%" y="661" width="1.0764%" height="15" fill="rgb(234,58,33)"/><text x="31.7634%" y="671.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (305 samples, 1.08%)</title><rect x="31.5134%" y="645" width="1.0764%" height="15" fill="rgb(220,115,36)"/><text x="31.7634%" y="655.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (303 samples, 1.07%)</title><rect x="31.5204%" y="629" width="1.0694%" height="15" fill="rgb(243,153,54)"/><text x="31.7704%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (302 samples, 1.07%)</title><rect x="31.5240%" y="613" width="1.0659%" height="15" fill="rgb(251,47,18)"/><text x="31.7740%" y="623.50"></text></g><g><title>core::option::Option&lt;T&gt;::unwrap (86 samples, 0.30%)</title><rect x="32.5969%" y="661" width="0.3035%" height="15" fill="rgb(242,102,42)"/><text x="32.8469%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;mcts_policy::game_rules::Move&gt;&gt; (42 samples, 0.15%)</title><rect x="32.9004%" y="661" width="0.1482%" height="15" fill="rgb(234,31,38)"/><text x="33.1504%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;mcts_policy::game_rules::Move&gt;&gt; (42 samples, 0.15%)</title><rect x="32.9004%" y="645" width="0.1482%" height="15" fill="rgb(221,117,51)"/><text x="33.1504%" y="655.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (42 samples, 0.15%)</title><rect x="32.9004%" y="629" width="0.1482%" height="15" fill="rgb(212,20,18)"/><text x="33.1504%" y="639.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (41 samples, 0.14%)</title><rect x="32.9039%" y="613" width="0.1447%" height="15" fill="rgb(245,133,36)"/><text x="33.1539%" y="623.50"></text></g><g><title>alloc::alloc::dealloc (41 samples, 0.14%)</title><rect x="32.9039%" y="597" width="0.1447%" height="15" fill="rgb(212,6,19)"/><text x="33.1539%" y="607.50"></text></g><g><title>_int_free (32 samples, 0.11%)</title><rect x="32.9357%" y="581" width="0.1129%" height="15" fill="rgb(218,1,36)"/><text x="33.1857%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::collections::hash::map::HashMap&lt;mcts_policy::game_rules::Move,bool&gt;&gt; (35 samples, 0.12%)</title><rect x="33.0628%" y="661" width="0.1235%" height="15" fill="rgb(246,84,54)"/><text x="33.3128%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;mcts_policy::game_rules::Move,bool,std::collections::hash::map::RandomState&gt;&gt; (35 samples, 0.12%)</title><rect x="33.0628%" y="645" width="0.1235%" height="15" fill="rgb(242,110,6)"/><text x="33.3128%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;(mcts_policy::game_rules::Move,bool)&gt;&gt; (35 samples, 0.12%)</title><rect x="33.0628%" y="629" width="0.1235%" height="15" fill="rgb(214,47,5)"/><text x="33.3128%" y="639.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (35 samples, 0.12%)</title><rect x="33.0628%" y="613" width="0.1235%" height="15" fill="rgb(218,159,25)"/><text x="33.3128%" y="623.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::free_buckets (34 samples, 0.12%)</title><rect x="33.0663%" y="597" width="0.1200%" height="15" fill="rgb(215,211,28)"/><text x="33.3163%" y="607.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::free_buckets (34 samples, 0.12%)</title><rect x="33.0663%" y="581" width="0.1200%" height="15" fill="rgb(238,59,32)"/><text x="33.3163%" y="591.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (34 samples, 0.12%)</title><rect x="33.0663%" y="565" width="0.1200%" height="15" fill="rgb(226,82,3)"/><text x="33.3163%" y="575.50"></text></g><g><title>alloc::alloc::dealloc (34 samples, 0.12%)</title><rect x="33.0663%" y="549" width="0.1200%" height="15" fill="rgb(240,164,32)"/><text x="33.3163%" y="559.50"></text></g><g><title>_int_free (32 samples, 0.11%)</title><rect x="33.0733%" y="533" width="0.1129%" height="15" fill="rgb(232,46,7)"/><text x="33.3233%" y="543.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (36 samples, 0.13%)</title><rect x="33.3027%" y="581" width="0.1271%" height="15" fill="rgb(229,129,53)"/><text x="33.5527%" y="591.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (36 samples, 0.13%)</title><rect x="33.3027%" y="565" width="0.1271%" height="15" fill="rgb(234,188,29)"/><text x="33.5527%" y="575.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (36 samples, 0.13%)</title><rect x="33.3027%" y="549" width="0.1271%" height="15" fill="rgb(246,141,4)"/><text x="33.5527%" y="559.50"></text></g><g><title>core::array::&lt;impl core::hash::Hash for [T: N]&gt;::hash (42 samples, 0.15%)</title><rect x="33.4474%" y="565" width="0.1482%" height="15" fill="rgb(229,23,39)"/><text x="33.6974%" y="575.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (42 samples, 0.15%)</title><rect x="33.4474%" y="549" width="0.1482%" height="15" fill="rgb(206,12,3)"/><text x="33.6974%" y="559.50"></text></g><g><title>hashbrown::map::make_hash (110 samples, 0.39%)</title><rect x="33.2992%" y="597" width="0.3882%" height="15" fill="rgb(252,226,20)"/><text x="33.5492%" y="607.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for (A,B)&gt;::hash (68 samples, 0.24%)</title><rect x="33.4474%" y="581" width="0.2400%" height="15" fill="rgb(216,123,35)"/><text x="33.6974%" y="591.50"></text></g><g><title>&lt;&amp;T as core::borrow::Borrow&lt;T&gt;&gt;::borrow (38 samples, 0.13%)</title><rect x="33.7404%" y="549" width="0.1341%" height="15" fill="rgb(212,68,40)"/><text x="33.9904%" y="559.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (81 samples, 0.29%)</title><rect x="33.7404%" y="565" width="0.2859%" height="15" fill="rgb(254,125,32)"/><text x="33.9904%" y="575.50"></text></g><g><title>core::tuple::&lt;impl core::cmp::PartialEq for (A,B)&gt;::eq (43 samples, 0.15%)</title><rect x="33.8745%" y="549" width="0.1518%" height="15" fill="rgb(253,97,22)"/><text x="34.1245%" y="559.50"></text></g><g><title>core::array::&lt;impl core::cmp::PartialEq&lt;[B: N]&gt; for [A: N]&gt;::eq (43 samples, 0.15%)</title><rect x="33.8745%" y="533" width="0.1518%" height="15" fill="rgb(241,101,14)"/><text x="34.1245%" y="543.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (43 samples, 0.15%)</title><rect x="33.8745%" y="517" width="0.1518%" height="15" fill="rgb(238,103,29)"/><text x="34.1245%" y="527.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (43 samples, 0.15%)</title><rect x="33.8745%" y="501" width="0.1518%" height="15" fill="rgb(233,195,47)"/><text x="34.1245%" y="511.50"></text></g><g><title>mcts_policy::game_rules::Move::index (255 samples, 0.90%)</title><rect x="33.1898%" y="661" width="0.9000%" height="15" fill="rgb(246,218,30)"/><text x="33.4398%" y="671.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (225 samples, 0.79%)</title><rect x="33.2957%" y="645" width="0.7941%" height="15" fill="rgb(219,145,47)"/><text x="33.5457%" y="655.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (225 samples, 0.79%)</title><rect x="33.2957%" y="629" width="0.7941%" height="15" fill="rgb(243,12,26)"/><text x="33.5457%" y="639.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (224 samples, 0.79%)</title><rect x="33.2992%" y="613" width="0.7906%" height="15" fill="rgb(214,87,16)"/><text x="33.5492%" y="623.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (114 samples, 0.40%)</title><rect x="33.6874%" y="597" width="0.4023%" height="15" fill="rgb(208,99,42)"/><text x="33.9374%" y="607.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (114 samples, 0.40%)</title><rect x="33.6874%" y="581" width="0.4023%" height="15" fill="rgb(253,99,2)"/><text x="33.9374%" y="591.50"></text></g><g><title>mcts_policy::game_rules::Move::new_well (33 samples, 0.12%)</title><rect x="34.0898%" y="661" width="0.1165%" height="15" fill="rgb(220,168,23)"/><text x="34.3398%" y="671.50"></text></g><g><title>core::option::Option&lt;T&gt;::is_none (102 samples, 0.36%)</title><rect x="36.9203%" y="645" width="0.3600%" height="15" fill="rgb(242,38,24)"/><text x="37.1703%" y="655.50"></text></g><g><title>core::option::Option&lt;T&gt;::is_some (102 samples, 0.36%)</title><rect x="36.9203%" y="629" width="0.3600%" height="15" fill="rgb(225,182,9)"/><text x="37.1703%" y="639.50"></text></g><g><title>mcts_policy::game_rules::Move::one_move (897 samples, 3.17%)</title><rect x="34.2063%" y="661" width="3.1658%" height="15" fill="rgb(243,178,37)"/><text x="34.4563%" y="671.50">mct..</text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (345 samples, 1.22%)</title><rect x="43.1672%" y="485" width="1.2176%" height="15" fill="rgb(232,139,19)"/><text x="43.4172%" y="495.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (723 samples, 2.55%)</title><rect x="42.5319%" y="501" width="2.5517%" height="15" fill="rgb(225,201,24)"/><text x="42.7819%" y="511.50">&lt;c..</text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (198 samples, 0.70%)</title><rect x="44.3848%" y="485" width="0.6988%" height="15" fill="rgb(221,47,46)"/><text x="44.6348%" y="495.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for usize&gt;::hash (2,568 samples, 9.06%)</title><rect x="37.9120%" y="581" width="9.0633%" height="15" fill="rgb(249,23,13)"/><text x="38.1620%" y="591.50">core::hash::i..</text></g><g><title>core::hash::Hasher::write_usize (2,357 samples, 8.32%)</title><rect x="38.6567%" y="565" width="8.3186%" height="15" fill="rgb(219,9,5)"/><text x="38.9067%" y="575.50">core::hash::..</text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (2,201 samples, 7.77%)</title><rect x="39.2073%" y="549" width="7.7681%" height="15" fill="rgb(254,171,16)"/><text x="39.4573%" y="559.50">&lt;std::colle..</text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (2,201 samples, 7.77%)</title><rect x="39.2073%" y="533" width="7.7681%" height="15" fill="rgb(230,171,20)"/><text x="39.4573%" y="543.50">&lt;core::hash..</text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (2,201 samples, 7.77%)</title><rect x="39.2073%" y="517" width="7.7681%" height="15" fill="rgb(210,71,41)"/><text x="39.4573%" y="527.50">&lt;core::hash..</text></g><g><title>core::hash::sip::u8to64_le (535 samples, 1.89%)</title><rect x="45.0872%" y="501" width="1.8882%" height="15" fill="rgb(206,173,20)"/><text x="45.3372%" y="511.50">c..</text></g><g><title>&lt;mcts_policy::game_rules::Move as core::hash::Hash&gt;::hash (2,623 samples, 9.26%)</title><rect x="37.7215%" y="597" width="9.2574%" height="15" fill="rgb(233,88,34)"/><text x="37.9715%" y="607.50">&lt;mcts_policy:..</text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (97 samples, 0.34%)</title><rect x="47.5754%" y="533" width="0.3423%" height="15" fill="rgb(223,209,46)"/><text x="47.8254%" y="543.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (186 samples, 0.66%)</title><rect x="47.4201%" y="549" width="0.6565%" height="15" fill="rgb(250,43,18)"/><text x="47.6701%" y="559.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (45 samples, 0.16%)</title><rect x="47.9177%" y="533" width="0.1588%" height="15" fill="rgb(208,13,10)"/><text x="48.1677%" y="543.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (292 samples, 1.03%)</title><rect x="48.2847%" y="533" width="1.0306%" height="15" fill="rgb(212,200,36)"/><text x="48.5347%" y="543.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (785 samples, 2.77%)</title><rect x="46.9789%" y="597" width="2.7705%" height="15" fill="rgb(225,90,30)"/><text x="47.2289%" y="607.50">&lt;s..</text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (785 samples, 2.77%)</title><rect x="46.9789%" y="581" width="2.7705%" height="15" fill="rgb(236,182,39)"/><text x="47.2289%" y="591.50">&lt;c..</text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (785 samples, 2.77%)</title><rect x="46.9789%" y="565" width="2.7705%" height="15" fill="rgb(212,144,35)"/><text x="47.2289%" y="575.50">&lt;c..</text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (474 samples, 1.67%)</title><rect x="48.0765%" y="549" width="1.6729%" height="15" fill="rgb(228,63,44)"/><text x="48.3265%" y="559.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (123 samples, 0.43%)</title><rect x="49.3153%" y="533" width="0.4341%" height="15" fill="rgb(228,109,6)"/><text x="49.5653%" y="543.50"></text></g><g><title>hashbrown::map::make_hash (3,688 samples, 13.02%)</title><rect x="37.6826%" y="613" width="13.0162%" height="15" fill="rgb(238,117,24)"/><text x="37.9326%" y="623.50">hashbrown::map::make..</text></g><g><title>&lt;std::collections::hash::map::RandomState as core::hash::BuildHasher&gt;::build_hasher (269 samples, 0.95%)</title><rect x="49.7494%" y="597" width="0.9494%" height="15" fill="rgb(242,26,26)"/><text x="49.9994%" y="607.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (113 samples, 0.40%)</title><rect x="50.3000%" y="581" width="0.3988%" height="15" fill="rgb(221,92,48)"/><text x="50.5500%" y="591.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (93 samples, 0.33%)</title><rect x="50.3706%" y="565" width="0.3282%" height="15" fill="rgb(209,209,32)"/><text x="50.6206%" y="575.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (93 samples, 0.33%)</title><rect x="50.3706%" y="549" width="0.3282%" height="15" fill="rgb(221,70,22)"/><text x="50.6206%" y="559.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (219 samples, 0.77%)</title><rect x="51.9200%" y="533" width="0.7729%" height="15" fill="rgb(248,145,5)"/><text x="52.1700%" y="543.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (287 samples, 1.01%)</title><rect x="51.8670%" y="549" width="1.0129%" height="15" fill="rgb(226,116,26)"/><text x="52.1170%" y="559.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::remove_lowest_bit (53 samples, 0.19%)</title><rect x="52.6929%" y="533" width="0.1871%" height="15" fill="rgb(244,5,17)"/><text x="52.9429%" y="543.50"></text></g><g><title>hashbrown::raw::ProbeSeq::move_next (47 samples, 0.17%)</title><rect x="52.8799%" y="549" width="0.1659%" height="15" fill="rgb(252,159,33)"/><text x="53.1299%" y="559.50"></text></g><g><title>&lt;hashbrown::raw::RawIterHashInner&lt;A&gt; as core::iter::traits::iterator::Iterator&gt;::next (391 samples, 1.38%)</title><rect x="51.7647%" y="565" width="1.3800%" height="15" fill="rgb(206,71,0)"/><text x="52.0147%" y="575.50"></text></g><g><title>&lt;hashbrown::raw::RawIterHash&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (420 samples, 1.48%)</title><rect x="51.7647%" y="581" width="1.4823%" height="15" fill="rgb(233,118,54)"/><text x="52.0147%" y="591.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::bucket (29 samples, 0.10%)</title><rect x="53.1446%" y="565" width="0.1024%" height="15" fill="rgb(234,83,48)"/><text x="53.3946%" y="575.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::from_base_index (29 samples, 0.10%)</title><rect x="53.1446%" y="549" width="0.1024%" height="15" fill="rgb(228,3,54)"/><text x="53.3946%" y="559.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (29 samples, 0.10%)</title><rect x="53.1446%" y="533" width="0.1024%" height="15" fill="rgb(226,155,13)"/><text x="53.3946%" y="543.50"></text></g><g><title>core::num::&lt;impl isize&gt;::wrapping_neg (29 samples, 0.10%)</title><rect x="53.1446%" y="517" width="0.1024%" height="15" fill="rgb(241,28,37)"/><text x="53.3946%" y="527.50"></text></g><g><title>core::num::&lt;impl isize&gt;::overflowing_neg (29 samples, 0.10%)</title><rect x="53.1446%" y="501" width="0.1024%" height="15" fill="rgb(233,93,10)"/><text x="53.3946%" y="511.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (92 samples, 0.32%)</title><rect x="53.2470%" y="581" width="0.3247%" height="15" fill="rgb(225,113,19)"/><text x="53.4970%" y="591.50"></text></g><g><title>&lt;mcts_policy::game_rules::Move as core::cmp::PartialEq&gt;::eq (92 samples, 0.32%)</title><rect x="53.2470%" y="565" width="0.3247%" height="15" fill="rgb(241,2,18)"/><text x="53.4970%" y="575.50"></text></g><g><title>hashbrown::raw::h2 (33 samples, 0.12%)</title><rect x="53.6493%" y="533" width="0.1165%" height="15" fill="rgb(228,207,21)"/><text x="53.8993%" y="543.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (189 samples, 0.67%)</title><rect x="53.7658%" y="533" width="0.6670%" height="15" fill="rgb(213,211,35)"/><text x="54.0158%" y="543.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (189 samples, 0.67%)</title><rect x="53.7658%" y="517" width="0.6670%" height="15" fill="rgb(209,83,10)"/><text x="54.0158%" y="527.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (189 samples, 0.67%)</title><rect x="53.7658%" y="501" width="0.6670%" height="15" fill="rgb(209,164,1)"/><text x="54.0158%" y="511.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::contains_key (4,857 samples, 17.14%)</title><rect x="37.4215%" y="661" width="17.1419%" height="15" fill="rgb(213,184,43)"/><text x="37.6715%" y="671.50">std::collections::hash::map..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (4,829 samples, 17.04%)</title><rect x="37.5203%" y="645" width="17.0431%" height="15" fill="rgb(231,61,34)"/><text x="37.7703%" y="655.50">hashbrown::map::HashMap&lt;K,..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (4,783 samples, 16.88%)</title><rect x="37.6826%" y="629" width="16.8808%" height="15" fill="rgb(235,75,3)"/><text x="37.9326%" y="639.50">hashbrown::map::HashMap&lt;K,..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (1,095 samples, 3.86%)</title><rect x="50.6988%" y="613" width="3.8646%" height="15" fill="rgb(220,106,47)"/><text x="50.9488%" y="623.50">hash..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (1,095 samples, 3.86%)</title><rect x="50.6988%" y="597" width="3.8646%" height="15" fill="rgb(210,196,33)"/><text x="50.9488%" y="607.50">hash..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::iter_hash (264 samples, 0.93%)</title><rect x="53.6317%" y="581" width="0.9317%" height="15" fill="rgb(229,154,42)"/><text x="53.8817%" y="591.50"></text></g><g><title>hashbrown::raw::RawIterHash&lt;T,A&gt;::new (264 samples, 0.93%)</title><rect x="53.6317%" y="565" width="0.9317%" height="15" fill="rgb(228,114,26)"/><text x="53.8817%" y="575.50"></text></g><g><title>hashbrown::raw::RawIterHashInner&lt;A&gt;::new (264 samples, 0.93%)</title><rect x="53.6317%" y="549" width="0.9317%" height="15" fill="rgb(208,144,1)"/><text x="53.8817%" y="559.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (37 samples, 0.13%)</title><rect x="54.4328%" y="533" width="0.1306%" height="15" fill="rgb(239,112,37)"/><text x="54.6828%" y="543.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set1_epi8 (37 samples, 0.13%)</title><rect x="54.4328%" y="517" width="0.1306%" height="15" fill="rgb(210,96,50)"/><text x="54.6828%" y="527.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set_epi8 (37 samples, 0.13%)</title><rect x="54.4328%" y="501" width="0.1306%" height="15" fill="rgb(222,178,2)"/><text x="54.6828%" y="511.50"></text></g><g><title>core::core_arch::simd::i8x16::new (37 samples, 0.13%)</title><rect x="54.4328%" y="485" width="0.1306%" height="15" fill="rgb(226,74,18)"/><text x="54.6828%" y="495.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (226 samples, 0.80%)</title><rect x="58.8692%" y="501" width="0.7976%" height="15" fill="rgb(225,67,54)"/><text x="59.1192%" y="511.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (429 samples, 1.51%)</title><rect x="58.4810%" y="517" width="1.5141%" height="15" fill="rgb(251,92,32)"/><text x="58.7310%" y="527.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (93 samples, 0.33%)</title><rect x="59.6668%" y="501" width="0.3282%" height="15" fill="rgb(228,149,22)"/><text x="59.9168%" y="511.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (1,334 samples, 4.71%)</title><rect x="56.4234%" y="565" width="4.7081%" height="15" fill="rgb(243,54,13)"/><text x="56.6734%" y="575.50">&lt;std:..</text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (1,334 samples, 4.71%)</title><rect x="56.4234%" y="549" width="4.7081%" height="15" fill="rgb(243,180,28)"/><text x="56.6734%" y="559.50">&lt;core..</text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1,334 samples, 4.71%)</title><rect x="56.4234%" y="533" width="4.7081%" height="15" fill="rgb(208,167,24)"/><text x="56.6734%" y="543.50">&lt;core..</text></g><g><title>core::hash::sip::u8to64_le (321 samples, 1.13%)</title><rect x="59.9986%" y="517" width="1.1329%" height="15" fill="rgb(245,73,45)"/><text x="60.2486%" y="527.50"></text></g><g><title>&lt;mcts_policy::game_rules::Move as core::hash::Hash&gt;::hash (1,580 samples, 5.58%)</title><rect x="55.5587%" y="613" width="5.5763%" height="15" fill="rgb(237,203,48)"/><text x="55.8087%" y="623.50">&lt;mcts_p..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for usize&gt;::hash (1,510 samples, 5.33%)</title><rect x="55.8057%" y="597" width="5.3293%" height="15" fill="rgb(211,197,16)"/><text x="56.0557%" y="607.50">core::h..</text></g><g><title>core::hash::Hasher::write_usize (1,417 samples, 5.00%)</title><rect x="56.1340%" y="581" width="5.0011%" height="15" fill="rgb(243,99,51)"/><text x="56.3840%" y="591.50">core::..</text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (58 samples, 0.20%)</title><rect x="61.5233%" y="549" width="0.2047%" height="15" fill="rgb(215,123,29)"/><text x="61.7733%" y="559.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (110 samples, 0.39%)</title><rect x="61.4386%" y="565" width="0.3882%" height="15" fill="rgb(239,186,37)"/><text x="61.6886%" y="575.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (201 samples, 0.71%)</title><rect x="61.9362%" y="549" width="0.7094%" height="15" fill="rgb(252,136,39)"/><text x="62.1862%" y="559.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (527 samples, 1.86%)</title><rect x="61.1350%" y="613" width="1.8600%" height="15" fill="rgb(223,213,32)"/><text x="61.3850%" y="623.50">&lt;..</text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (527 samples, 1.86%)</title><rect x="61.1350%" y="597" width="1.8600%" height="15" fill="rgb(233,115,5)"/><text x="61.3850%" y="607.50">&lt;..</text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (527 samples, 1.86%)</title><rect x="61.1350%" y="581" width="1.8600%" height="15" fill="rgb(207,226,44)"/><text x="61.3850%" y="591.50">&lt;..</text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (331 samples, 1.17%)</title><rect x="61.8268%" y="565" width="1.1682%" height="15" fill="rgb(208,126,0)"/><text x="62.0768%" y="575.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (99 samples, 0.35%)</title><rect x="62.6456%" y="549" width="0.3494%" height="15" fill="rgb(244,66,21)"/><text x="62.8956%" y="559.50"></text></g><g><title>&lt;std::collections::hash::map::RandomState as core::hash::BuildHasher&gt;::build_hasher (146 samples, 0.52%)</title><rect x="62.9950%" y="613" width="0.5153%" height="15" fill="rgb(222,97,12)"/><text x="63.2450%" y="623.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (76 samples, 0.27%)</title><rect x="63.2420%" y="597" width="0.2682%" height="15" fill="rgb(219,213,19)"/><text x="63.4920%" y="607.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (54 samples, 0.19%)</title><rect x="63.3197%" y="581" width="0.1906%" height="15" fill="rgb(252,169,30)"/><text x="63.5697%" y="591.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (54 samples, 0.19%)</title><rect x="63.3197%" y="565" width="0.1906%" height="15" fill="rgb(206,32,51)"/><text x="63.5697%" y="575.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u16&gt;::hash_slice (42 samples, 0.15%)</title><rect x="63.5138%" y="549" width="0.1482%" height="15" fill="rgb(250,172,42)"/><text x="63.7638%" y="559.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (42 samples, 0.15%)</title><rect x="63.5138%" y="533" width="0.1482%" height="15" fill="rgb(209,34,43)"/><text x="63.7638%" y="543.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (42 samples, 0.15%)</title><rect x="63.5138%" y="517" width="0.1482%" height="15" fill="rgb(223,11,35)"/><text x="63.7638%" y="527.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (42 samples, 0.15%)</title><rect x="63.5138%" y="501" width="0.1482%" height="15" fill="rgb(251,219,26)"/><text x="63.7638%" y="511.50"></text></g><g><title>core::array::&lt;impl core::hash::Hash for [T: N]&gt;::hash (55 samples, 0.19%)</title><rect x="63.5138%" y="581" width="0.1941%" height="15" fill="rgb(231,119,3)"/><text x="63.7638%" y="591.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (55 samples, 0.19%)</title><rect x="63.5138%" y="565" width="0.1941%" height="15" fill="rgb(216,97,11)"/><text x="63.7638%" y="575.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for (A,B)&gt;::hash (70 samples, 0.25%)</title><rect x="63.5138%" y="597" width="0.2471%" height="15" fill="rgb(223,59,9)"/><text x="63.7638%" y="607.50"></text></g><g><title>hashbrown::map::make_insert_hash (2,346 samples, 8.28%)</title><rect x="55.5587%" y="629" width="8.2798%" height="15" fill="rgb(233,93,31)"/><text x="55.8087%" y="639.50">hashbrown::m..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for (A,B)&gt;::hash (93 samples, 0.33%)</title><rect x="63.5103%" y="613" width="0.3282%" height="15" fill="rgb(239,81,33)"/><text x="63.7603%" y="623.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (41 samples, 0.14%)</title><rect x="64.6255%" y="549" width="0.1447%" height="15" fill="rgb(213,120,34)"/><text x="64.8755%" y="559.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (147 samples, 0.52%)</title><rect x="64.3608%" y="565" width="0.5188%" height="15" fill="rgb(243,49,53)"/><text x="64.6108%" y="575.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::remove_lowest_bit (31 samples, 0.11%)</title><rect x="64.7702%" y="549" width="0.1094%" height="15" fill="rgb(247,216,33)"/><text x="65.0202%" y="559.50"></text></g><g><title>&lt;hashbrown::raw::RawIterHashInner&lt;A&gt; as core::iter::traits::iterator::Iterator&gt;::next (192 samples, 0.68%)</title><rect x="64.3008%" y="581" width="0.6776%" height="15" fill="rgb(226,26,14)"/><text x="64.5508%" y="591.50"></text></g><g><title>&lt;hashbrown::raw::RawIterHash&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (195 samples, 0.69%)</title><rect x="64.3008%" y="597" width="0.6882%" height="15" fill="rgb(215,49,53)"/><text x="64.5508%" y="607.50"></text></g><g><title>&lt;mcts_policy::game_rules::Move as core::cmp::PartialEq&gt;::eq (49 samples, 0.17%)</title><rect x="64.9926%" y="581" width="0.1729%" height="15" fill="rgb(245,162,40)"/><text x="65.2426%" y="591.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (68 samples, 0.24%)</title><rect x="64.9926%" y="597" width="0.2400%" height="15" fill="rgb(229,68,17)"/><text x="65.2426%" y="607.50"></text></g><g><title>hashbrown::raw::h2 (32 samples, 0.11%)</title><rect x="65.3349%" y="549" width="0.1129%" height="15" fill="rgb(213,182,10)"/><text x="65.5849%" y="559.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (64 samples, 0.23%)</title><rect x="65.4479%" y="549" width="0.2259%" height="15" fill="rgb(245,125,30)"/><text x="65.6979%" y="559.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (64 samples, 0.23%)</title><rect x="65.4479%" y="533" width="0.2259%" height="15" fill="rgb(232,202,2)"/><text x="65.6979%" y="543.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (64 samples, 0.23%)</title><rect x="65.4479%" y="517" width="0.2259%" height="15" fill="rgb(237,140,51)"/><text x="65.6979%" y="527.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get_mut (553 samples, 1.95%)</title><rect x="63.8385%" y="629" width="1.9517%" height="15" fill="rgb(236,157,25)"/><text x="64.0885%" y="639.50">h..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (553 samples, 1.95%)</title><rect x="63.8385%" y="613" width="1.9517%" height="15" fill="rgb(219,209,0)"/><text x="64.0885%" y="623.50">h..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::iter_hash (150 samples, 0.53%)</title><rect x="65.2608%" y="597" width="0.5294%" height="15" fill="rgb(240,116,54)"/><text x="65.5108%" y="607.50"></text></g><g><title>hashbrown::raw::RawIterHash&lt;T,A&gt;::new (150 samples, 0.53%)</title><rect x="65.2608%" y="581" width="0.5294%" height="15" fill="rgb(216,10,36)"/><text x="65.5108%" y="591.50"></text></g><g><title>hashbrown::raw::RawIterHashInner&lt;A&gt;::new (150 samples, 0.53%)</title><rect x="65.2608%" y="565" width="0.5294%" height="15" fill="rgb(222,72,44)"/><text x="65.5108%" y="575.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (33 samples, 0.12%)</title><rect x="65.6737%" y="549" width="0.1165%" height="15" fill="rgb(232,159,9)"/><text x="65.9237%" y="559.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set1_epi8 (33 samples, 0.12%)</title><rect x="65.6737%" y="533" width="0.1165%" height="15" fill="rgb(210,39,32)"/><text x="65.9237%" y="543.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set_epi8 (33 samples, 0.12%)</title><rect x="65.6737%" y="517" width="0.1165%" height="15" fill="rgb(216,194,45)"/><text x="65.9237%" y="527.50"></text></g><g><title>core::core_arch::simd::i8x16::new (33 samples, 0.12%)</title><rect x="65.6737%" y="501" width="0.1165%" height="15" fill="rgb(218,18,35)"/><text x="65.9237%" y="511.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::write (112 samples, 0.40%)</title><rect x="66.0196%" y="613" width="0.3953%" height="15" fill="rgb(207,83,51)"/><text x="66.2696%" y="623.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write (112 samples, 0.40%)</title><rect x="66.0196%" y="597" width="0.3953%" height="15" fill="rgb(225,63,43)"/><text x="66.2696%" y="607.50"></text></g><g><title>core::ptr::write (112 samples, 0.40%)</title><rect x="66.0196%" y="581" width="0.3953%" height="15" fill="rgb(207,57,36)"/><text x="66.2696%" y="591.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::remove_lowest_bit (43 samples, 0.15%)</title><rect x="66.6161%" y="533" width="0.1518%" height="15" fill="rgb(216,99,33)"/><text x="66.8661%" y="543.50"></text></g><g><title>&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (74 samples, 0.26%)</title><rect x="66.5208%" y="565" width="0.2612%" height="15" fill="rgb(225,42,16)"/><text x="66.7708%" y="575.50"></text></g><g><title>&lt;hashbrown::raw::RawIterRange&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (74 samples, 0.26%)</title><rect x="66.5208%" y="549" width="0.2612%" height="15" fill="rgb(220,201,45)"/><text x="66.7708%" y="559.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (80 samples, 0.28%)</title><rect x="66.8278%" y="501" width="0.2823%" height="15" fill="rgb(225,33,4)"/><text x="67.0778%" y="511.50"></text></g><g><title>alloc::alloc::dealloc (79 samples, 0.28%)</title><rect x="66.8314%" y="485" width="0.2788%" height="15" fill="rgb(224,33,50)"/><text x="67.0814%" y="495.50"></text></g><g><title>_int_free (65 samples, 0.23%)</title><rect x="66.8808%" y="469" width="0.2294%" height="15" fill="rgb(246,198,51)"/><text x="67.1308%" y="479.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::free_buckets (83 samples, 0.29%)</title><rect x="66.8278%" y="517" width="0.2929%" height="15" fill="rgb(205,22,4)"/><text x="67.0778%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::scopeguard::ScopeGuard&lt;hashbrown::raw::RawTableInner&lt;alloc::alloc::Global&gt;,hashbrown::raw::RawTableInner&lt;alloc::alloc::Global&gt;::prepare_resize::{{closure}}&gt;&gt; (86 samples, 0.30%)</title><rect x="66.8208%" y="565" width="0.3035%" height="15" fill="rgb(206,3,8)"/><text x="67.0708%" y="575.50"></text></g><g><title>&lt;hashbrown::scopeguard::ScopeGuard&lt;T,F&gt; as core::ops::drop::Drop&gt;::drop (86 samples, 0.30%)</title><rect x="66.8208%" y="549" width="0.3035%" height="15" fill="rgb(251,23,15)"/><text x="67.0708%" y="559.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::prepare_resize::{{closure}} (86 samples, 0.30%)</title><rect x="66.8208%" y="533" width="0.3035%" height="15" fill="rgb(252,88,28)"/><text x="67.0708%" y="543.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (129 samples, 0.46%)</title><rect x="70.2972%" y="421" width="0.4553%" height="15" fill="rgb(212,127,14)"/><text x="70.5472%" y="431.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (547 samples, 1.93%)</title><rect x="69.5631%" y="437" width="1.9305%" height="15" fill="rgb(247,145,37)"/><text x="69.8131%" y="447.50">&lt;..</text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (210 samples, 0.74%)</title><rect x="70.7525%" y="421" width="0.7412%" height="15" fill="rgb(209,117,53)"/><text x="71.0025%" y="431.50"></text></g><g><title>core::hash::sip::u8to64_le (402 samples, 1.42%)</title><rect x="71.5042%" y="437" width="1.4188%" height="15" fill="rgb(212,90,42)"/><text x="71.7542%" y="447.50"></text></g><g><title>&lt;mcts_policy::game_rules::Move as core::hash::Hash&gt;::hash (1,618 samples, 5.71%)</title><rect x="67.2196%" y="533" width="5.7105%" height="15" fill="rgb(218,164,37)"/><text x="67.4696%" y="543.50">&lt;mcts_p..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for usize&gt;::hash (1,590 samples, 5.61%)</title><rect x="67.3184%" y="517" width="5.6116%" height="15" fill="rgb(246,65,34)"/><text x="67.5684%" y="527.50">core::h..</text></g><g><title>core::hash::Hasher::write_usize (1,477 samples, 5.21%)</title><rect x="67.7172%" y="501" width="5.2128%" height="15" fill="rgb(231,100,33)"/><text x="67.9672%" y="511.50">core::..</text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (1,467 samples, 5.18%)</title><rect x="67.7525%" y="485" width="5.1775%" height="15" fill="rgb(228,126,14)"/><text x="68.0025%" y="495.50">&lt;std::..</text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (1,467 samples, 5.18%)</title><rect x="67.7525%" y="469" width="5.1775%" height="15" fill="rgb(215,173,21)"/><text x="68.0025%" y="479.50">&lt;core:..</text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1,467 samples, 5.18%)</title><rect x="67.7525%" y="453" width="5.1775%" height="15" fill="rgb(210,6,40)"/><text x="68.0025%" y="463.50">&lt;core:..</text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (61 samples, 0.22%)</title><rect x="73.3253%" y="469" width="0.2153%" height="15" fill="rgb(212,48,18)"/><text x="73.5753%" y="479.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (120 samples, 0.42%)</title><rect x="73.2018%" y="485" width="0.4235%" height="15" fill="rgb(230,214,11)"/><text x="73.4518%" y="495.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (184 samples, 0.65%)</title><rect x="73.8018%" y="469" width="0.6494%" height="15" fill="rgb(254,105,39)"/><text x="74.0518%" y="479.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (534 samples, 1.88%)</title><rect x="72.9300%" y="533" width="1.8847%" height="15" fill="rgb(245,158,5)"/><text x="73.1800%" y="543.50">&lt;..</text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (534 samples, 1.88%)</title><rect x="72.9300%" y="517" width="1.8847%" height="15" fill="rgb(249,208,11)"/><text x="73.1800%" y="527.50">&lt;..</text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (534 samples, 1.88%)</title><rect x="72.9300%" y="501" width="1.8847%" height="15" fill="rgb(210,39,28)"/><text x="73.1800%" y="511.50">&lt;..</text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (337 samples, 1.19%)</title><rect x="73.6253%" y="485" width="1.1894%" height="15" fill="rgb(211,56,53)"/><text x="73.8753%" y="495.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (103 samples, 0.36%)</title><rect x="74.4512%" y="469" width="0.3635%" height="15" fill="rgb(226,201,30)"/><text x="74.7012%" y="479.50"></text></g><g><title>&lt;std::collections::hash::map::RandomState as core::hash::BuildHasher&gt;::build_hasher (98 samples, 0.35%)</title><rect x="74.8147%" y="533" width="0.3459%" height="15" fill="rgb(239,101,34)"/><text x="75.0647%" y="543.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (55 samples, 0.19%)</title><rect x="74.9665%" y="517" width="0.1941%" height="15" fill="rgb(226,209,5)"/><text x="75.2165%" y="527.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (55 samples, 0.19%)</title><rect x="74.9665%" y="501" width="0.1941%" height="15" fill="rgb(250,105,47)"/><text x="75.2165%" y="511.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (55 samples, 0.19%)</title><rect x="74.9665%" y="485" width="0.1941%" height="15" fill="rgb(230,72,3)"/><text x="75.2165%" y="495.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u16&gt;::hash_slice (31 samples, 0.11%)</title><rect x="75.1606%" y="469" width="0.1094%" height="15" fill="rgb(232,218,39)"/><text x="75.4106%" y="479.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (31 samples, 0.11%)</title><rect x="75.1606%" y="453" width="0.1094%" height="15" fill="rgb(248,166,6)"/><text x="75.4106%" y="463.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (31 samples, 0.11%)</title><rect x="75.1606%" y="437" width="0.1094%" height="15" fill="rgb(247,89,20)"/><text x="75.4106%" y="447.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (31 samples, 0.11%)</title><rect x="75.1606%" y="421" width="0.1094%" height="15" fill="rgb(248,130,54)"/><text x="75.4106%" y="431.50"></text></g><g><title>core::array::&lt;impl core::hash::Hash for [T: N]&gt;::hash (40 samples, 0.14%)</title><rect x="75.1606%" y="501" width="0.1412%" height="15" fill="rgb(234,196,4)"/><text x="75.4106%" y="511.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (40 samples, 0.14%)</title><rect x="75.1606%" y="485" width="0.1412%" height="15" fill="rgb(250,143,31)"/><text x="75.4106%" y="495.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for (A,B)&gt;::hash (50 samples, 0.18%)</title><rect x="75.1606%" y="517" width="0.1765%" height="15" fill="rgb(211,110,34)"/><text x="75.4106%" y="527.50"></text></g><g><title>hashbrown::map::make_hasher::{{closure}} (2,340 samples, 8.26%)</title><rect x="67.1243%" y="565" width="8.2586%" height="15" fill="rgb(215,124,48)"/><text x="67.3743%" y="575.50">hashbrown::..</text></g><g><title>hashbrown::map::make_hash (2,339 samples, 8.26%)</title><rect x="67.1278%" y="549" width="8.2551%" height="15" fill="rgb(216,46,13)"/><text x="67.3778%" y="559.50">hashbrown::..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for (A,B)&gt;::hash (63 samples, 0.22%)</title><rect x="75.1606%" y="533" width="0.2223%" height="15" fill="rgb(205,184,25)"/><text x="75.4106%" y="543.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ref (38 samples, 0.13%)</title><rect x="75.3829%" y="565" width="0.1341%" height="15" fill="rgb(228,1,10)"/><text x="75.6329%" y="575.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (38 samples, 0.13%)</title><rect x="75.3829%" y="549" width="0.1341%" height="15" fill="rgb(213,116,27)"/><text x="75.6329%" y="559.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (38 samples, 0.13%)</title><rect x="75.3829%" y="533" width="0.1341%" height="15" fill="rgb(241,95,50)"/><text x="75.6329%" y="543.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (38 samples, 0.13%)</title><rect x="75.3829%" y="517" width="0.1341%" height="15" fill="rgb(238,48,32)"/><text x="75.6329%" y="527.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::copy_from_nonoverlapping (151 samples, 0.53%)</title><rect x="75.5170%" y="549" width="0.5329%" height="15" fill="rgb(235,113,49)"/><text x="75.7670%" y="559.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (151 samples, 0.53%)</title><rect x="75.5170%" y="533" width="0.5329%" height="15" fill="rgb(205,127,43)"/><text x="75.7670%" y="543.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::copy_from_nonoverlapping (158 samples, 0.56%)</title><rect x="75.5170%" y="565" width="0.5576%" height="15" fill="rgb(250,162,2)"/><text x="75.7670%" y="575.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (74 samples, 0.26%)</title><rect x="76.4029%" y="533" width="0.2612%" height="15" fill="rgb(220,13,41)"/><text x="76.6529%" y="543.50"></text></g><g><title>hashbrown::raw::is_full (109 samples, 0.38%)</title><rect x="76.6641%" y="533" width="0.3847%" height="15" fill="rgb(249,221,25)"/><text x="76.9141%" y="543.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_insert_slot (292 samples, 1.03%)</title><rect x="76.1347%" y="549" width="1.0306%" height="15" fill="rgb(215,208,19)"/><text x="76.3847%" y="559.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::prepare_insert_slot (397 samples, 1.40%)</title><rect x="76.1347%" y="565" width="1.4011%" height="15" fill="rgb(236,175,2)"/><text x="76.3847%" y="575.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::set_ctrl_h2 (105 samples, 0.37%)</title><rect x="77.1652%" y="549" width="0.3706%" height="15" fill="rgb(241,52,2)"/><text x="77.4152%" y="559.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::set_ctrl (105 samples, 0.37%)</title><rect x="77.1652%" y="533" width="0.3706%" height="15" fill="rgb(248,140,14)"/><text x="77.4152%" y="543.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write_bytes (114 samples, 0.40%)</title><rect x="77.6205%" y="533" width="0.4023%" height="15" fill="rgb(253,22,42)"/><text x="77.8705%" y="543.50"></text></g><g><title>core::intrinsics::write_bytes (114 samples, 0.40%)</title><rect x="77.6205%" y="517" width="0.4023%" height="15" fill="rgb(234,61,47)"/><text x="77.8705%" y="527.50"></text></g><g><title>__memset_avx2_unaligned_erms (113 samples, 0.40%)</title><rect x="77.6241%" y="501" width="0.3988%" height="15" fill="rgb(208,226,15)"/><text x="77.8741%" y="511.50"></text></g><g><title>_int_malloc (229 samples, 0.81%)</title><rect x="78.4040%" y="437" width="0.8082%" height="15" fill="rgb(217,221,4)"/><text x="78.6540%" y="447.50"></text></g><g><title>__GI___libc_malloc (343 samples, 1.21%)</title><rect x="78.0864%" y="453" width="1.2106%" height="15" fill="rgb(212,174,34)"/><text x="78.3364%" y="463.50"></text></g><g><title>hashbrown::raw::alloc::inner::do_alloc (350 samples, 1.24%)</title><rect x="78.0793%" y="517" width="1.2353%" height="15" fill="rgb(253,83,4)"/><text x="78.3293%" y="527.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (350 samples, 1.24%)</title><rect x="78.0793%" y="501" width="1.2353%" height="15" fill="rgb(250,195,49)"/><text x="78.3293%" y="511.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (350 samples, 1.24%)</title><rect x="78.0793%" y="485" width="1.2353%" height="15" fill="rgb(241,192,25)"/><text x="78.3293%" y="495.50"></text></g><g><title>alloc::alloc::alloc (350 samples, 1.24%)</title><rect x="78.0793%" y="469" width="1.2353%" height="15" fill="rgb(208,124,10)"/><text x="78.3293%" y="479.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::new_uninitialized (368 samples, 1.30%)</title><rect x="78.0229%" y="533" width="1.2988%" height="15" fill="rgb(222,33,0)"/><text x="78.2729%" y="543.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::resize (3,665 samples, 12.93%)</title><rect x="66.4784%" y="581" width="12.9350%" height="15" fill="rgb(234,209,28)"/><text x="66.7284%" y="591.50">hashbrown::raw::Raw..</text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::prepare_resize (532 samples, 1.88%)</title><rect x="77.5358%" y="565" width="1.8776%" height="15" fill="rgb(224,11,23)"/><text x="77.7858%" y="575.50">h..</text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::fallible_with_capacity (528 samples, 1.86%)</title><rect x="77.5499%" y="549" width="1.8635%" height="15" fill="rgb(232,99,1)"/><text x="77.7999%" y="559.50">h..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (3,681 samples, 12.99%)</title><rect x="66.4290%" y="613" width="12.9915%" height="15" fill="rgb(237,95,45)"/><text x="66.6790%" y="623.50">hashbrown::raw::RawT..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (3,679 samples, 12.98%)</title><rect x="66.4361%" y="597" width="12.9844%" height="15" fill="rgb(208,109,11)"/><text x="66.6861%" y="607.50">hashbrown::raw::RawT..</text></g><g><title>hashbrown::raw::is_full (39 samples, 0.14%)</title><rect x="79.9922%" y="597" width="0.1376%" height="15" fill="rgb(216,190,48)"/><text x="80.2422%" y="607.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_insert_slot (275 samples, 0.97%)</title><rect x="79.4205%" y="613" width="0.9706%" height="15" fill="rgb(251,171,36)"/><text x="79.6705%" y="623.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_empty_or_deleted (46 samples, 0.16%)</title><rect x="80.2287%" y="597" width="0.1623%" height="15" fill="rgb(230,62,22)"/><text x="80.4787%" y="607.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (46 samples, 0.16%)</title><rect x="80.2287%" y="581" width="0.1623%" height="15" fill="rgb(225,114,35)"/><text x="80.4787%" y="591.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::insert (7,427 samples, 26.21%)</title><rect x="54.5634%" y="661" width="26.2123%" height="15" fill="rgb(215,118,42)"/><text x="54.8134%" y="671.50">std::collections::hash::map::HashMap&lt;K,V,S..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (7,343 samples, 25.92%)</title><rect x="54.8599%" y="645" width="25.9159%" height="15" fill="rgb(243,119,21)"/><text x="55.1099%" y="655.50">hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (4,246 samples, 14.99%)</title><rect x="65.7902%" y="629" width="14.9855%" height="15" fill="rgb(252,177,53)"/><text x="66.0402%" y="639.50">hashbrown::raw::RawTabl..</text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::record_item_insert_at (109 samples, 0.38%)</title><rect x="80.3910%" y="613" width="0.3847%" height="15" fill="rgb(237,209,29)"/><text x="80.6410%" y="623.50"></text></g><g><title>mcts_policy::game_rules::legal_moves (14,224 samples, 50.20%)</title><rect x="30.6487%" y="677" width="50.2012%" height="15" fill="rgb(212,65,23)"/><text x="30.8987%" y="687.50">mcts_policy::game_rules::legal_moves</text></g><g><title>__memmove_avx_unaligned_erms (163 samples, 0.58%)</title><rect x="80.9275%" y="485" width="0.5753%" height="15" fill="rgb(230,222,46)"/><text x="81.1775%" y="495.50"></text></g><g><title>_int_realloc (193 samples, 0.68%)</title><rect x="80.9169%" y="501" width="0.6812%" height="15" fill="rgb(215,135,32)"/><text x="81.1669%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (210 samples, 0.74%)</title><rect x="80.8640%" y="661" width="0.7412%" height="15" fill="rgb(246,101,22)"/><text x="81.1140%" y="671.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (210 samples, 0.74%)</title><rect x="80.8640%" y="645" width="0.7412%" height="15" fill="rgb(206,107,13)"/><text x="81.1140%" y="655.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (210 samples, 0.74%)</title><rect x="80.8640%" y="629" width="0.7412%" height="15" fill="rgb(250,100,44)"/><text x="81.1140%" y="639.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (210 samples, 0.74%)</title><rect x="80.8640%" y="613" width="0.7412%" height="15" fill="rgb(231,147,38)"/><text x="81.1140%" y="623.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (210 samples, 0.74%)</title><rect x="80.8640%" y="597" width="0.7412%" height="15" fill="rgb(229,8,40)"/><text x="81.1140%" y="607.50"></text></g><g><title>alloc::raw_vec::finish_grow (208 samples, 0.73%)</title><rect x="80.8710%" y="581" width="0.7341%" height="15" fill="rgb(221,135,30)"/><text x="81.1210%" y="591.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (208 samples, 0.73%)</title><rect x="80.8710%" y="565" width="0.7341%" height="15" fill="rgb(249,193,18)"/><text x="81.1210%" y="575.50"></text></g><g><title>alloc::alloc::Global::grow_impl (208 samples, 0.73%)</title><rect x="80.8710%" y="549" width="0.7341%" height="15" fill="rgb(209,133,39)"/><text x="81.1210%" y="559.50"></text></g><g><title>alloc::alloc::realloc (208 samples, 0.73%)</title><rect x="80.8710%" y="533" width="0.7341%" height="15" fill="rgb(232,100,14)"/><text x="81.1210%" y="543.50"></text></g><g><title>__GI___libc_realloc (208 samples, 0.73%)</title><rect x="80.8710%" y="517" width="0.7341%" height="15" fill="rgb(224,185,1)"/><text x="81.1210%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (135 samples, 0.48%)</title><rect x="81.6087%" y="629" width="0.4765%" height="15" fill="rgb(223,139,8)"/><text x="81.8587%" y="639.50"></text></g><g><title>core::ptr::write (135 samples, 0.48%)</title><rect x="81.6087%" y="613" width="0.4765%" height="15" fill="rgb(232,213,38)"/><text x="81.8587%" y="623.50"></text></g><g><title>mcts_policy::game_rules::possible_moves (14,995 samples, 52.92%)</title><rect x="29.3252%" y="693" width="52.9223%" height="15" fill="rgb(207,94,22)"/><text x="29.5752%" y="703.50">mcts_policy::game_rules::possible_moves</text></g><g><title>mcts_policy::game_rules::net_pass (396 samples, 1.40%)</title><rect x="80.8499%" y="677" width="1.3976%" height="15" fill="rgb(219,183,54)"/><text x="81.0999%" y="687.50"></text></g><g><title>alloc::vec::from_elem (182 samples, 0.64%)</title><rect x="81.6051%" y="661" width="0.6423%" height="15" fill="rgb(216,185,54)"/><text x="81.8551%" y="671.50"></text></g><g><title>&lt;T as alloc::vec::spec_from_elem::SpecFromElem&gt;::from_elem (182 samples, 0.64%)</title><rect x="81.6051%" y="645" width="0.6423%" height="15" fill="rgb(254,217,39)"/><text x="81.8551%" y="655.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (46 samples, 0.16%)</title><rect x="82.0851%" y="629" width="0.1623%" height="15" fill="rgb(240,178,23)"/><text x="82.3351%" y="639.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (46 samples, 0.16%)</title><rect x="82.0851%" y="613" width="0.1623%" height="15" fill="rgb(218,11,47)"/><text x="82.3351%" y="623.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (46 samples, 0.16%)</title><rect x="82.0851%" y="597" width="0.1623%" height="15" fill="rgb(218,51,51)"/><text x="82.3351%" y="607.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (46 samples, 0.16%)</title><rect x="82.0851%" y="581" width="0.1623%" height="15" fill="rgb(238,126,27)"/><text x="82.3351%" y="591.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (46 samples, 0.16%)</title><rect x="82.0851%" y="565" width="0.1623%" height="15" fill="rgb(249,202,22)"/><text x="82.3351%" y="575.50"></text></g><g><title>alloc::alloc::alloc (46 samples, 0.16%)</title><rect x="82.0851%" y="549" width="0.1623%" height="15" fill="rgb(254,195,49)"/><text x="82.3351%" y="559.50"></text></g><g><title>__GI___libc_malloc (46 samples, 0.16%)</title><rect x="82.0851%" y="533" width="0.1623%" height="15" fill="rgb(208,123,14)"/><text x="82.3351%" y="543.50"></text></g><g><title>_int_malloc (43 samples, 0.15%)</title><rect x="82.0957%" y="517" width="0.1518%" height="15" fill="rgb(224,200,8)"/><text x="82.3457%" y="527.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (75 samples, 0.26%)</title><rect x="82.3604%" y="613" width="0.2647%" height="15" fill="rgb(217,61,36)"/><text x="82.6104%" y="623.50"></text></g><g><title>core::tuple::&lt;impl core::cmp::PartialEq for (A,B)&gt;::eq (75 samples, 0.26%)</title><rect x="82.3604%" y="597" width="0.2647%" height="15" fill="rgb(206,35,45)"/><text x="82.6104%" y="607.50"></text></g><g><title>core::array::&lt;impl core::cmp::PartialEq&lt;[B: N]&gt; for [A: N]&gt;::eq (75 samples, 0.26%)</title><rect x="82.3604%" y="581" width="0.2647%" height="15" fill="rgb(217,65,33)"/><text x="82.6104%" y="591.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (75 samples, 0.26%)</title><rect x="82.3604%" y="565" width="0.2647%" height="15" fill="rgb(222,158,48)"/><text x="82.6104%" y="575.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (75 samples, 0.26%)</title><rect x="82.3604%" y="549" width="0.2647%" height="15" fill="rgb(254,2,54)"/><text x="82.6104%" y="559.50"></text></g><g><title>__memcmp_avx2_movbe (75 samples, 0.26%)</title><rect x="82.3604%" y="533" width="0.2647%" height="15" fill="rgb(250,143,38)"/><text x="82.6104%" y="543.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::contains_key (121 samples, 0.43%)</title><rect x="82.2510%" y="693" width="0.4270%" height="15" fill="rgb(248,25,0)"/><text x="82.5010%" y="703.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (121 samples, 0.43%)</title><rect x="82.2510%" y="677" width="0.4270%" height="15" fill="rgb(206,152,27)"/><text x="82.5010%" y="687.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (121 samples, 0.43%)</title><rect x="82.2510%" y="661" width="0.4270%" height="15" fill="rgb(240,77,30)"/><text x="82.5010%" y="671.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (94 samples, 0.33%)</title><rect x="82.3463%" y="645" width="0.3318%" height="15" fill="rgb(231,5,3)"/><text x="82.5963%" y="655.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (94 samples, 0.33%)</title><rect x="82.3463%" y="629" width="0.3318%" height="15" fill="rgb(207,226,32)"/><text x="82.5963%" y="639.50"></text></g><g><title>hashbrown::map::make_hash (46 samples, 0.16%)</title><rect x="82.6781%" y="645" width="0.1623%" height="15" fill="rgb(222,207,47)"/><text x="82.9281%" y="655.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (29 samples, 0.10%)</title><rect x="82.8863%" y="613" width="0.1024%" height="15" fill="rgb(229,115,45)"/><text x="83.1363%" y="623.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (102 samples, 0.36%)</title><rect x="82.6781%" y="693" width="0.3600%" height="15" fill="rgb(224,191,6)"/><text x="82.9281%" y="703.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (102 samples, 0.36%)</title><rect x="82.6781%" y="677" width="0.3600%" height="15" fill="rgb(230,227,24)"/><text x="82.9281%" y="687.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (102 samples, 0.36%)</title><rect x="82.6781%" y="661" width="0.3600%" height="15" fill="rgb(228,80,19)"/><text x="82.9281%" y="671.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (56 samples, 0.20%)</title><rect x="82.8404%" y="645" width="0.1976%" height="15" fill="rgb(247,229,0)"/><text x="83.0904%" y="655.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (56 samples, 0.20%)</title><rect x="82.8404%" y="629" width="0.1976%" height="15" fill="rgb(237,194,15)"/><text x="83.0904%" y="639.50"></text></g><g><title>mcts_policy::game_graph::find_best_child (19,095 samples, 67.39%)</title><rect x="15.6490%" y="709" width="67.3925%" height="15" fill="rgb(219,203,20)"/><text x="15.8990%" y="719.50">mcts_policy::game_graph::find_best_child</text></g><g><title>mcts_policy::game_graph::explore_move (20,498 samples, 72.34%)</title><rect x="10.7009%" y="725" width="72.3442%" height="15" fill="rgb(234,128,8)"/><text x="10.9509%" y="735.50">mcts_policy::game_graph::explore_move</text></g><g><title>mcts_policy::game_graph::play_move (20,511 samples, 72.39%)</title><rect x="10.7009%" y="741" width="72.3901%" height="15" fill="rgb(248,202,8)"/><text x="10.9509%" y="751.50">mcts_policy::game_graph::play_move</text></g><g><title>mcts_policy::game_graph::play_n_games (20,576 samples, 72.62%)</title><rect x="10.4786%" y="773" width="72.6195%" height="15" fill="rgb(206,104,37)"/><text x="10.7286%" y="783.50">mcts_policy::game_graph::play_n_games</text></g><g><title>mcts_policy::game_graph::play_single_game (20,576 samples, 72.62%)</title><rect x="10.4786%" y="757" width="72.6195%" height="15" fill="rgb(223,8,27)"/><text x="10.7286%" y="767.50">mcts_policy::game_graph::play_single_game</text></g><g><title>__memmove_avx_unaligned_erms (428 samples, 1.51%)</title><rect x="83.1651%" y="581" width="1.5106%" height="15" fill="rgb(216,217,28)"/><text x="83.4151%" y="591.50"></text></g><g><title>[unknown] (392 samples, 1.38%)</title><rect x="83.2922%" y="565" width="1.3835%" height="15" fill="rgb(249,199,1)"/><text x="83.5422%" y="575.50"></text></g><g><title>[unknown] (368 samples, 1.30%)</title><rect x="83.3769%" y="549" width="1.2988%" height="15" fill="rgb(240,85,17)"/><text x="83.6269%" y="559.50"></text></g><g><title>[unknown] (333 samples, 1.18%)</title><rect x="83.5004%" y="533" width="1.1753%" height="15" fill="rgb(206,108,45)"/><text x="83.7504%" y="543.50"></text></g><g><title>[unknown] (332 samples, 1.17%)</title><rect x="83.5039%" y="517" width="1.1717%" height="15" fill="rgb(245,210,41)"/><text x="83.7539%" y="527.50"></text></g><g><title>[unknown] (325 samples, 1.15%)</title><rect x="83.5286%" y="501" width="1.1470%" height="15" fill="rgb(206,13,37)"/><text x="83.7786%" y="511.50"></text></g><g><title>[unknown] (312 samples, 1.10%)</title><rect x="83.5745%" y="485" width="1.1012%" height="15" fill="rgb(250,61,18)"/><text x="83.8245%" y="495.50"></text></g><g><title>[unknown] (307 samples, 1.08%)</title><rect x="83.5922%" y="469" width="1.0835%" height="15" fill="rgb(235,172,48)"/><text x="83.8422%" y="479.50"></text></g><g><title>[unknown] (295 samples, 1.04%)</title><rect x="83.6345%" y="453" width="1.0412%" height="15" fill="rgb(249,201,17)"/><text x="83.8845%" y="463.50"></text></g><g><title>[unknown] (280 samples, 0.99%)</title><rect x="83.6874%" y="437" width="0.9882%" height="15" fill="rgb(219,208,6)"/><text x="83.9374%" y="447.50"></text></g><g><title>[unknown] (269 samples, 0.95%)</title><rect x="83.7263%" y="421" width="0.9494%" height="15" fill="rgb(248,31,23)"/><text x="83.9763%" y="431.50"></text></g><g><title>[unknown] (234 samples, 0.83%)</title><rect x="83.8498%" y="405" width="0.8259%" height="15" fill="rgb(245,15,42)"/><text x="84.0998%" y="415.50"></text></g><g><title>[unknown] (209 samples, 0.74%)</title><rect x="83.9380%" y="389" width="0.7376%" height="15" fill="rgb(222,217,39)"/><text x="84.1880%" y="399.50"></text></g><g><title>[unknown] (177 samples, 0.62%)</title><rect x="84.0510%" y="373" width="0.6247%" height="15" fill="rgb(210,219,27)"/><text x="84.3010%" y="383.50"></text></g><g><title>[unknown] (168 samples, 0.59%)</title><rect x="84.0827%" y="357" width="0.5929%" height="15" fill="rgb(252,166,36)"/><text x="84.3327%" y="367.50"></text></g><g><title>[unknown] (149 samples, 0.53%)</title><rect x="84.1498%" y="341" width="0.5259%" height="15" fill="rgb(245,132,34)"/><text x="84.3998%" y="351.50"></text></g><g><title>[unknown] (118 samples, 0.42%)</title><rect x="84.2592%" y="325" width="0.4165%" height="15" fill="rgb(236,54,3)"/><text x="84.5092%" y="335.50"></text></g><g><title>[unknown] (71 samples, 0.25%)</title><rect x="84.4251%" y="309" width="0.2506%" height="15" fill="rgb(241,173,43)"/><text x="84.6751%" y="319.50"></text></g><g><title>[unknown] (42 samples, 0.15%)</title><rect x="84.5274%" y="293" width="0.1482%" height="15" fill="rgb(215,190,9)"/><text x="84.7774%" y="303.50"></text></g><g><title>[unknown] (36 samples, 0.13%)</title><rect x="84.5486%" y="277" width="0.1271%" height="15" fill="rgb(242,101,16)"/><text x="84.7986%" y="287.50"></text></g><g><title>[unknown] (32 samples, 0.11%)</title><rect x="84.5627%" y="261" width="0.1129%" height="15" fill="rgb(223,190,21)"/><text x="84.8127%" y="271.50"></text></g><g><title>[unknown] (104 samples, 0.37%)</title><rect x="84.7180%" y="565" width="0.3671%" height="15" fill="rgb(215,228,25)"/><text x="84.9680%" y="575.50"></text></g><g><title>[unknown] (97 samples, 0.34%)</title><rect x="84.7427%" y="549" width="0.3423%" height="15" fill="rgb(225,36,22)"/><text x="84.9927%" y="559.50"></text></g><g><title>[unknown] (89 samples, 0.31%)</title><rect x="84.7709%" y="533" width="0.3141%" height="15" fill="rgb(251,106,46)"/><text x="85.0209%" y="543.50"></text></g><g><title>[unknown] (89 samples, 0.31%)</title><rect x="84.7709%" y="517" width="0.3141%" height="15" fill="rgb(208,90,1)"/><text x="85.0209%" y="527.50"></text></g><g><title>[unknown] (87 samples, 0.31%)</title><rect x="84.7780%" y="501" width="0.3071%" height="15" fill="rgb(243,10,4)"/><text x="85.0280%" y="511.50"></text></g><g><title>[unknown] (86 samples, 0.30%)</title><rect x="84.7815%" y="485" width="0.3035%" height="15" fill="rgb(212,137,27)"/><text x="85.0315%" y="495.50"></text></g><g><title>[unknown] (82 samples, 0.29%)</title><rect x="84.7957%" y="469" width="0.2894%" height="15" fill="rgb(231,220,49)"/><text x="85.0457%" y="479.50"></text></g><g><title>[unknown] (79 samples, 0.28%)</title><rect x="84.8062%" y="453" width="0.2788%" height="15" fill="rgb(237,96,20)"/><text x="85.0562%" y="463.50"></text></g><g><title>[unknown] (79 samples, 0.28%)</title><rect x="84.8062%" y="437" width="0.2788%" height="15" fill="rgb(239,229,30)"/><text x="85.0562%" y="447.50"></text></g><g><title>[unknown] (74 samples, 0.26%)</title><rect x="84.8239%" y="421" width="0.2612%" height="15" fill="rgb(219,65,33)"/><text x="85.0739%" y="431.50"></text></g><g><title>[unknown] (66 samples, 0.23%)</title><rect x="84.8521%" y="405" width="0.2329%" height="15" fill="rgb(243,134,7)"/><text x="85.1021%" y="415.50"></text></g><g><title>[unknown] (62 samples, 0.22%)</title><rect x="84.8662%" y="389" width="0.2188%" height="15" fill="rgb(216,177,54)"/><text x="85.1162%" y="399.50"></text></g><g><title>[unknown] (57 samples, 0.20%)</title><rect x="84.8839%" y="373" width="0.2012%" height="15" fill="rgb(211,160,20)"/><text x="85.1339%" y="383.50"></text></g><g><title>[unknown] (51 samples, 0.18%)</title><rect x="84.9051%" y="357" width="0.1800%" height="15" fill="rgb(239,85,39)"/><text x="85.1551%" y="367.50"></text></g><g><title>[unknown] (39 samples, 0.14%)</title><rect x="84.9474%" y="341" width="0.1376%" height="15" fill="rgb(232,125,22)"/><text x="85.1974%" y="351.50"></text></g><g><title>[unknown] (31 samples, 0.11%)</title><rect x="84.9756%" y="325" width="0.1094%" height="15" fill="rgb(244,57,34)"/><text x="85.2256%" y="335.50"></text></g><g><title>[unknown] (31 samples, 0.11%)</title><rect x="85.1098%" y="549" width="0.1094%" height="15" fill="rgb(214,203,32)"/><text x="85.3598%" y="559.50"></text></g><g><title>[unknown] (30 samples, 0.11%)</title><rect x="85.1133%" y="533" width="0.1059%" height="15" fill="rgb(207,58,43)"/><text x="85.3633%" y="543.50"></text></g><g><title>[unknown] (30 samples, 0.11%)</title><rect x="85.1133%" y="517" width="0.1059%" height="15" fill="rgb(215,193,15)"/><text x="85.3633%" y="527.50"></text></g><g><title>[unknown] (29 samples, 0.10%)</title><rect x="85.1168%" y="501" width="0.1024%" height="15" fill="rgb(232,15,44)"/><text x="85.3668%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (596 samples, 2.10%)</title><rect x="83.1616%" y="757" width="2.1035%" height="15" fill="rgb(212,3,48)"/><text x="83.4116%" y="767.50">a..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (595 samples, 2.10%)</title><rect x="83.1651%" y="741" width="2.1000%" height="15" fill="rgb(218,128,7)"/><text x="83.4151%" y="751.50">a..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (595 samples, 2.10%)</title><rect x="83.1651%" y="725" width="2.1000%" height="15" fill="rgb(226,216,39)"/><text x="83.4151%" y="735.50">a..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (595 samples, 2.10%)</title><rect x="83.1651%" y="709" width="2.1000%" height="15" fill="rgb(243,47,51)"/><text x="83.4151%" y="719.50">a..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (595 samples, 2.10%)</title><rect x="83.1651%" y="693" width="2.1000%" height="15" fill="rgb(241,183,40)"/><text x="83.4151%" y="703.50">a..</text></g><g><title>alloc::raw_vec::finish_grow (595 samples, 2.10%)</title><rect x="83.1651%" y="677" width="2.1000%" height="15" fill="rgb(231,217,32)"/><text x="83.4151%" y="687.50">a..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (595 samples, 2.10%)</title><rect x="83.1651%" y="661" width="2.1000%" height="15" fill="rgb(229,61,38)"/><text x="83.4151%" y="671.50">&lt;..</text></g><g><title>alloc::alloc::Global::grow_impl (595 samples, 2.10%)</title><rect x="83.1651%" y="645" width="2.1000%" height="15" fill="rgb(225,210,5)"/><text x="83.4151%" y="655.50">a..</text></g><g><title>alloc::alloc::realloc (595 samples, 2.10%)</title><rect x="83.1651%" y="629" width="2.1000%" height="15" fill="rgb(231,79,45)"/><text x="83.4151%" y="639.50">a..</text></g><g><title>__GI___libc_realloc (595 samples, 2.10%)</title><rect x="83.1651%" y="613" width="2.1000%" height="15" fill="rgb(224,100,7)"/><text x="83.4151%" y="623.50">_..</text></g><g><title>_int_realloc (595 samples, 2.10%)</title><rect x="83.1651%" y="597" width="2.1000%" height="15" fill="rgb(241,198,18)"/><text x="83.4151%" y="607.50">_..</text></g><g><title>_int_malloc (166 samples, 0.59%)</title><rect x="84.6792%" y="581" width="0.5859%" height="15" fill="rgb(252,97,53)"/><text x="84.9292%" y="591.50"></text></g><g><title>sysmalloc (44 samples, 0.16%)</title><rect x="85.1098%" y="565" width="0.1553%" height="15" fill="rgb(220,88,7)"/><text x="85.3598%" y="575.50"></text></g><g><title>mcts_policy::output_to_queue (635 samples, 2.24%)</title><rect x="83.0980%" y="773" width="2.2411%" height="15" fill="rgb(213,176,14)"/><text x="83.3480%" y="783.50">m..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (40 samples, 0.14%)</title><rect x="85.8686%" y="757" width="0.1412%" height="15" fill="rgb(246,73,7)"/><text x="86.1186%" y="767.50"></text></g><g><title>mcts_policy::queue_to_output (195 samples, 0.69%)</title><rect x="85.3392%" y="773" width="0.6882%" height="15" fill="rgb(245,64,36)"/><text x="85.5892%" y="783.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (33 samples, 0.12%)</title><rect x="86.5250%" y="741" width="0.1165%" height="15" fill="rgb(245,80,10)"/><text x="86.7750%" y="751.50"></text></g><g><title>mcts_policy::queue_to_output (175 samples, 0.62%)</title><rect x="86.0486%" y="757" width="0.6176%" height="15" fill="rgb(232,107,50)"/><text x="86.2986%" y="767.50"></text></g><g><title>mcts_policy::store_state (213 samples, 0.75%)</title><rect x="86.0274%" y="773" width="0.7517%" height="15" fill="rgb(253,3,0)"/><text x="86.2774%" y="783.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (34 samples, 0.12%)</title><rect x="86.8815%" y="693" width="0.1200%" height="15" fill="rgb(212,99,53)"/><text x="87.1315%" y="703.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::parse_number (40 samples, 0.14%)</title><rect x="88.7167%" y="357" width="0.1412%" height="15" fill="rgb(249,111,54)"/><text x="88.9667%" y="367.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::parse_integer (211 samples, 0.74%)</title><rect x="88.1767%" y="373" width="0.7447%" height="15" fill="rgb(249,55,30)"/><text x="88.4267%" y="383.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (314 samples, 1.11%)</title><rect x="87.9015%" y="437" width="1.1082%" height="15" fill="rgb(237,47,42)"/><text x="88.1515%" y="447.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u16&gt;::deserialize (314 samples, 1.11%)</title><rect x="87.9015%" y="421" width="1.1082%" height="15" fill="rgb(211,20,18)"/><text x="88.1515%" y="431.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_u16 (314 samples, 1.11%)</title><rect x="87.9015%" y="405" width="1.1082%" height="15" fill="rgb(231,203,46)"/><text x="88.1515%" y="415.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::deserialize_number (314 samples, 1.11%)</title><rect x="87.9015%" y="389" width="1.1082%" height="15" fill="rgb(237,142,3)"/><text x="88.1515%" y="399.50"></text></g><g><title>&lt;serde::de::impls::ArrayVisitor&lt;[T: 20]&gt; as serde::de::Visitor&gt;::visit_seq (649 samples, 2.29%)</title><rect x="87.3262%" y="485" width="2.2905%" height="15" fill="rgb(241,107,1)"/><text x="87.5762%" y="495.50">&lt;..</text></g><g><title>serde::de::SeqAccess::next_element (582 samples, 2.05%)</title><rect x="87.5626%" y="469" width="2.0541%" height="15" fill="rgb(229,83,13)"/><text x="87.8126%" y="479.50">s..</text></g><g><title>&lt;serde_json::de::SeqAccess&lt;R&gt; as serde::de::SeqAccess&gt;::next_element_seed (582 samples, 2.05%)</title><rect x="87.5626%" y="453" width="2.0541%" height="15" fill="rgb(241,91,40)"/><text x="87.8126%" y="463.50">&lt;..</text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::parse_whitespace (163 samples, 0.58%)</title><rect x="89.0414%" y="437" width="0.5753%" height="15" fill="rgb(225,3,45)"/><text x="89.2914%" y="447.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::peek (118 samples, 0.42%)</title><rect x="89.2003%" y="421" width="0.4165%" height="15" fill="rgb(244,223,14)"/><text x="89.4503%" y="431.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::peek (118 samples, 0.42%)</title><rect x="89.2003%" y="405" width="0.4165%" height="15" fill="rgb(224,124,37)"/><text x="89.4503%" y="415.50"></text></g><g><title>&lt;serde_json::read::SliceRead as serde_json::read::Read&gt;::peek (118 samples, 0.42%)</title><rect x="89.2003%" y="389" width="0.4165%" height="15" fill="rgb(251,171,30)"/><text x="89.4503%" y="399.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for [T: 20]&gt;::deserialize (703 samples, 2.48%)</title><rect x="87.1568%" y="533" width="2.4811%" height="15" fill="rgb(236,46,54)"/><text x="87.4068%" y="543.50">se..</text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_tuple (703 samples, 2.48%)</title><rect x="87.1568%" y="517" width="2.4811%" height="15" fill="rgb(245,213,5)"/><text x="87.4068%" y="527.50">&lt;&amp;..</text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_seq (703 samples, 2.48%)</title><rect x="87.1568%" y="501" width="2.4811%" height="15" fill="rgb(230,144,27)"/><text x="87.4068%" y="511.50">&lt;&amp;..</text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (713 samples, 2.52%)</title><rect x="87.1568%" y="549" width="2.5164%" height="15" fill="rgb(220,86,6)"/><text x="87.4068%" y="559.50">&lt;c..</text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for (T0,T1)&gt;::deserialize::TupleVisitor&lt;T0,T1&gt; as serde::de::Visitor&gt;::visit_seq (749 samples, 2.64%)</title><rect x="87.0403%" y="597" width="2.6435%" height="15" fill="rgb(240,20,13)"/><text x="87.2903%" y="607.50">&lt;s..</text></g><g><title>serde::de::SeqAccess::next_element (730 samples, 2.58%)</title><rect x="87.1074%" y="581" width="2.5764%" height="15" fill="rgb(217,89,34)"/><text x="87.3574%" y="591.50">se..</text></g><g><title>&lt;serde_json::de::SeqAccess&lt;R&gt; as serde::de::SeqAccess&gt;::next_element_seed (730 samples, 2.58%)</title><rect x="87.1074%" y="565" width="2.5764%" height="15" fill="rgb(229,13,5)"/><text x="87.3574%" y="575.50">&lt;s..</text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for (T0,T1)&gt;::deserialize (756 samples, 2.67%)</title><rect x="87.0297%" y="645" width="2.6682%" height="15" fill="rgb(244,67,35)"/><text x="87.2797%" y="655.50">se..</text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_tuple (756 samples, 2.67%)</title><rect x="87.0297%" y="629" width="2.6682%" height="15" fill="rgb(221,40,2)"/><text x="87.2797%" y="639.50">&lt;&amp;..</text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_seq (756 samples, 2.67%)</title><rect x="87.0297%" y="613" width="2.6682%" height="15" fill="rgb(237,157,21)"/><text x="87.2797%" y="623.50">&lt;&amp;..</text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (794 samples, 2.80%)</title><rect x="87.0297%" y="661" width="2.8023%" height="15" fill="rgb(222,94,11)"/><text x="87.2797%" y="671.50">&lt;c..</text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for (T0,T1,T2,T3)&gt;::deserialize (38 samples, 0.13%)</title><rect x="89.6979%" y="645" width="0.1341%" height="15" fill="rgb(249,113,6)"/><text x="89.9479%" y="655.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_tuple (38 samples, 0.13%)</title><rect x="89.6979%" y="629" width="0.1341%" height="15" fill="rgb(238,137,36)"/><text x="89.9479%" y="639.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_seq (38 samples, 0.13%)</title><rect x="89.6979%" y="613" width="0.1341%" height="15" fill="rgb(210,102,26)"/><text x="89.9479%" y="623.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for (T0,T1,T2,T3)&gt;::deserialize::TupleVisitor&lt;T0,T1,T2,T3&gt; as serde::de::Visitor&gt;::visit_seq (38 samples, 0.13%)</title><rect x="89.6979%" y="597" width="0.1341%" height="15" fill="rgb(218,30,30)"/><text x="89.9479%" y="607.50"></text></g><g><title>serde::de::SeqAccess::next_element (37 samples, 0.13%)</title><rect x="89.7014%" y="581" width="0.1306%" height="15" fill="rgb(214,67,26)"/><text x="89.9514%" y="591.50"></text></g><g><title>&lt;serde_json::de::SeqAccess&lt;R&gt; as serde::de::SeqAccess&gt;::next_element_seed (37 samples, 0.13%)</title><rect x="89.7014%" y="565" width="0.1306%" height="15" fill="rgb(251,9,53)"/><text x="89.9514%" y="575.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (36 samples, 0.13%)</title><rect x="89.7049%" y="549" width="0.1271%" height="15" fill="rgb(228,204,25)"/><text x="89.9549%" y="559.50"></text></g><g><title>serde_json::de::from_str (852 samples, 3.01%)</title><rect x="86.8391%" y="773" width="3.0070%" height="15" fill="rgb(207,153,8)"/><text x="87.0891%" y="783.50">ser..</text></g><g><title>serde_json::de::from_trait (852 samples, 3.01%)</title><rect x="86.8391%" y="757" width="3.0070%" height="15" fill="rgb(242,9,16)"/><text x="87.0891%" y="767.50">ser..</text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize (852 samples, 3.01%)</title><rect x="86.8391%" y="741" width="3.0070%" height="15" fill="rgb(217,211,10)"/><text x="87.0891%" y="751.50">ser..</text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_seq (852 samples, 3.01%)</title><rect x="86.8391%" y="725" width="3.0070%" height="15" fill="rgb(219,228,52)"/><text x="87.0891%" y="735.50">&lt;&amp;m..</text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (852 samples, 3.01%)</title><rect x="86.8391%" y="709" width="3.0070%" height="15" fill="rgb(231,92,29)"/><text x="87.0891%" y="719.50">&lt;se..</text></g><g><title>serde::de::SeqAccess::next_element (806 samples, 2.84%)</title><rect x="87.0015%" y="693" width="2.8446%" height="15" fill="rgb(232,8,23)"/><text x="87.2515%" y="703.50">se..</text></g><g><title>&lt;serde_json::de::SeqAccess&lt;R&gt; as serde::de::SeqAccess&gt;::next_element_seed (804 samples, 2.84%)</title><rect x="87.0085%" y="677" width="2.8376%" height="15" fill="rgb(216,211,34)"/><text x="87.2585%" y="687.50">&lt;s..</text></g><g><title>std::fs::read_to_string (199 samples, 0.70%)</title><rect x="89.9202%" y="773" width="0.7023%" height="15" fill="rgb(236,151,0)"/><text x="90.1702%" y="783.50"></text></g><g><title>std::fs::read_to_string::inner (199 samples, 0.70%)</title><rect x="89.9202%" y="757" width="0.7023%" height="15" fill="rgb(209,168,3)"/><text x="90.1702%" y="767.50"></text></g><g><title>std::io::Read::read_to_string (199 samples, 0.70%)</title><rect x="89.9202%" y="741" width="0.7023%" height="15" fill="rgb(208,129,28)"/><text x="90.1702%" y="751.50"></text></g><g><title>std::io::append_to_string (199 samples, 0.70%)</title><rect x="89.9202%" y="725" width="0.7023%" height="15" fill="rgb(229,78,22)"/><text x="90.1702%" y="735.50"></text></g><g><title>std::io::Read::read_to_string::{{closure}} (185 samples, 0.65%)</title><rect x="89.9696%" y="709" width="0.6529%" height="15" fill="rgb(228,187,13)"/><text x="90.2196%" y="719.50"></text></g><g><title>std::io::read_to_end (185 samples, 0.65%)</title><rect x="89.9696%" y="693" width="0.6529%" height="15" fill="rgb(240,119,24)"/><text x="90.2196%" y="703.50"></text></g><g><title>std::io::read_to_end_with_reservation (185 samples, 0.65%)</title><rect x="89.9696%" y="677" width="0.6529%" height="15" fill="rgb(209,194,42)"/><text x="90.2196%" y="687.50"></text></g><g><title>&lt;std::fs::File as std::io::Read&gt;::read (185 samples, 0.65%)</title><rect x="89.9696%" y="661" width="0.6529%" height="15" fill="rgb(247,200,46)"/><text x="90.2196%" y="671.50"></text></g><g><title>std::sys::unix::fs::File::read (185 samples, 0.65%)</title><rect x="89.9696%" y="645" width="0.6529%" height="15" fill="rgb(218,76,16)"/><text x="90.2196%" y="655.50"></text></g><g><title>std::sys::unix::fd::FileDesc::read (185 samples, 0.65%)</title><rect x="89.9696%" y="629" width="0.6529%" height="15" fill="rgb(225,21,48)"/><text x="90.2196%" y="639.50"></text></g><g><title>__libc_read (185 samples, 0.65%)</title><rect x="89.9696%" y="613" width="0.6529%" height="15" fill="rgb(239,223,50)"/><text x="90.2196%" y="623.50"></text></g><g><title>__libc_read (185 samples, 0.65%)</title><rect x="89.9696%" y="597" width="0.6529%" height="15" fill="rgb(244,45,21)"/><text x="90.2196%" y="607.50"></text></g><g><title>[unknown] (185 samples, 0.65%)</title><rect x="89.9696%" y="581" width="0.6529%" height="15" fill="rgb(232,33,43)"/><text x="90.2196%" y="591.50"></text></g><g><title>[unknown] (185 samples, 0.65%)</title><rect x="89.9696%" y="565" width="0.6529%" height="15" fill="rgb(209,8,3)"/><text x="90.2196%" y="575.50"></text></g><g><title>[unknown] (185 samples, 0.65%)</title><rect x="89.9696%" y="549" width="0.6529%" height="15" fill="rgb(214,25,53)"/><text x="90.2196%" y="559.50"></text></g><g><title>[unknown] (185 samples, 0.65%)</title><rect x="89.9696%" y="533" width="0.6529%" height="15" fill="rgb(254,186,54)"/><text x="90.2196%" y="543.50"></text></g><g><title>[unknown] (185 samples, 0.65%)</title><rect x="89.9696%" y="517" width="0.6529%" height="15" fill="rgb(208,174,49)"/><text x="90.2196%" y="527.50"></text></g><g><title>[unknown] (185 samples, 0.65%)</title><rect x="89.9696%" y="501" width="0.6529%" height="15" fill="rgb(233,191,51)"/><text x="90.2196%" y="511.50"></text></g><g><title>[unknown] (185 samples, 0.65%)</title><rect x="89.9696%" y="485" width="0.6529%" height="15" fill="rgb(222,134,10)"/><text x="90.2196%" y="495.50"></text></g><g><title>[unknown] (185 samples, 0.65%)</title><rect x="89.9696%" y="469" width="0.6529%" height="15" fill="rgb(230,226,20)"/><text x="90.2196%" y="479.50"></text></g><g><title>[unknown] (185 samples, 0.65%)</title><rect x="89.9696%" y="453" width="0.6529%" height="15" fill="rgb(251,111,25)"/><text x="90.2196%" y="463.50"></text></g><g><title>[unknown] (185 samples, 0.65%)</title><rect x="89.9696%" y="437" width="0.6529%" height="15" fill="rgb(224,40,46)"/><text x="90.2196%" y="447.50"></text></g><g><title>[unknown] (185 samples, 0.65%)</title><rect x="89.9696%" y="421" width="0.6529%" height="15" fill="rgb(236,108,47)"/><text x="90.2196%" y="431.50"></text></g><g><title>[unknown] (182 samples, 0.64%)</title><rect x="89.9802%" y="405" width="0.6423%" height="15" fill="rgb(234,93,0)"/><text x="90.2302%" y="415.50"></text></g><g><title>[unknown] (88 samples, 0.31%)</title><rect x="90.3120%" y="389" width="0.3106%" height="15" fill="rgb(224,213,32)"/><text x="90.5620%" y="399.50"></text></g><g><title>[unknown] (85 samples, 0.30%)</title><rect x="90.3226%" y="373" width="0.3000%" height="15" fill="rgb(251,11,48)"/><text x="90.5726%" y="383.50"></text></g><g><title>[unknown] (85 samples, 0.30%)</title><rect x="90.3226%" y="357" width="0.3000%" height="15" fill="rgb(236,173,5)"/><text x="90.5726%" y="367.50"></text></g><g><title>[unknown] (85 samples, 0.30%)</title><rect x="90.3226%" y="341" width="0.3000%" height="15" fill="rgb(230,95,12)"/><text x="90.5726%" y="351.50"></text></g><g><title>[unknown] (80 samples, 0.28%)</title><rect x="90.3402%" y="325" width="0.2823%" height="15" fill="rgb(232,209,1)"/><text x="90.5902%" y="335.50"></text></g><g><title>[unknown] (77 samples, 0.27%)</title><rect x="90.3508%" y="309" width="0.2718%" height="15" fill="rgb(232,6,1)"/><text x="90.6008%" y="319.50"></text></g><g><title>[unknown] (57 samples, 0.20%)</title><rect x="90.4214%" y="293" width="0.2012%" height="15" fill="rgb(210,224,50)"/><text x="90.6714%" y="303.50"></text></g><g><title>[unknown] (51 samples, 0.18%)</title><rect x="90.4426%" y="277" width="0.1800%" height="15" fill="rgb(228,127,35)"/><text x="90.6926%" y="287.50"></text></g><g><title>[unknown] (44 samples, 0.16%)</title><rect x="90.4673%" y="261" width="0.1553%" height="15" fill="rgb(245,102,45)"/><text x="90.7173%" y="271.50"></text></g><g><title>[unknown] (31 samples, 0.11%)</title><rect x="90.5132%" y="245" width="0.1094%" height="15" fill="rgb(214,1,49)"/><text x="90.7632%" y="255.50"></text></g><g><title>mcts_policy::main (22,810 samples, 80.50%)</title><rect x="10.1751%" y="789" width="80.5040%" height="15" fill="rgb(226,163,40)"/><text x="10.4251%" y="799.50">mcts_policy::main</text></g><g><title>[libcuda.so.460.91.03] (73 samples, 0.26%)</title><rect x="92.7578%" y="165" width="0.2576%" height="15" fill="rgb(239,212,28)"/><text x="93.0078%" y="175.50"></text></g><g><title>[libcuda.so.460.91.03] (65 samples, 0.23%)</title><rect x="92.7861%" y="149" width="0.2294%" height="15" fill="rgb(220,20,13)"/><text x="93.0361%" y="159.50"></text></g><g><title>[libcuda.so.460.91.03] (87 samples, 0.31%)</title><rect x="92.7155%" y="181" width="0.3071%" height="15" fill="rgb(210,164,35)"/><text x="92.9655%" y="191.50"></text></g><g><title>[unknown] (91 samples, 0.32%)</title><rect x="93.0225%" y="181" width="0.3212%" height="15" fill="rgb(248,109,41)"/><text x="93.2725%" y="191.50"></text></g><g><title>[unknown] (79 samples, 0.28%)</title><rect x="93.0649%" y="165" width="0.2788%" height="15" fill="rgb(238,23,50)"/><text x="93.3149%" y="175.50"></text></g><g><title>[unknown] (60 samples, 0.21%)</title><rect x="93.1319%" y="149" width="0.2118%" height="15" fill="rgb(211,48,49)"/><text x="93.3819%" y="159.50"></text></g><g><title>[unknown] (59 samples, 0.21%)</title><rect x="93.1355%" y="133" width="0.2082%" height="15" fill="rgb(223,36,21)"/><text x="93.3855%" y="143.50"></text></g><g><title>[unknown] (58 samples, 0.20%)</title><rect x="93.1390%" y="117" width="0.2047%" height="15" fill="rgb(207,123,46)"/><text x="93.3890%" y="127.50"></text></g><g><title>[unknown] (54 samples, 0.19%)</title><rect x="93.1531%" y="101" width="0.1906%" height="15" fill="rgb(240,218,32)"/><text x="93.4031%" y="111.50"></text></g><g><title>[unknown] (52 samples, 0.18%)</title><rect x="93.1602%" y="85" width="0.1835%" height="15" fill="rgb(252,5,43)"/><text x="93.4102%" y="95.50"></text></g><g><title>[unknown] (49 samples, 0.17%)</title><rect x="93.1707%" y="69" width="0.1729%" height="15" fill="rgb(252,84,19)"/><text x="93.4207%" y="79.50"></text></g><g><title>[unknown] (37 samples, 0.13%)</title><rect x="93.2131%" y="53" width="0.1306%" height="15" fill="rgb(243,152,39)"/><text x="93.4631%" y="63.50"></text></g><g><title>[unknown] (30 samples, 0.11%)</title><rect x="93.2378%" y="37" width="0.1059%" height="15" fill="rgb(234,160,15)"/><text x="93.4878%" y="47.50"></text></g><g><title>[libcuda.so.460.91.03] (506 samples, 1.79%)</title><rect x="91.6637%" y="197" width="1.7858%" height="15" fill="rgb(237,34,20)"/><text x="91.9137%" y="207.50">[..</text></g><g><title>__memcpy_sse2_unaligned_erms (88 samples, 0.31%)</title><rect x="93.5378%" y="197" width="0.3106%" height="15" fill="rgb(229,97,13)"/><text x="93.7878%" y="207.50"></text></g><g><title>[unknown] (36 samples, 0.13%)</title><rect x="93.7213%" y="181" width="0.1271%" height="15" fill="rgb(234,71,50)"/><text x="93.9713%" y="191.50"></text></g><g><title>[unknown] (31 samples, 0.11%)</title><rect x="93.7390%" y="165" width="0.1094%" height="15" fill="rgb(253,155,4)"/><text x="93.9890%" y="175.50"></text></g><g><title>[libcuda.so.460.91.03] (814 samples, 2.87%)</title><rect x="90.9967%" y="213" width="2.8729%" height="15" fill="rgb(222,185,37)"/><text x="91.2467%" y="223.50">[l..</text></g><g><title>__GI___libc_malloc (36 samples, 0.13%)</title><rect x="93.9013%" y="213" width="0.1271%" height="15" fill="rgb(251,177,13)"/><text x="94.1513%" y="223.50"></text></g><g><title>_int_malloc (33 samples, 0.12%)</title><rect x="93.9119%" y="197" width="0.1165%" height="15" fill="rgb(250,179,40)"/><text x="94.1619%" y="207.50"></text></g><g><title>[libcuda.so.460.91.03] (1,062 samples, 3.75%)</title><rect x="90.8096%" y="229" width="3.7481%" height="15" fill="rgb(242,44,2)"/><text x="91.0596%" y="239.50">[lib..</text></g><g><title>__memcpy_sse2_unaligned_erms (121 samples, 0.43%)</title><rect x="94.1307%" y="213" width="0.4270%" height="15" fill="rgb(216,177,13)"/><text x="94.3807%" y="223.50"></text></g><g><title>[unknown] (54 samples, 0.19%)</title><rect x="94.3672%" y="197" width="0.1906%" height="15" fill="rgb(216,106,43)"/><text x="94.6172%" y="207.50"></text></g><g><title>[unknown] (46 samples, 0.16%)</title><rect x="94.3954%" y="181" width="0.1623%" height="15" fill="rgb(216,183,2)"/><text x="94.6454%" y="191.50"></text></g><g><title>[unknown] (38 samples, 0.13%)</title><rect x="94.4237%" y="165" width="0.1341%" height="15" fill="rgb(249,75,3)"/><text x="94.6737%" y="175.50"></text></g><g><title>[unknown] (38 samples, 0.13%)</title><rect x="94.4237%" y="149" width="0.1341%" height="15" fill="rgb(219,67,39)"/><text x="94.6737%" y="159.50"></text></g><g><title>[unknown] (36 samples, 0.13%)</title><rect x="94.4307%" y="133" width="0.1271%" height="15" fill="rgb(253,228,2)"/><text x="94.6807%" y="143.50"></text></g><g><title>[unknown] (34 samples, 0.12%)</title><rect x="94.4378%" y="117" width="0.1200%" height="15" fill="rgb(235,138,27)"/><text x="94.6878%" y="127.50"></text></g><g><title>[unknown] (33 samples, 0.12%)</title><rect x="94.4413%" y="101" width="0.1165%" height="15" fill="rgb(236,97,51)"/><text x="94.6913%" y="111.50"></text></g><g><title>[unknown] (32 samples, 0.11%)</title><rect x="94.4448%" y="85" width="0.1129%" height="15" fill="rgb(240,80,30)"/><text x="94.6948%" y="95.50"></text></g><g><title>[unknown] (31 samples, 0.11%)</title><rect x="94.4484%" y="69" width="0.1094%" height="15" fill="rgb(230,178,19)"/><text x="94.6984%" y="79.50"></text></g><g><title>[unknown] (30 samples, 0.11%)</title><rect x="94.4519%" y="53" width="0.1059%" height="15" fill="rgb(210,190,27)"/><text x="94.7019%" y="63.50"></text></g><g><title>__memcpy_sse2_unaligned_erms (238 samples, 0.84%)</title><rect x="94.5719%" y="229" width="0.8400%" height="15" fill="rgb(222,107,31)"/><text x="94.8219%" y="239.50"></text></g><g><title>[unknown] (138 samples, 0.49%)</title><rect x="94.9248%" y="213" width="0.4870%" height="15" fill="rgb(216,127,34)"/><text x="95.1748%" y="223.50"></text></g><g><title>[unknown] (117 samples, 0.41%)</title><rect x="94.9989%" y="197" width="0.4129%" height="15" fill="rgb(234,116,52)"/><text x="95.2489%" y="207.50"></text></g><g><title>[unknown] (94 samples, 0.33%)</title><rect x="95.0801%" y="181" width="0.3318%" height="15" fill="rgb(222,124,15)"/><text x="95.3301%" y="191.50"></text></g><g><title>[unknown] (94 samples, 0.33%)</title><rect x="95.0801%" y="165" width="0.3318%" height="15" fill="rgb(231,179,28)"/><text x="95.3301%" y="175.50"></text></g><g><title>[unknown] (92 samples, 0.32%)</title><rect x="95.0872%" y="149" width="0.3247%" height="15" fill="rgb(226,93,45)"/><text x="95.3372%" y="159.50"></text></g><g><title>[unknown] (87 samples, 0.31%)</title><rect x="95.1048%" y="133" width="0.3071%" height="15" fill="rgb(215,8,51)"/><text x="95.3548%" y="143.50"></text></g><g><title>[unknown] (83 samples, 0.29%)</title><rect x="95.1189%" y="117" width="0.2929%" height="15" fill="rgb(223,106,5)"/><text x="95.3689%" y="127.50"></text></g><g><title>[unknown] (74 samples, 0.26%)</title><rect x="95.1507%" y="101" width="0.2612%" height="15" fill="rgb(250,191,5)"/><text x="95.4007%" y="111.50"></text></g><g><title>[unknown] (72 samples, 0.25%)</title><rect x="95.1578%" y="85" width="0.2541%" height="15" fill="rgb(242,132,44)"/><text x="95.4078%" y="95.50"></text></g><g><title>[unknown] (64 samples, 0.23%)</title><rect x="95.1860%" y="69" width="0.2259%" height="15" fill="rgb(251,152,29)"/><text x="95.4360%" y="79.50"></text></g><g><title>[unknown] (53 samples, 0.19%)</title><rect x="95.2248%" y="53" width="0.1871%" height="15" fill="rgb(218,179,5)"/><text x="95.4748%" y="63.50"></text></g><g><title>[libcuda.so.460.91.03] (1,309 samples, 4.62%)</title><rect x="90.7955%" y="293" width="4.6199%" height="15" fill="rgb(227,67,19)"/><text x="91.0455%" y="303.50">[libc..</text></g><g><title>[libcuda.so.460.91.03] (1,309 samples, 4.62%)</title><rect x="90.7955%" y="277" width="4.6199%" height="15" fill="rgb(233,119,31)"/><text x="91.0455%" y="287.50">[libc..</text></g><g><title>[libcuda.so.460.91.03] (1,309 samples, 4.62%)</title><rect x="90.7955%" y="261" width="4.6199%" height="15" fill="rgb(241,120,22)"/><text x="91.0455%" y="271.50">[libc..</text></g><g><title>[libcuda.so.460.91.03] (1,309 samples, 4.62%)</title><rect x="90.7955%" y="245" width="4.6199%" height="15" fill="rgb(224,102,30)"/><text x="91.0455%" y="255.50">[libc..</text></g><g><title>[libcudart-6d56b25a.so.11.0] (1,360 samples, 4.80%)</title><rect x="90.6896%" y="309" width="4.7999%" height="15" fill="rgb(210,164,37)"/><text x="90.9396%" y="319.50">[libcu..</text></g><g><title>mcts_policy::neural_net::Net::new (1,364 samples, 4.81%)</title><rect x="90.6790%" y="789" width="4.8140%" height="15" fill="rgb(226,191,16)"/><text x="90.9290%" y="799.50">mcts_p..</text></g><g><title>tch::nn::conv::conv2d (1,364 samples, 4.81%)</title><rect x="90.6790%" y="773" width="4.8140%" height="15" fill="rgb(214,40,45)"/><text x="90.9290%" y="783.50">tch::n..</text></g><g><title>tch::nn::conv::Create::conv (1,364 samples, 4.81%)</title><rect x="90.6790%" y="757" width="4.8140%" height="15" fill="rgb(244,29,26)"/><text x="90.9290%" y="767.50">tch::n..</text></g><g><title>tch::nn::conv::conv (1,364 samples, 4.81%)</title><rect x="90.6790%" y="741" width="4.8140%" height="15" fill="rgb(216,16,5)"/><text x="90.9290%" y="751.50">tch::n..</text></g><g><title>tch::nn::var_store::Path::var (1,364 samples, 4.81%)</title><rect x="90.6790%" y="725" width="4.8140%" height="15" fill="rgb(249,76,35)"/><text x="90.9290%" y="735.50">tch::n..</text></g><g><title>tch::nn::var_store::Path::f_var (1,364 samples, 4.81%)</title><rect x="90.6790%" y="709" width="4.8140%" height="15" fill="rgb(207,11,44)"/><text x="90.9290%" y="719.50">tch::n..</text></g><g><title>tch::nn::init::f_init (1,364 samples, 4.81%)</title><rect x="90.6790%" y="693" width="4.8140%" height="15" fill="rgb(228,190,49)"/><text x="90.9290%" y="703.50">tch::n..</text></g><g><title>tch::wrappers::tensor_fallible_generated::&lt;impl tch::wrappers::tensor::Tensor&gt;::f_zeros (1,364 samples, 4.81%)</title><rect x="90.6790%" y="677" width="4.8140%" height="15" fill="rgb(214,173,12)"/><text x="90.9290%" y="687.50">tch::w..</text></g><g><title>atg_zeros (1,364 samples, 4.81%)</title><rect x="90.6790%" y="661" width="4.8140%" height="15" fill="rgb(218,26,35)"/><text x="90.9290%" y="671.50">atg_ze..</text></g><g><title>torch::zeros (1,364 samples, 4.81%)</title><rect x="90.6790%" y="645" width="4.8140%" height="15" fill="rgb(220,200,19)"/><text x="90.9290%" y="655.50">torch:..</text></g><g><title>at::zeros (1,364 samples, 4.81%)</title><rect x="90.6790%" y="629" width="4.8140%" height="15" fill="rgb(239,95,49)"/><text x="90.9290%" y="639.50">at::ze..</text></g><g><title>c10::impl::wrap_kernel_functor_unboxed_&lt;c10::impl::detail::WrapFunctionIntoFunctor_&lt;c10::CompileTimeFunctionPointer&lt;at::Tensor (c10::ArrayRef&lt;long&gt;, c10::optional&lt;c10::ScalarType&gt;, c10::optional&lt;c10::Layout&gt;, c10::optional&lt;c10::Device&gt;, c10::optional&lt;bool&gt;), &amp;at::(anonymous namespace)::zeros&gt;, at::Tensor, c10::guts::typelist::typelist&lt;c10::ArrayRef&lt;long&gt;, c10::optional&lt;c10::ScalarType&gt;, c10::optional&lt;c10::Layout&gt;, c10::optional&lt;c10::Device&gt;, c10::optional&lt;bool&gt; &gt; &gt;, at::Tensor (c10::ArrayRef&lt;long&gt;, c10::optional&lt;c10::ScalarType&gt;, c10::optional&lt;c10::Layout&gt;, c10::optional&lt;c10::Device&gt;, c10::optional&lt;bool&gt;)&gt;::call (1,364 samples, 4.81%)</title><rect x="90.6790%" y="613" width="4.8140%" height="15" fill="rgb(235,85,53)"/><text x="90.9290%" y="623.50">c10::i..</text></g><g><title>c10::Dispatcher::redispatch&lt;at::Tensor, c10::ArrayRef&lt;long&gt;, c10::optional&lt;c10::ScalarType&gt;, c10::optional&lt;c10::Layout&gt;, c10::optional&lt;c10::Device&gt;, c10::optional&lt;bool&gt; &gt; (1,364 samples, 4.81%)</title><rect x="90.6790%" y="597" width="4.8140%" height="15" fill="rgb(233,133,31)"/><text x="90.9290%" y="607.50">c10::D..</text></g><g><title>c10::impl::wrap_kernel_functor_unboxed_&lt;c10::impl::detail::WrapFunctionIntoFunctor_&lt;c10::CompileTimeFunctionPointer&lt;at::Tensor (c10::ArrayRef&lt;long&gt;, c10::optional&lt;c10::ScalarType&gt;, c10::optional&lt;c10::Layout&gt;, c10::optional&lt;c10::Device&gt;, c10::optional&lt;bool&gt;), &amp;at::(anonymous namespace)::(anonymous namespace)::wrapper_zeros&gt;, at::Tensor, c10::guts::typelist::typelist&lt;c10::ArrayRef&lt;long&gt;, c10::optional&lt;c10::ScalarType&gt;, c10::optional&lt;c10::Layout&gt;, c10::optional&lt;c10::Device&gt;, c10::optional&lt;bool&gt; &gt; &gt;, at::Tensor (c10::ArrayRef&lt;long&gt;, c10::optional&lt;c10::ScalarType&gt;, c10::optional&lt;c10::Layout&gt;, c10::optional&lt;c10::Device&gt;, c10::optional&lt;bool&gt;)&gt;::call (1,364 samples, 4.81%)</title><rect x="90.6790%" y="581" width="4.8140%" height="15" fill="rgb(218,25,20)"/><text x="90.9290%" y="591.50">c10::i..</text></g><g><title>at::native::zeros (1,364 samples, 4.81%)</title><rect x="90.6790%" y="565" width="4.8140%" height="15" fill="rgb(252,210,38)"/><text x="90.9290%" y="575.50">at::na..</text></g><g><title>at::empty (1,364 samples, 4.81%)</title><rect x="90.6790%" y="549" width="4.8140%" height="15" fill="rgb(242,134,21)"/><text x="90.9290%" y="559.50">at::em..</text></g><g><title>c10::impl::wrap_kernel_functor_unboxed_&lt;c10::impl::detail::WrapFunctionIntoFunctor_&lt;c10::CompileTimeFunctionPointer&lt;at::Tensor (c10::ArrayRef&lt;long&gt;, c10::optional&lt;c10::ScalarType&gt;, c10::optional&lt;c10::Layout&gt;, c10::optional&lt;c10::Device&gt;, c10::optional&lt;bool&gt;, c10::optional&lt;c10::MemoryFormat&gt;), &amp;at::(anonymous namespace)::empty_memory_format&gt;, at::Tensor, c10::guts::typelist::typelist&lt;c10::ArrayRef&lt;long&gt;, c10::optional&lt;c10::ScalarType&gt;, c10::optional&lt;c10::Layout&gt;, c10::optional&lt;c10::Device&gt;, c10::optional&lt;bool&gt;, c10::optional&lt;c10::MemoryFormat&gt; &gt; &gt;, at::Tensor (c10::ArrayRef&lt;long&gt;, c10::optional&lt;c10::ScalarType&gt;, c10::optional&lt;c10::Layout&gt;, c10::optional&lt;c10::Device&gt;, c10::optional&lt;bool&gt;, c10::optional&lt;c10::MemoryFormat&gt;)&gt;::call (1,364 samples, 4.81%)</title><rect x="90.6790%" y="533" width="4.8140%" height="15" fill="rgb(213,28,48)"/><text x="90.9290%" y="543.50">c10::i..</text></g><g><title>c10::impl::wrap_kernel_functor_unboxed_&lt;c10::impl::detail::WrapFunctionIntoFunctor_&lt;c10::CompileTimeFunctionPointer&lt;at::Tensor (c10::ArrayRef&lt;long&gt;, c10::optional&lt;c10::ScalarType&gt;, c10::optional&lt;c10::Layout&gt;, c10::optional&lt;c10::Device&gt;, c10::optional&lt;bool&gt;, c10::optional&lt;c10::MemoryFormat&gt;), &amp;at::(anonymous namespace)::(anonymous namespace)::wrapper_empty_memory_format&gt;, at::Tensor, c10::guts::typelist::typelist&lt;c10::ArrayRef&lt;long&gt;, c10::optional&lt;c10::ScalarType&gt;, c10::optional&lt;c10::Layout&gt;, c10::optional&lt;c10::Device&gt;, c10::optional&lt;bool&gt;, c10::optional&lt;c10::MemoryFormat&gt; &gt; &gt;, at::Tensor (c10::ArrayRef&lt;long&gt;, c10::optional&lt;c10::ScalarType&gt;, c10::optional&lt;c10::Layout&gt;, c10::optional&lt;c10::Device&gt;, c10::optional&lt;bool&gt;, c10::optional&lt;c10::MemoryFormat&gt;)&gt;::call (1,364 samples, 4.81%)</title><rect x="90.6790%" y="517" width="4.8140%" height="15" fill="rgb(250,196,2)"/><text x="90.9290%" y="527.50">c10::i..</text></g><g><title>at::(anonymous namespace)::(anonymous namespace)::wrapper_empty_memory_format (1,364 samples, 4.81%)</title><rect x="90.6790%" y="501" width="4.8140%" height="15" fill="rgb(227,5,17)"/><text x="90.9290%" y="511.50">at::(a..</text></g><g><title>at::native::empty_cuda (1,364 samples, 4.81%)</title><rect x="90.6790%" y="485" width="4.8140%" height="15" fill="rgb(221,226,24)"/><text x="90.9290%" y="495.50">at::na..</text></g><g><title>c10::cuda::CUDACachingAllocator::CudaCachingAllocator::allocate (1,364 samples, 4.81%)</title><rect x="90.6790%" y="469" width="4.8140%" height="15" fill="rgb(211,5,48)"/><text x="90.9290%" y="479.50">c10::c..</text></g><g><title>c10::cuda::CUDACachingAllocator::THCCachingAllocator::malloc (1,364 samples, 4.81%)</title><rect x="90.6790%" y="453" width="4.8140%" height="15" fill="rgb(219,150,6)"/><text x="90.9290%" y="463.50">c10::c..</text></g><g><title>c10::cuda::CUDACachingAllocator::DeviceCachingAllocator::malloc (1,364 samples, 4.81%)</title><rect x="90.6790%" y="437" width="4.8140%" height="15" fill="rgb(251,46,16)"/><text x="90.9290%" y="447.50">c10::c..</text></g><g><title>c10::cuda::CUDACachingAllocator::DeviceCachingAllocator::alloc_block (1,364 samples, 4.81%)</title><rect x="90.6790%" y="421" width="4.8140%" height="15" fill="rgb(220,204,40)"/><text x="90.9290%" y="431.50">c10::c..</text></g><g><title>cudaStreamIsCapturing (1,364 samples, 4.81%)</title><rect x="90.6790%" y="405" width="4.8140%" height="15" fill="rgb(211,85,2)"/><text x="90.9290%" y="415.50">cudaSt..</text></g><g><title>[libcudart-6d56b25a.so.11.0] (1,364 samples, 4.81%)</title><rect x="90.6790%" y="389" width="4.8140%" height="15" fill="rgb(229,17,7)"/><text x="90.9290%" y="399.50">[libcu..</text></g><g><title>[libcudart-6d56b25a.so.11.0] (1,364 samples, 4.81%)</title><rect x="90.6790%" y="373" width="4.8140%" height="15" fill="rgb(239,72,28)"/><text x="90.9290%" y="383.50">[libcu..</text></g><g><title>[libcudart-6d56b25a.so.11.0] (1,364 samples, 4.81%)</title><rect x="90.6790%" y="357" width="4.8140%" height="15" fill="rgb(230,47,54)"/><text x="90.9290%" y="367.50">[libcu..</text></g><g><title>[libcudart-6d56b25a.so.11.0] (1,364 samples, 4.81%)</title><rect x="90.6790%" y="341" width="4.8140%" height="15" fill="rgb(214,50,8)"/><text x="90.9290%" y="351.50">[libcu..</text></g><g><title>[libcudart-6d56b25a.so.11.0] (1,364 samples, 4.81%)</title><rect x="90.6790%" y="325" width="4.8140%" height="15" fill="rgb(216,198,43)"/><text x="90.9290%" y="335.50">[libcu..</text></g><g><title>[libcuda.so.460.91.03] (176 samples, 0.62%)</title><rect x="95.6660%" y="213" width="0.6212%" height="15" fill="rgb(234,20,35)"/><text x="95.9160%" y="223.50"></text></g><g><title>[libcuda.so.460.91.03] (205 samples, 0.72%)</title><rect x="95.6413%" y="229" width="0.7235%" height="15" fill="rgb(254,45,19)"/><text x="95.8913%" y="239.50"></text></g><g><title>tch::nn::conv::conv2d (215 samples, 0.76%)</title><rect x="95.6413%" y="789" width="0.7588%" height="15" fill="rgb(219,14,44)"/><text x="95.8913%" y="799.50"></text></g><g><title>tch::nn::conv::Create::conv (215 samples, 0.76%)</title><rect x="95.6413%" y="773" width="0.7588%" height="15" fill="rgb(217,220,26)"/><text x="95.8913%" y="783.50"></text></g><g><title>tch::nn::conv::conv (215 samples, 0.76%)</title><rect x="95.6413%" y="757" width="0.7588%" height="15" fill="rgb(213,158,28)"/><text x="95.8913%" y="767.50"></text></g><g><title>tch::nn::var_store::Path::var (215 samples, 0.76%)</title><rect x="95.6413%" y="741" width="0.7588%" height="15" fill="rgb(252,51,52)"/><text x="95.8913%" y="751.50"></text></g><g><title>tch::nn::var_store::Path::f_var (215 samples, 0.76%)</title><rect x="95.6413%" y="725" width="0.7588%" height="15" fill="rgb(246,89,16)"/><text x="95.8913%" y="735.50"></text></g><g><title>tch::nn::init::f_init (215 samples, 0.76%)</title><rect x="95.6413%" y="709" width="0.7588%" height="15" fill="rgb(216,158,49)"/><text x="95.8913%" y="719.50"></text></g><g><title>tch::wrappers::tensor_fallible_generated::&lt;impl tch::wrappers::tensor::Tensor&gt;::f_zeros (215 samples, 0.76%)</title><rect x="95.6413%" y="693" width="0.7588%" height="15" fill="rgb(236,107,19)"/><text x="95.8913%" y="703.50"></text></g><g><title>atg_zeros (215 samples, 0.76%)</title><rect x="95.6413%" y="677" width="0.7588%" height="15" fill="rgb(228,185,30)"/><text x="95.8913%" y="687.50"></text></g><g><title>torch::zeros (215 samples, 0.76%)</title><rect x="95.6413%" y="661" width="0.7588%" height="15" fill="rgb(246,134,8)"/><text x="95.8913%" y="671.50"></text></g><g><title>at::zeros (215 samples, 0.76%)</title><rect x="95.6413%" y="645" width="0.7588%" height="15" fill="rgb(214,143,50)"/><text x="95.8913%" y="655.50"></text></g><g><title>c10::impl::wrap_kernel_functor_unboxed_&lt;c10::impl::detail::WrapFunctionIntoFunctor_&lt;c10::CompileTimeFunctionPointer&lt;at::Tensor (c10::ArrayRef&lt;long&gt;, c10::optional&lt;c10::ScalarType&gt;, c10::optional&lt;c10::Layout&gt;, c10::optional&lt;c10::Device&gt;, c10::optional&lt;bool&gt;), &amp;at::(anonymous namespace)::zeros&gt;, at::Tensor, c10::guts::typelist::typelist&lt;c10::ArrayRef&lt;long&gt;, c10::optional&lt;c10::ScalarType&gt;, c10::optional&lt;c10::Layout&gt;, c10::optional&lt;c10::Device&gt;, c10::optional&lt;bool&gt; &gt; &gt;, at::Tensor (c10::ArrayRef&lt;long&gt;, c10::optional&lt;c10::ScalarType&gt;, c10::optional&lt;c10::Layout&gt;, c10::optional&lt;c10::Device&gt;, c10::optional&lt;bool&gt;)&gt;::call (215 samples, 0.76%)</title><rect x="95.6413%" y="629" width="0.7588%" height="15" fill="rgb(228,75,8)"/><text x="95.8913%" y="639.50"></text></g><g><title>c10::Dispatcher::redispatch&lt;at::Tensor, c10::ArrayRef&lt;long&gt;, c10::optional&lt;c10::ScalarType&gt;, c10::optional&lt;c10::Layout&gt;, c10::optional&lt;c10::Device&gt;, c10::optional&lt;bool&gt; &gt; (215 samples, 0.76%)</title><rect x="95.6413%" y="613" width="0.7588%" height="15" fill="rgb(207,175,4)"/><text x="95.8913%" y="623.50"></text></g><g><title>c10::impl::wrap_kernel_functor_unboxed_&lt;c10::impl::detail::WrapFunctionIntoFunctor_&lt;c10::CompileTimeFunctionPointer&lt;at::Tensor (c10::ArrayRef&lt;long&gt;, c10::optional&lt;c10::ScalarType&gt;, c10::optional&lt;c10::Layout&gt;, c10::optional&lt;c10::Device&gt;, c10::optional&lt;bool&gt;), &amp;at::(anonymous namespace)::(anonymous namespace)::wrapper_zeros&gt;, at::Tensor, c10::guts::typelist::typelist&lt;c10::ArrayRef&lt;long&gt;, c10::optional&lt;c10::ScalarType&gt;, c10::optional&lt;c10::Layout&gt;, c10::optional&lt;c10::Device&gt;, c10::optional&lt;bool&gt; &gt; &gt;, at::Tensor (c10::ArrayRef&lt;long&gt;, c10::optional&lt;c10::ScalarType&gt;, c10::optional&lt;c10::Layout&gt;, c10::optional&lt;c10::Device&gt;, c10::optional&lt;bool&gt;)&gt;::call (215 samples, 0.76%)</title><rect x="95.6413%" y="597" width="0.7588%" height="15" fill="rgb(205,108,24)"/><text x="95.8913%" y="607.50"></text></g><g><title>at::native::zeros (215 samples, 0.76%)</title><rect x="95.6413%" y="581" width="0.7588%" height="15" fill="rgb(244,120,49)"/><text x="95.8913%" y="591.50"></text></g><g><title>at::empty (215 samples, 0.76%)</title><rect x="95.6413%" y="565" width="0.7588%" height="15" fill="rgb(223,47,38)"/><text x="95.8913%" y="575.50"></text></g><g><title>c10::impl::wrap_kernel_functor_unboxed_&lt;c10::impl::detail::WrapFunctionIntoFunctor_&lt;c10::CompileTimeFunctionPointer&lt;at::Tensor (c10::ArrayRef&lt;long&gt;, c10::optional&lt;c10::ScalarType&gt;, c10::optional&lt;c10::Layout&gt;, c10::optional&lt;c10::Device&gt;, c10::optional&lt;bool&gt;, c10::optional&lt;c10::MemoryFormat&gt;), &amp;at::(anonymous namespace)::empty_memory_format&gt;, at::Tensor, c10::guts::typelist::typelist&lt;c10::ArrayRef&lt;long&gt;, c10::optional&lt;c10::ScalarType&gt;, c10::optional&lt;c10::Layout&gt;, c10::optional&lt;c10::Device&gt;, c10::optional&lt;bool&gt;, c10::optional&lt;c10::MemoryFormat&gt; &gt; &gt;, at::Tensor (c10::ArrayRef&lt;long&gt;, c10::optional&lt;c10::ScalarType&gt;, c10::optional&lt;c10::Layout&gt;, c10::optional&lt;c10::Device&gt;, c10::optional&lt;bool&gt;, c10::optional&lt;c10::MemoryFormat&gt;)&gt;::call (215 samples, 0.76%)</title><rect x="95.6413%" y="549" width="0.7588%" height="15" fill="rgb(229,179,11)"/><text x="95.8913%" y="559.50"></text></g><g><title>c10::impl::wrap_kernel_functor_unboxed_&lt;c10::impl::detail::WrapFunctionIntoFunctor_&lt;c10::CompileTimeFunctionPointer&lt;at::Tensor (c10::ArrayRef&lt;long&gt;, c10::optional&lt;c10::ScalarType&gt;, c10::optional&lt;c10::Layout&gt;, c10::optional&lt;c10::Device&gt;, c10::optional&lt;bool&gt;, c10::optional&lt;c10::MemoryFormat&gt;), &amp;at::(anonymous namespace)::(anonymous namespace)::wrapper_empty_memory_format&gt;, at::Tensor, c10::guts::typelist::typelist&lt;c10::ArrayRef&lt;long&gt;, c10::optional&lt;c10::ScalarType&gt;, c10::optional&lt;c10::Layout&gt;, c10::optional&lt;c10::Device&gt;, c10::optional&lt;bool&gt;, c10::optional&lt;c10::MemoryFormat&gt; &gt; &gt;, at::Tensor (c10::ArrayRef&lt;long&gt;, c10::optional&lt;c10::ScalarType&gt;, c10::optional&lt;c10::Layout&gt;, c10::optional&lt;c10::Device&gt;, c10::optional&lt;bool&gt;, c10::optional&lt;c10::MemoryFormat&gt;)&gt;::call (215 samples, 0.76%)</title><rect x="95.6413%" y="533" width="0.7588%" height="15" fill="rgb(231,122,1)"/><text x="95.8913%" y="543.50"></text></g><g><title>at::(anonymous namespace)::(anonymous namespace)::wrapper_empty_memory_format (215 samples, 0.76%)</title><rect x="95.6413%" y="517" width="0.7588%" height="15" fill="rgb(245,119,9)"/><text x="95.8913%" y="527.50"></text></g><g><title>at::native::empty_cuda (215 samples, 0.76%)</title><rect x="95.6413%" y="501" width="0.7588%" height="15" fill="rgb(241,163,25)"/><text x="95.8913%" y="511.50"></text></g><g><title>c10::cuda::CUDACachingAllocator::CudaCachingAllocator::allocate (215 samples, 0.76%)</title><rect x="95.6413%" y="485" width="0.7588%" height="15" fill="rgb(217,214,3)"/><text x="95.8913%" y="495.50"></text></g><g><title>c10::cuda::CUDACachingAllocator::THCCachingAllocator::malloc (215 samples, 0.76%)</title><rect x="95.6413%" y="469" width="0.7588%" height="15" fill="rgb(240,86,28)"/><text x="95.8913%" y="479.50"></text></g><g><title>c10::cuda::CUDACachingAllocator::DeviceCachingAllocator::malloc (215 samples, 0.76%)</title><rect x="95.6413%" y="453" width="0.7588%" height="15" fill="rgb(215,47,9)"/><text x="95.8913%" y="463.50"></text></g><g><title>c10::cuda::CUDACachingAllocator::DeviceCachingAllocator::alloc_block (215 samples, 0.76%)</title><rect x="95.6413%" y="437" width="0.7588%" height="15" fill="rgb(252,25,45)"/><text x="95.8913%" y="447.50"></text></g><g><title>cudaStreamIsCapturing (215 samples, 0.76%)</title><rect x="95.6413%" y="421" width="0.7588%" height="15" fill="rgb(251,164,9)"/><text x="95.8913%" y="431.50"></text></g><g><title>[libcudart-6d56b25a.so.11.0] (215 samples, 0.76%)</title><rect x="95.6413%" y="405" width="0.7588%" height="15" fill="rgb(233,194,0)"/><text x="95.8913%" y="415.50"></text></g><g><title>[libcudart-6d56b25a.so.11.0] (215 samples, 0.76%)</title><rect x="95.6413%" y="389" width="0.7588%" height="15" fill="rgb(249,111,24)"/><text x="95.8913%" y="399.50"></text></g><g><title>[libcudart-6d56b25a.so.11.0] (215 samples, 0.76%)</title><rect x="95.6413%" y="373" width="0.7588%" height="15" fill="rgb(250,223,3)"/><text x="95.8913%" y="383.50"></text></g><g><title>[libcudart-6d56b25a.so.11.0] (215 samples, 0.76%)</title><rect x="95.6413%" y="357" width="0.7588%" height="15" fill="rgb(236,178,37)"/><text x="95.8913%" y="367.50"></text></g><g><title>[libcudart-6d56b25a.so.11.0] (215 samples, 0.76%)</title><rect x="95.6413%" y="341" width="0.7588%" height="15" fill="rgb(241,158,50)"/><text x="95.8913%" y="351.50"></text></g><g><title>[libcudart-6d56b25a.so.11.0] (215 samples, 0.76%)</title><rect x="95.6413%" y="325" width="0.7588%" height="15" fill="rgb(213,121,41)"/><text x="95.8913%" y="335.50"></text></g><g><title>[libcuda.so.460.91.03] (215 samples, 0.76%)</title><rect x="95.6413%" y="309" width="0.7588%" height="15" fill="rgb(240,92,3)"/><text x="95.8913%" y="319.50"></text></g><g><title>[libcuda.so.460.91.03] (215 samples, 0.76%)</title><rect x="95.6413%" y="293" width="0.7588%" height="15" fill="rgb(205,123,3)"/><text x="95.8913%" y="303.50"></text></g><g><title>[libcuda.so.460.91.03] (215 samples, 0.76%)</title><rect x="95.6413%" y="277" width="0.7588%" height="15" fill="rgb(205,97,47)"/><text x="95.8913%" y="287.50"></text></g><g><title>[libcuda.so.460.91.03] (215 samples, 0.76%)</title><rect x="95.6413%" y="261" width="0.7588%" height="15" fill="rgb(247,152,14)"/><text x="95.8913%" y="271.50"></text></g><g><title>[libcuda.so.460.91.03] (215 samples, 0.76%)</title><rect x="95.6413%" y="245" width="0.7588%" height="15" fill="rgb(248,195,53)"/><text x="95.8913%" y="255.50"></text></g><g><title>[unknown] (26,624 samples, 93.96%)</title><rect x="2.5623%" y="805" width="93.9648%" height="15" fill="rgb(226,201,16)"/><text x="2.8123%" y="815.50">[unknown]</text></g><g><title>_dl_start_user (74 samples, 0.26%)</title><rect x="96.5448%" y="805" width="0.2612%" height="15" fill="rgb(205,98,0)"/><text x="96.7948%" y="815.50"></text></g><g><title>_dl_init (74 samples, 0.26%)</title><rect x="96.5448%" y="789" width="0.2612%" height="15" fill="rgb(214,191,48)"/><text x="96.7948%" y="799.50"></text></g><g><title>call_init (74 samples, 0.26%)</title><rect x="96.5448%" y="773" width="0.2612%" height="15" fill="rgb(237,112,39)"/><text x="96.7948%" y="783.50"></text></g><g><title>call_init (74 samples, 0.26%)</title><rect x="96.5448%" y="757" width="0.2612%" height="15" fill="rgb(247,203,27)"/><text x="96.7948%" y="767.50"></text></g><g><title>[libcudart-6d56b25a.so.11.0] (30 samples, 0.11%)</title><rect x="96.8130%" y="661" width="0.1059%" height="15" fill="rgb(235,124,28)"/><text x="97.0630%" y="671.50"></text></g><g><title>[libcudart-6d56b25a.so.11.0] (30 samples, 0.11%)</title><rect x="96.8130%" y="645" width="0.1059%" height="15" fill="rgb(208,207,46)"/><text x="97.0630%" y="655.50"></text></g><g><title>[libcudart-6d56b25a.so.11.0] (30 samples, 0.11%)</title><rect x="96.8130%" y="629" width="0.1059%" height="15" fill="rgb(234,176,4)"/><text x="97.0630%" y="639.50"></text></g><g><title>[libcudart-6d56b25a.so.11.0] (29 samples, 0.10%)</title><rect x="96.8165%" y="613" width="0.1024%" height="15" fill="rgb(230,133,28)"/><text x="97.0665%" y="623.50"></text></g><g><title>[libcudart-6d56b25a.so.11.0] (31 samples, 0.11%)</title><rect x="96.8130%" y="725" width="0.1094%" height="15" fill="rgb(211,137,40)"/><text x="97.0630%" y="735.50"></text></g><g><title>__cxa_finalize (31 samples, 0.11%)</title><rect x="96.8130%" y="709" width="0.1094%" height="15" fill="rgb(254,35,13)"/><text x="97.0630%" y="719.50"></text></g><g><title>[libcudart-6d56b25a.so.11.0] (31 samples, 0.11%)</title><rect x="96.8130%" y="693" width="0.1094%" height="15" fill="rgb(225,49,51)"/><text x="97.0630%" y="703.50"></text></g><g><title>[libcudart-6d56b25a.so.11.0] (31 samples, 0.11%)</title><rect x="96.8130%" y="677" width="0.1094%" height="15" fill="rgb(251,10,15)"/><text x="97.0630%" y="687.50"></text></g><g><title>__cudaUnregisterBinaryUtil (41 samples, 0.14%)</title><rect x="96.9789%" y="693" width="0.1447%" height="15" fill="rgb(228,207,15)"/><text x="97.2289%" y="703.50"></text></g><g><title>[unknown] (39 samples, 0.14%)</title><rect x="96.9860%" y="677" width="0.1376%" height="15" fill="rgb(241,99,19)"/><text x="97.2360%" y="687.50"></text></g><g><title>[unknown] (39 samples, 0.14%)</title><rect x="96.9860%" y="661" width="0.1376%" height="15" fill="rgb(207,104,49)"/><text x="97.2360%" y="671.50"></text></g><g><title>[unknown] (39 samples, 0.14%)</title><rect x="96.9860%" y="645" width="0.1376%" height="15" fill="rgb(234,99,18)"/><text x="97.2360%" y="655.50"></text></g><g><title>[unknown] (39 samples, 0.14%)</title><rect x="96.9860%" y="629" width="0.1376%" height="15" fill="rgb(213,191,49)"/><text x="97.2360%" y="639.50"></text></g><g><title>[unknown] (39 samples, 0.14%)</title><rect x="96.9860%" y="613" width="0.1376%" height="15" fill="rgb(210,226,19)"/><text x="97.2360%" y="623.50"></text></g><g><title>[unknown] (39 samples, 0.14%)</title><rect x="96.9860%" y="597" width="0.1376%" height="15" fill="rgb(229,97,18)"/><text x="97.2360%" y="607.50"></text></g><g><title>[unknown] (39 samples, 0.14%)</title><rect x="96.9860%" y="581" width="0.1376%" height="15" fill="rgb(211,167,15)"/><text x="97.2360%" y="591.50"></text></g><g><title>[unknown] (38 samples, 0.13%)</title><rect x="96.9895%" y="565" width="0.1341%" height="15" fill="rgb(210,169,34)"/><text x="97.2395%" y="575.50"></text></g><g><title>[unknown] (36 samples, 0.13%)</title><rect x="96.9965%" y="549" width="0.1271%" height="15" fill="rgb(241,121,31)"/><text x="97.2465%" y="559.50"></text></g><g><title>[unknown] (35 samples, 0.12%)</title><rect x="97.0001%" y="533" width="0.1235%" height="15" fill="rgb(232,40,11)"/><text x="97.2501%" y="543.50"></text></g><g><title>[unknown] (35 samples, 0.12%)</title><rect x="97.0001%" y="517" width="0.1235%" height="15" fill="rgb(205,86,26)"/><text x="97.2501%" y="527.50"></text></g><g><title>[unknown] (34 samples, 0.12%)</title><rect x="97.0036%" y="501" width="0.1200%" height="15" fill="rgb(231,126,28)"/><text x="97.2536%" y="511.50"></text></g><g><title>[unknown] (34 samples, 0.12%)</title><rect x="97.0036%" y="485" width="0.1200%" height="15" fill="rgb(219,221,18)"/><text x="97.2536%" y="495.50"></text></g><g><title>[unknown] (31 samples, 0.11%)</title><rect x="97.0142%" y="469" width="0.1094%" height="15" fill="rgb(211,40,0)"/><text x="97.2642%" y="479.50"></text></g><g><title>__libc_start_main (127 samples, 0.45%)</title><rect x="96.8130%" y="789" width="0.4482%" height="15" fill="rgb(239,85,43)"/><text x="97.0630%" y="799.50"></text></g><g><title>__GI_exit (127 samples, 0.45%)</title><rect x="96.8130%" y="773" width="0.4482%" height="15" fill="rgb(231,55,21)"/><text x="97.0630%" y="783.50"></text></g><g><title>__run_exit_handlers (127 samples, 0.45%)</title><rect x="96.8130%" y="757" width="0.4482%" height="15" fill="rgb(225,184,43)"/><text x="97.0630%" y="767.50"></text></g><g><title>_dl_fini (127 samples, 0.45%)</title><rect x="96.8130%" y="741" width="0.4482%" height="15" fill="rgb(251,158,41)"/><text x="97.0630%" y="751.50"></text></g><g><title>__do_global_dtors_aux (95 samples, 0.34%)</title><rect x="96.9260%" y="725" width="0.3353%" height="15" fill="rgb(234,159,37)"/><text x="97.1760%" y="735.50"></text></g><g><title>__cxa_finalize (95 samples, 0.34%)</title><rect x="96.9260%" y="709" width="0.3353%" height="15" fill="rgb(216,204,22)"/><text x="97.1760%" y="719.50"></text></g><g><title>[unknown] (96 samples, 0.34%)</title><rect x="97.4165%" y="693" width="0.3388%" height="15" fill="rgb(214,17,3)"/><text x="97.6665%" y="703.50"></text></g><g><title>[unknown] (96 samples, 0.34%)</title><rect x="97.4165%" y="677" width="0.3388%" height="15" fill="rgb(212,111,17)"/><text x="97.6665%" y="687.50"></text></g><g><title>[unknown] (94 samples, 0.33%)</title><rect x="97.4236%" y="661" width="0.3318%" height="15" fill="rgb(221,157,24)"/><text x="97.6736%" y="671.50"></text></g><g><title>[unknown] (94 samples, 0.33%)</title><rect x="97.4236%" y="645" width="0.3318%" height="15" fill="rgb(252,16,13)"/><text x="97.6736%" y="655.50"></text></g><g><title>[unknown] (94 samples, 0.33%)</title><rect x="97.4236%" y="629" width="0.3318%" height="15" fill="rgb(221,62,2)"/><text x="97.6736%" y="639.50"></text></g><g><title>[unknown] (92 samples, 0.32%)</title><rect x="97.4306%" y="613" width="0.3247%" height="15" fill="rgb(247,87,22)"/><text x="97.6806%" y="623.50"></text></g><g><title>[unknown] (92 samples, 0.32%)</title><rect x="97.4306%" y="597" width="0.3247%" height="15" fill="rgb(215,73,9)"/><text x="97.6806%" y="607.50"></text></g><g><title>[unknown] (91 samples, 0.32%)</title><rect x="97.4342%" y="581" width="0.3212%" height="15" fill="rgb(207,175,33)"/><text x="97.6842%" y="591.50"></text></g><g><title>[unknown] (84 samples, 0.30%)</title><rect x="97.4589%" y="565" width="0.2965%" height="15" fill="rgb(243,129,54)"/><text x="97.7089%" y="575.50"></text></g><g><title>[unknown] (83 samples, 0.29%)</title><rect x="97.4624%" y="549" width="0.2929%" height="15" fill="rgb(227,119,45)"/><text x="97.7124%" y="559.50"></text></g><g><title>[unknown] (80 samples, 0.28%)</title><rect x="97.4730%" y="533" width="0.2823%" height="15" fill="rgb(205,109,36)"/><text x="97.7230%" y="543.50"></text></g><g><title>[unknown] (80 samples, 0.28%)</title><rect x="97.4730%" y="517" width="0.2823%" height="15" fill="rgb(205,6,39)"/><text x="97.7230%" y="527.50"></text></g><g><title>[unknown] (78 samples, 0.28%)</title><rect x="97.4801%" y="501" width="0.2753%" height="15" fill="rgb(221,32,16)"/><text x="97.7301%" y="511.50"></text></g><g><title>[unknown] (77 samples, 0.27%)</title><rect x="97.4836%" y="485" width="0.2718%" height="15" fill="rgb(228,144,50)"/><text x="97.7336%" y="495.50"></text></g><g><title>[unknown] (74 samples, 0.26%)</title><rect x="97.4942%" y="469" width="0.2612%" height="15" fill="rgb(229,201,53)"/><text x="97.7442%" y="479.50"></text></g><g><title>[unknown] (72 samples, 0.25%)</title><rect x="97.5012%" y="453" width="0.2541%" height="15" fill="rgb(249,153,27)"/><text x="97.7512%" y="463.50"></text></g><g><title>[unknown] (64 samples, 0.23%)</title><rect x="97.5295%" y="437" width="0.2259%" height="15" fill="rgb(227,106,25)"/><text x="97.7795%" y="447.50"></text></g><g><title>[unknown] (63 samples, 0.22%)</title><rect x="97.5330%" y="421" width="0.2223%" height="15" fill="rgb(230,65,29)"/><text x="97.7830%" y="431.50"></text></g><g><title>[unknown] (40 samples, 0.14%)</title><rect x="97.6142%" y="405" width="0.1412%" height="15" fill="rgb(221,57,46)"/><text x="97.8642%" y="415.50"></text></g><g><title>[unknown] (29 samples, 0.10%)</title><rect x="97.6530%" y="389" width="0.1024%" height="15" fill="rgb(229,161,17)"/><text x="97.9030%" y="399.50"></text></g><g><title>elf_machine_rela (46 samples, 0.16%)</title><rect x="97.7553%" y="693" width="0.1623%" height="15" fill="rgb(222,213,11)"/><text x="98.0053%" y="703.50"></text></g><g><title>_dl_lookup_symbol_x (40 samples, 0.14%)</title><rect x="97.7765%" y="677" width="0.1412%" height="15" fill="rgb(235,35,13)"/><text x="98.0265%" y="687.50"></text></g><g><title>_start (768 samples, 2.71%)</title><rect x="96.8130%" y="805" width="2.7105%" height="15" fill="rgb(233,158,34)"/><text x="97.0630%" y="815.50">_s..</text></g><g><title>_dl_start (641 samples, 2.26%)</title><rect x="97.2612%" y="789" width="2.2623%" height="15" fill="rgb(215,151,48)"/><text x="97.5112%" y="799.50">_..</text></g><g><title>_dl_start_final (641 samples, 2.26%)</title><rect x="97.2612%" y="773" width="2.2623%" height="15" fill="rgb(229,84,14)"/><text x="97.5112%" y="783.50">_..</text></g><g><title>_dl_sysdep_start (641 samples, 2.26%)</title><rect x="97.2612%" y="757" width="2.2623%" height="15" fill="rgb(229,68,14)"/><text x="97.5112%" y="767.50">_..</text></g><g><title>dl_main (641 samples, 2.26%)</title><rect x="97.2612%" y="741" width="2.2623%" height="15" fill="rgb(243,106,26)"/><text x="97.5112%" y="751.50">d..</text></g><g><title>_dl_relocate_object (639 samples, 2.26%)</title><rect x="97.2683%" y="725" width="2.2552%" height="15" fill="rgb(206,45,38)"/><text x="97.5183%" y="735.50">_..</text></g><g><title>elf_dynamic_do_Rela (639 samples, 2.26%)</title><rect x="97.2683%" y="709" width="2.2552%" height="15" fill="rgb(226,6,15)"/><text x="97.5183%" y="719.50">e..</text></g><g><title>elf_machine_rela_relative (455 samples, 1.61%)</title><rect x="97.9177%" y="693" width="1.6058%" height="15" fill="rgb(232,22,54)"/><text x="98.1677%" y="703.50"></text></g><g><title>[unknown] (397 samples, 1.40%)</title><rect x="98.1224%" y="677" width="1.4011%" height="15" fill="rgb(229,222,32)"/><text x="98.3724%" y="687.50"></text></g><g><title>[unknown] (385 samples, 1.36%)</title><rect x="98.1647%" y="661" width="1.3588%" height="15" fill="rgb(228,62,29)"/><text x="98.4147%" y="671.50"></text></g><g><title>[unknown] (365 samples, 1.29%)</title><rect x="98.2353%" y="645" width="1.2882%" height="15" fill="rgb(251,103,34)"/><text x="98.4853%" y="655.50"></text></g><g><title>[unknown] (365 samples, 1.29%)</title><rect x="98.2353%" y="629" width="1.2882%" height="15" fill="rgb(233,12,30)"/><text x="98.4853%" y="639.50"></text></g><g><title>[unknown] (361 samples, 1.27%)</title><rect x="98.2495%" y="613" width="1.2741%" height="15" fill="rgb(238,52,0)"/><text x="98.4995%" y="623.50"></text></g><g><title>[unknown] (358 samples, 1.26%)</title><rect x="98.2600%" y="597" width="1.2635%" height="15" fill="rgb(223,98,5)"/><text x="98.5100%" y="607.50"></text></g><g><title>[unknown] (352 samples, 1.24%)</title><rect x="98.2812%" y="581" width="1.2423%" height="15" fill="rgb(228,75,37)"/><text x="98.5312%" y="591.50"></text></g><g><title>[unknown] (334 samples, 1.18%)</title><rect x="98.3447%" y="565" width="1.1788%" height="15" fill="rgb(205,115,49)"/><text x="98.5947%" y="575.50"></text></g><g><title>[unknown] (325 samples, 1.15%)</title><rect x="98.3765%" y="549" width="1.1470%" height="15" fill="rgb(250,154,43)"/><text x="98.6265%" y="559.50"></text></g><g><title>[unknown] (314 samples, 1.11%)</title><rect x="98.4153%" y="533" width="1.1082%" height="15" fill="rgb(226,43,29)"/><text x="98.6653%" y="543.50"></text></g><g><title>[unknown] (294 samples, 1.04%)</title><rect x="98.4859%" y="517" width="1.0376%" height="15" fill="rgb(249,228,39)"/><text x="98.7359%" y="527.50"></text></g><g><title>[unknown] (270 samples, 0.95%)</title><rect x="98.5706%" y="501" width="0.9529%" height="15" fill="rgb(216,79,43)"/><text x="98.8206%" y="511.50"></text></g><g><title>[unknown] (261 samples, 0.92%)</title><rect x="98.6024%" y="485" width="0.9212%" height="15" fill="rgb(228,95,12)"/><text x="98.8524%" y="495.50"></text></g><g><title>[unknown] (246 samples, 0.87%)</title><rect x="98.6553%" y="469" width="0.8682%" height="15" fill="rgb(249,221,15)"/><text x="98.9053%" y="479.50"></text></g><g><title>[unknown] (242 samples, 0.85%)</title><rect x="98.6694%" y="453" width="0.8541%" height="15" fill="rgb(233,34,13)"/><text x="98.9194%" y="463.50"></text></g><g><title>[unknown] (233 samples, 0.82%)</title><rect x="98.7012%" y="437" width="0.8223%" height="15" fill="rgb(214,103,39)"/><text x="98.9512%" y="447.50"></text></g><g><title>[unknown] (202 samples, 0.71%)</title><rect x="98.8106%" y="421" width="0.7129%" height="15" fill="rgb(251,126,39)"/><text x="99.0606%" y="431.50"></text></g><g><title>[unknown] (187 samples, 0.66%)</title><rect x="98.8636%" y="405" width="0.6600%" height="15" fill="rgb(214,216,36)"/><text x="99.1136%" y="415.50"></text></g><g><title>[unknown] (107 samples, 0.38%)</title><rect x="99.1459%" y="389" width="0.3776%" height="15" fill="rgb(220,221,8)"/><text x="99.3959%" y="399.50"></text></g><g><title>[unknown] (76 samples, 0.27%)</title><rect x="99.2553%" y="373" width="0.2682%" height="15" fill="rgb(240,216,3)"/><text x="99.5053%" y="383.50"></text></g><g><title>[unknown] (33 samples, 0.12%)</title><rect x="99.4071%" y="357" width="0.1165%" height="15" fill="rgb(232,218,17)"/><text x="99.6571%" y="367.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for usize&gt;::hash (38 samples, 0.13%)</title><rect x="99.5235%" y="805" width="0.1341%" height="15" fill="rgb(229,163,45)"/><text x="99.7735%" y="815.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (49 samples, 0.17%)</title><rect x="99.6577%" y="805" width="0.1729%" height="15" fill="rgb(231,110,42)"/><text x="99.9077%" y="815.50"></text></g><g><title>mcts-policy (28,302 samples, 99.89%)</title><rect x="0.0918%" y="821" width="99.8871%" height="15" fill="rgb(208,170,48)"/><text x="0.3418%" y="831.50">mcts-policy</text></g><g><title>all (28,334 samples, 100%)</title><rect x="0.0000%" y="837" width="100.0000%" height="15" fill="rgb(239,116,25)"/><text x="0.2500%" y="847.50"></text></g></svg></svg>